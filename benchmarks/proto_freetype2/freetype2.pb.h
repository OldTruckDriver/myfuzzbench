// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: freetype2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_freetype2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_freetype2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_freetype2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_freetype2_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_freetype2_2eproto;
class FT_Byte_Proto;
struct FT_Byte_ProtoDefaultTypeInternal;
extern FT_Byte_ProtoDefaultTypeInternal _FT_Byte_Proto_default_instance_;
class FT_Proto;
struct FT_ProtoDefaultTypeInternal;
extern FT_ProtoDefaultTypeInternal _FT_Proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FT_Byte_Proto* Arena::CreateMaybeMessage<::FT_Byte_Proto>(Arena*);
template<> ::FT_Proto* Arena::CreateMaybeMessage<::FT_Proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FT_Byte_Proto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FT_Byte_Proto) */ {
 public:
  inline FT_Byte_Proto() : FT_Byte_Proto(nullptr) {}
  ~FT_Byte_Proto() override;
  explicit PROTOBUF_CONSTEXPR FT_Byte_Proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FT_Byte_Proto(const FT_Byte_Proto& from);
  FT_Byte_Proto(FT_Byte_Proto&& from) noexcept
    : FT_Byte_Proto() {
    *this = ::std::move(from);
  }

  inline FT_Byte_Proto& operator=(const FT_Byte_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FT_Byte_Proto& operator=(FT_Byte_Proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FT_Byte_Proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FT_Byte_Proto* internal_default_instance() {
    return reinterpret_cast<const FT_Byte_Proto*>(
               &_FT_Byte_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FT_Byte_Proto& a, FT_Byte_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(FT_Byte_Proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FT_Byte_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FT_Byte_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FT_Byte_Proto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FT_Byte_Proto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FT_Byte_Proto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FT_Byte_Proto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FT_Byte_Proto";
  }
  protected:
  explicit FT_Byte_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFtbyteFieldNumber = 1,
  };
  // repeated uint32 ftbyte = 1;
  int ftbyte_size() const;
  private:
  int _internal_ftbyte_size() const;
  public:
  void clear_ftbyte();
  private:
  uint32_t _internal_ftbyte(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ftbyte() const;
  void _internal_add_ftbyte(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ftbyte();
  public:
  uint32_t ftbyte(int index) const;
  void set_ftbyte(int index, uint32_t value);
  void add_ftbyte(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ftbyte() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ftbyte();

  // @@protoc_insertion_point(class_scope:FT_Byte_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ftbyte_;
  mutable std::atomic<int> _ftbyte_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_freetype2_2eproto;
};
// -------------------------------------------------------------------

class FT_Proto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FT_Proto) */ {
 public:
  inline FT_Proto() : FT_Proto(nullptr) {}
  ~FT_Proto() override;
  explicit PROTOBUF_CONSTEXPR FT_Proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FT_Proto(const FT_Proto& from);
  FT_Proto(FT_Proto&& from) noexcept
    : FT_Proto() {
    *this = ::std::move(from);
  }

  inline FT_Proto& operator=(const FT_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FT_Proto& operator=(FT_Proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FT_Proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FT_Proto* internal_default_instance() {
    return reinterpret_cast<const FT_Proto*>(
               &_FT_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FT_Proto& a, FT_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(FT_Proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FT_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FT_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FT_Proto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FT_Proto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FT_Proto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FT_Proto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FT_Proto";
  }
  protected:
  explicit FT_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFtByteFieldNumber = 1,
  };
  // repeated .FT_Byte_Proto ft_byte = 1;
  int ft_byte_size() const;
  private:
  int _internal_ft_byte_size() const;
  public:
  void clear_ft_byte();
  ::FT_Byte_Proto* mutable_ft_byte(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FT_Byte_Proto >*
      mutable_ft_byte();
  private:
  const ::FT_Byte_Proto& _internal_ft_byte(int index) const;
  ::FT_Byte_Proto* _internal_add_ft_byte();
  public:
  const ::FT_Byte_Proto& ft_byte(int index) const;
  ::FT_Byte_Proto* add_ft_byte();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FT_Byte_Proto >&
      ft_byte() const;

  // @@protoc_insertion_point(class_scope:FT_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FT_Byte_Proto > ft_byte_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_freetype2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FT_Byte_Proto

// repeated uint32 ftbyte = 1;
inline int FT_Byte_Proto::_internal_ftbyte_size() const {
  return ftbyte_.size();
}
inline int FT_Byte_Proto::ftbyte_size() const {
  return _internal_ftbyte_size();
}
inline void FT_Byte_Proto::clear_ftbyte() {
  ftbyte_.Clear();
}
inline uint32_t FT_Byte_Proto::_internal_ftbyte(int index) const {
  return ftbyte_.Get(index);
}
inline uint32_t FT_Byte_Proto::ftbyte(int index) const {
  // @@protoc_insertion_point(field_get:FT_Byte_Proto.ftbyte)
  return _internal_ftbyte(index);
}
inline void FT_Byte_Proto::set_ftbyte(int index, uint32_t value) {
  ftbyte_.Set(index, value);
  // @@protoc_insertion_point(field_set:FT_Byte_Proto.ftbyte)
}
inline void FT_Byte_Proto::_internal_add_ftbyte(uint32_t value) {
  ftbyte_.Add(value);
}
inline void FT_Byte_Proto::add_ftbyte(uint32_t value) {
  _internal_add_ftbyte(value);
  // @@protoc_insertion_point(field_add:FT_Byte_Proto.ftbyte)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FT_Byte_Proto::_internal_ftbyte() const {
  return ftbyte_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FT_Byte_Proto::ftbyte() const {
  // @@protoc_insertion_point(field_list:FT_Byte_Proto.ftbyte)
  return _internal_ftbyte();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FT_Byte_Proto::_internal_mutable_ftbyte() {
  return &ftbyte_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FT_Byte_Proto::mutable_ftbyte() {
  // @@protoc_insertion_point(field_mutable_list:FT_Byte_Proto.ftbyte)
  return _internal_mutable_ftbyte();
}

// -------------------------------------------------------------------

// FT_Proto

// repeated .FT_Byte_Proto ft_byte = 1;
inline int FT_Proto::_internal_ft_byte_size() const {
  return ft_byte_.size();
}
inline int FT_Proto::ft_byte_size() const {
  return _internal_ft_byte_size();
}
inline void FT_Proto::clear_ft_byte() {
  ft_byte_.Clear();
}
inline ::FT_Byte_Proto* FT_Proto::mutable_ft_byte(int index) {
  // @@protoc_insertion_point(field_mutable:FT_Proto.ft_byte)
  return ft_byte_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FT_Byte_Proto >*
FT_Proto::mutable_ft_byte() {
  // @@protoc_insertion_point(field_mutable_list:FT_Proto.ft_byte)
  return &ft_byte_;
}
inline const ::FT_Byte_Proto& FT_Proto::_internal_ft_byte(int index) const {
  return ft_byte_.Get(index);
}
inline const ::FT_Byte_Proto& FT_Proto::ft_byte(int index) const {
  // @@protoc_insertion_point(field_get:FT_Proto.ft_byte)
  return _internal_ft_byte(index);
}
inline ::FT_Byte_Proto* FT_Proto::_internal_add_ft_byte() {
  return ft_byte_.Add();
}
inline ::FT_Byte_Proto* FT_Proto::add_ft_byte() {
  ::FT_Byte_Proto* _add = _internal_add_ft_byte();
  // @@protoc_insertion_point(field_add:FT_Proto.ft_byte)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FT_Byte_Proto >&
FT_Proto::ft_byte() const {
  // @@protoc_insertion_point(field_list:FT_Proto.ft_byte)
  return ft_byte_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_freetype2_2eproto
