// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: freetype2.proto

#include "freetype2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR FT_Byte_Proto::FT_Byte_Proto(
    ::_pbi::ConstantInitialized)
  : ftbyte_(){}
struct FT_Byte_ProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FT_Byte_ProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FT_Byte_ProtoDefaultTypeInternal() {}
  union {
    FT_Byte_Proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FT_Byte_ProtoDefaultTypeInternal _FT_Byte_Proto_default_instance_;
PROTOBUF_CONSTEXPR FT_Proto::FT_Proto(
    ::_pbi::ConstantInitialized)
  : ft_byte_(){}
struct FT_ProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FT_ProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FT_ProtoDefaultTypeInternal() {}
  union {
    FT_Proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FT_ProtoDefaultTypeInternal _FT_Proto_default_instance_;
static ::_pb::Metadata file_level_metadata_freetype2_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_freetype2_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_freetype2_2eproto = nullptr;

const uint32_t TableStruct_freetype2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FT_Byte_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FT_Byte_Proto, ftbyte_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FT_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FT_Proto, ft_byte_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FT_Byte_Proto)},
  { 7, -1, -1, sizeof(::FT_Proto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_FT_Byte_Proto_default_instance_._instance,
  &::_FT_Proto_default_instance_._instance,
};

const char descriptor_table_protodef_freetype2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017freetype2.proto\"\037\n\rFT_Byte_Proto\022\016\n\006ft"
  "byte\030\001 \003(\014\"+\n\010FT_Proto\022\037\n\007ft_byte\030\001 \003(\0132"
  "\016.FT_Byte_Protob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_freetype2_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_freetype2_2eproto = {
    false, false, 103, descriptor_table_protodef_freetype2_2eproto,
    "freetype2.proto",
    &descriptor_table_freetype2_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_freetype2_2eproto::offsets,
    file_level_metadata_freetype2_2eproto, file_level_enum_descriptors_freetype2_2eproto,
    file_level_service_descriptors_freetype2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_freetype2_2eproto_getter() {
  return &descriptor_table_freetype2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_freetype2_2eproto(&descriptor_table_freetype2_2eproto);

// ===================================================================

class FT_Byte_Proto::_Internal {
 public:
};

FT_Byte_Proto::FT_Byte_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ftbyte_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:FT_Byte_Proto)
}
FT_Byte_Proto::FT_Byte_Proto(const FT_Byte_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ftbyte_(from.ftbyte_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FT_Byte_Proto)
}

inline void FT_Byte_Proto::SharedCtor() {
}

FT_Byte_Proto::~FT_Byte_Proto() {
  // @@protoc_insertion_point(destructor:FT_Byte_Proto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FT_Byte_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FT_Byte_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FT_Byte_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:FT_Byte_Proto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ftbyte_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FT_Byte_Proto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes ftbyte = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ftbyte();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FT_Byte_Proto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FT_Byte_Proto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes ftbyte = 1;
  for (int i = 0, n = this->_internal_ftbyte_size(); i < n; i++) {
    const auto& s = this->_internal_ftbyte(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FT_Byte_Proto)
  return target;
}

size_t FT_Byte_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FT_Byte_Proto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes ftbyte = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ftbyte_.size());
  for (int i = 0, n = ftbyte_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      ftbyte_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FT_Byte_Proto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FT_Byte_Proto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FT_Byte_Proto::GetClassData() const { return &_class_data_; }

void FT_Byte_Proto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FT_Byte_Proto *>(to)->MergeFrom(
      static_cast<const FT_Byte_Proto &>(from));
}


void FT_Byte_Proto::MergeFrom(const FT_Byte_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FT_Byte_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ftbyte_.MergeFrom(from.ftbyte_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FT_Byte_Proto::CopyFrom(const FT_Byte_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FT_Byte_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FT_Byte_Proto::IsInitialized() const {
  return true;
}

void FT_Byte_Proto::InternalSwap(FT_Byte_Proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ftbyte_.InternalSwap(&other->ftbyte_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FT_Byte_Proto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_freetype2_2eproto_getter, &descriptor_table_freetype2_2eproto_once,
      file_level_metadata_freetype2_2eproto[0]);
}

// ===================================================================

class FT_Proto::_Internal {
 public:
};

FT_Proto::FT_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ft_byte_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:FT_Proto)
}
FT_Proto::FT_Proto(const FT_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ft_byte_(from.ft_byte_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FT_Proto)
}

inline void FT_Proto::SharedCtor() {
}

FT_Proto::~FT_Proto() {
  // @@protoc_insertion_point(destructor:FT_Proto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FT_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FT_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FT_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:FT_Proto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ft_byte_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FT_Proto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .FT_Byte_Proto ft_byte = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ft_byte(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FT_Proto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FT_Proto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FT_Byte_Proto ft_byte = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ft_byte_size()); i < n; i++) {
    const auto& repfield = this->_internal_ft_byte(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FT_Proto)
  return target;
}

size_t FT_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FT_Proto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FT_Byte_Proto ft_byte = 1;
  total_size += 1UL * this->_internal_ft_byte_size();
  for (const auto& msg : this->ft_byte_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FT_Proto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FT_Proto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FT_Proto::GetClassData() const { return &_class_data_; }

void FT_Proto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FT_Proto *>(to)->MergeFrom(
      static_cast<const FT_Proto &>(from));
}


void FT_Proto::MergeFrom(const FT_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FT_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ft_byte_.MergeFrom(from.ft_byte_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FT_Proto::CopyFrom(const FT_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FT_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FT_Proto::IsInitialized() const {
  return true;
}

void FT_Proto::InternalSwap(FT_Proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ft_byte_.InternalSwap(&other->ft_byte_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FT_Proto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_freetype2_2eproto_getter, &descriptor_table_freetype2_2eproto_once,
      file_level_metadata_freetype2_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FT_Byte_Proto*
Arena::CreateMaybeMessage< ::FT_Byte_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FT_Byte_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::FT_Proto*
Arena::CreateMaybeMessage< ::FT_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FT_Proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
