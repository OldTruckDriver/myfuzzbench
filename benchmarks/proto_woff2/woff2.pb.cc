// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: woff2.proto

#include "woff2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR FontCollectionProto_TablesProtoEntry_DoNotUse::FontCollectionProto_TablesProtoEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct FontCollectionProto_TablesProtoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FontCollectionProto_TablesProtoEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FontCollectionProto_TablesProtoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FontCollectionProto_TablesProtoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FontCollectionProto_TablesProtoEntry_DoNotUseDefaultTypeInternal _FontCollectionProto_TablesProtoEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FontCollectionProto::FontCollectionProto(
    ::_pbi::ConstantInitialized)
  : tables_proto_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , fonts_proto_()
  , flavor_proto_(0u)
  , header_version_proto_(0u){}
struct FontCollectionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FontCollectionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FontCollectionProtoDefaultTypeInternal() {}
  union {
    FontCollectionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FontCollectionProtoDefaultTypeInternal _FontCollectionProto_default_instance_;
PROTOBUF_CONSTEXPR GlyphProto::GlyphProto(
    ::_pbi::ConstantInitialized)
  : contours_proto_()
  , instructions_data_proto_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , composite_data_proto_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , x_min_proto_(0)
  , x_max_proto_(0)
  , y_min_proto_(0)
  , y_max_proto_(0)
  , instructions_size_proto_(0u)
  , overlap_simple_flag_set_proto_(false)
  , have_instructions_proto_(false)
  , composite_data_size_proto_(0u){}
struct GlyphProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlyphProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlyphProtoDefaultTypeInternal() {}
  union {
    GlyphProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlyphProtoDefaultTypeInternal _GlyphProto_default_instance_;
PROTOBUF_CONSTEXPR RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse::RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct RebuildMetadataProto_ChecksumsProtoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RebuildMetadataProto_ChecksumsProtoEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RebuildMetadataProto_ChecksumsProtoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RebuildMetadataProto_ChecksumsProtoEntry_DoNotUseDefaultTypeInternal _RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RebuildMetadataProto::RebuildMetadataProto(
    ::_pbi::ConstantInitialized)
  : font_infos_proto_()
  , checksums_proto_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , header_checksum_proto_(0u){}
struct RebuildMetadataProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RebuildMetadataProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RebuildMetadataProtoDefaultTypeInternal() {}
  union {
    RebuildMetadataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RebuildMetadataProtoDefaultTypeInternal _RebuildMetadataProto_default_instance_;
PROTOBUF_CONSTEXPR FontProto_TablesProtoEntry_DoNotUse::FontProto_TablesProtoEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct FontProto_TablesProtoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FontProto_TablesProtoEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FontProto_TablesProtoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FontProto_TablesProtoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FontProto_TablesProtoEntry_DoNotUseDefaultTypeInternal _FontProto_TablesProtoEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FontProto::FontProto(
    ::_pbi::ConstantInitialized)
  : tables_proto_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , flavor_proto_(0u)
  , num_tables_proto_(0u){}
struct FontProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FontProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FontProtoDefaultTypeInternal() {}
  union {
    FontProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FontProtoDefaultTypeInternal _FontProto_default_instance_;
PROTOBUF_CONSTEXPR PointProto::PointProto(
    ::_pbi::ConstantInitialized)
  : x_proto_(0)
  , y_proto_(0)
  , on_curve_proto_(false){}
struct PointProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointProtoDefaultTypeInternal() {}
  union {
    PointProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointProtoDefaultTypeInternal _PointProto_default_instance_;
PROTOBUF_CONSTEXPR TtcFontProto::TtcFontProto(
    ::_pbi::ConstantInitialized)
  : table_indices_proto_()
  , _table_indices_proto_cached_byte_size_(0)
  , flavor_proto_(0u)
  , dst_offset_proto_(0u)
  , header_checksum_proto_(0u){}
struct TtcFontProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TtcFontProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TtcFontProtoDefaultTypeInternal() {}
  union {
    TtcFontProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TtcFontProtoDefaultTypeInternal _TtcFontProto_default_instance_;
PROTOBUF_CONSTEXPR BufferProto::BufferProto(
    ::_pbi::ConstantInitialized)
  : buffer_proto_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , length_proto_(uint64_t{0u})
  , offset_proto_(uint64_t{0u}){}
struct BufferProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BufferProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BufferProtoDefaultTypeInternal() {}
  union {
    BufferProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BufferProtoDefaultTypeInternal _BufferProto_default_instance_;
PROTOBUF_CONSTEXPR WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse::WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUseDefaultTypeInternal _WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR WOFF2FontInfoProto::WOFF2FontInfoProto(
    ::_pbi::ConstantInitialized)
  : x_mins_proto_()
  , _x_mins_proto_cached_byte_size_(0)
  , table_entry_by_tag_proto_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , num_glyphs_proto_(0u)
  , index_format_proto_(0u)
  , num_hmetrics_proto_(0u){}
struct WOFF2FontInfoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WOFF2FontInfoProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WOFF2FontInfoProtoDefaultTypeInternal() {}
  union {
    WOFF2FontInfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WOFF2FontInfoProtoDefaultTypeInternal _WOFF2FontInfoProto_default_instance_;
PROTOBUF_CONSTEXPR FontTableProto::FontTableProto(
    ::_pbi::ConstantInitialized)
  : buffer_proto_()
  , _buffer_proto_cached_byte_size_(0)
  , data_proto_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reuse_of_proto_(nullptr)
  , tag_proto_(0u)
  , checksum_proto_(0u)
  , offset_proto_(0u)
  , length_proto_(0u)
  , flag_byte_proto_(0u){}
struct FontTableProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FontTableProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FontTableProtoDefaultTypeInternal() {}
  union {
    FontTableProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FontTableProtoDefaultTypeInternal _FontTableProto_default_instance_;
PROTOBUF_CONSTEXPR GlyphPointProto::GlyphPointProto(
    ::_pbi::ConstantInitialized)
  : x_proto_(0)
  , y_proto_(0)
  , on_curve_proto_(false){}
struct GlyphPointProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlyphPointProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlyphPointProtoDefaultTypeInternal() {}
  union {
    GlyphPointProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlyphPointProtoDefaultTypeInternal _GlyphPointProto_default_instance_;
PROTOBUF_CONSTEXPR WOFF2HeaderProto::WOFF2HeaderProto(
    ::_pbi::ConstantInitialized)
  : tables_proto_()
  , ttc_fonts_proto_()
  , flavor_proto_(0u)
  , header_version_proto_(0u)
  , compressed_offset_proto_(uint64_t{0u})
  , num_tables_proto_(0u)
  , compressed_length_proto_(0u)
  , uncompressed_size_proto_(0u){}
struct WOFF2HeaderProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WOFF2HeaderProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WOFF2HeaderProtoDefaultTypeInternal() {}
  union {
    WOFF2HeaderProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WOFF2HeaderProtoDefaultTypeInternal _WOFF2HeaderProto_default_instance_;
PROTOBUF_CONSTEXPR TableProto::TableProto(
    ::_pbi::ConstantInitialized)
  : dst_data_proto_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tag_proto_(0u)
  , flags_proto_(0u)
  , src_offset_proto_(0u)
  , src_length_proto_(0u)
  , transform_length_proto_(0u)
  , dst_offset_proto_(0u)
  , dst_length_proto_(0u){}
struct TableProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableProtoDefaultTypeInternal() {}
  union {
    TableProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableProtoDefaultTypeInternal _TableProto_default_instance_;
PROTOBUF_CONSTEXPR GlyfEncoderProto::GlyfEncoderProto(
    ::_pbi::ConstantInitialized)
  : n_contour_stream_proto_()
  , _n_contour_stream_proto_cached_byte_size_(0)
  , n_points_stream_proto_()
  , _n_points_stream_proto_cached_byte_size_(0)
  , flag_byte_stream_proto_()
  , _flag_byte_stream_proto_cached_byte_size_(0)
  , composite_stream_proto_()
  , _composite_stream_proto_cached_byte_size_(0)
  , bbox_bitmap_proto_()
  , _bbox_bitmap_proto_cached_byte_size_(0)
  , bbox_stream_proto_()
  , _bbox_stream_proto_cached_byte_size_(0)
  , glyph_stream_proto_()
  , _glyph_stream_proto_cached_byte_size_(0)
  , instruction_stream_proto_()
  , _instruction_stream_proto_cached_byte_size_(0)
  , overlap_bitmap_proto_()
  , _overlap_bitmap_proto_cached_byte_size_(0)
  , n_glyphs_proto_(0){}
struct GlyfEncoderProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlyfEncoderProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlyfEncoderProtoDefaultTypeInternal() {}
  union {
    GlyfEncoderProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlyfEncoderProtoDefaultTypeInternal _GlyfEncoderProto_default_instance_;
PROTOBUF_CONSTEXPR ContourVecProto::ContourVecProto(
    ::_pbi::ConstantInitialized)
  : points_proto_(){}
struct ContourVecProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContourVecProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContourVecProtoDefaultTypeInternal() {}
  union {
    ContourVecProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContourVecProtoDefaultTypeInternal _ContourVecProto_default_instance_;
static ::_pb::Metadata file_level_metadata_woff2_2eproto[18];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_woff2_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_woff2_2eproto = nullptr;

const uint32_t TableStruct_woff2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::FontCollectionProto_TablesProtoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FontCollectionProto_TablesProtoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FontCollectionProto_TablesProtoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FontCollectionProto_TablesProtoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FontCollectionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FontCollectionProto, flavor_proto_),
  PROTOBUF_FIELD_OFFSET(::FontCollectionProto, header_version_proto_),
  PROTOBUF_FIELD_OFFSET(::FontCollectionProto, tables_proto_),
  PROTOBUF_FIELD_OFFSET(::FontCollectionProto, fonts_proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GlyphProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GlyphProto, x_min_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyphProto, x_max_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyphProto, y_min_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyphProto, y_max_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyphProto, instructions_size_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyphProto, instructions_data_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyphProto, overlap_simple_flag_set_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyphProto, contours_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyphProto, composite_data_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyphProto, composite_data_size_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyphProto, have_instructions_proto_),
  PROTOBUF_FIELD_OFFSET(::RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RebuildMetadataProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RebuildMetadataProto, header_checksum_proto_),
  PROTOBUF_FIELD_OFFSET(::RebuildMetadataProto, font_infos_proto_),
  PROTOBUF_FIELD_OFFSET(::RebuildMetadataProto, checksums_proto_),
  PROTOBUF_FIELD_OFFSET(::FontProto_TablesProtoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FontProto_TablesProtoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FontProto_TablesProtoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FontProto_TablesProtoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FontProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FontProto, flavor_proto_),
  PROTOBUF_FIELD_OFFSET(::FontProto, num_tables_proto_),
  PROTOBUF_FIELD_OFFSET(::FontProto, tables_proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PointProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PointProto, x_proto_),
  PROTOBUF_FIELD_OFFSET(::PointProto, y_proto_),
  PROTOBUF_FIELD_OFFSET(::PointProto, on_curve_proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TtcFontProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TtcFontProto, flavor_proto_),
  PROTOBUF_FIELD_OFFSET(::TtcFontProto, dst_offset_proto_),
  PROTOBUF_FIELD_OFFSET(::TtcFontProto, header_checksum_proto_),
  PROTOBUF_FIELD_OFFSET(::TtcFontProto, table_indices_proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BufferProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BufferProto, buffer_proto_),
  PROTOBUF_FIELD_OFFSET(::BufferProto, length_proto_),
  PROTOBUF_FIELD_OFFSET(::BufferProto, offset_proto_),
  PROTOBUF_FIELD_OFFSET(::WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WOFF2FontInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WOFF2FontInfoProto, num_glyphs_proto_),
  PROTOBUF_FIELD_OFFSET(::WOFF2FontInfoProto, index_format_proto_),
  PROTOBUF_FIELD_OFFSET(::WOFF2FontInfoProto, num_hmetrics_proto_),
  PROTOBUF_FIELD_OFFSET(::WOFF2FontInfoProto, x_mins_proto_),
  PROTOBUF_FIELD_OFFSET(::WOFF2FontInfoProto, table_entry_by_tag_proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FontTableProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FontTableProto, tag_proto_),
  PROTOBUF_FIELD_OFFSET(::FontTableProto, checksum_proto_),
  PROTOBUF_FIELD_OFFSET(::FontTableProto, offset_proto_),
  PROTOBUF_FIELD_OFFSET(::FontTableProto, length_proto_),
  PROTOBUF_FIELD_OFFSET(::FontTableProto, data_proto_),
  PROTOBUF_FIELD_OFFSET(::FontTableProto, buffer_proto_),
  PROTOBUF_FIELD_OFFSET(::FontTableProto, reuse_of_proto_),
  PROTOBUF_FIELD_OFFSET(::FontTableProto, flag_byte_proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GlyphPointProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GlyphPointProto, x_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyphPointProto, y_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyphPointProto, on_curve_proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WOFF2HeaderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WOFF2HeaderProto, flavor_proto_),
  PROTOBUF_FIELD_OFFSET(::WOFF2HeaderProto, header_version_proto_),
  PROTOBUF_FIELD_OFFSET(::WOFF2HeaderProto, num_tables_proto_),
  PROTOBUF_FIELD_OFFSET(::WOFF2HeaderProto, compressed_offset_proto_),
  PROTOBUF_FIELD_OFFSET(::WOFF2HeaderProto, compressed_length_proto_),
  PROTOBUF_FIELD_OFFSET(::WOFF2HeaderProto, uncompressed_size_proto_),
  PROTOBUF_FIELD_OFFSET(::WOFF2HeaderProto, tables_proto_),
  PROTOBUF_FIELD_OFFSET(::WOFF2HeaderProto, ttc_fonts_proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TableProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TableProto, tag_proto_),
  PROTOBUF_FIELD_OFFSET(::TableProto, flags_proto_),
  PROTOBUF_FIELD_OFFSET(::TableProto, src_offset_proto_),
  PROTOBUF_FIELD_OFFSET(::TableProto, src_length_proto_),
  PROTOBUF_FIELD_OFFSET(::TableProto, transform_length_proto_),
  PROTOBUF_FIELD_OFFSET(::TableProto, dst_offset_proto_),
  PROTOBUF_FIELD_OFFSET(::TableProto, dst_length_proto_),
  PROTOBUF_FIELD_OFFSET(::TableProto, dst_data_proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GlyfEncoderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GlyfEncoderProto, n_contour_stream_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyfEncoderProto, n_points_stream_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyfEncoderProto, flag_byte_stream_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyfEncoderProto, composite_stream_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyfEncoderProto, bbox_bitmap_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyfEncoderProto, bbox_stream_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyfEncoderProto, glyph_stream_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyfEncoderProto, instruction_stream_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyfEncoderProto, overlap_bitmap_proto_),
  PROTOBUF_FIELD_OFFSET(::GlyfEncoderProto, n_glyphs_proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ContourVecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContourVecProto, points_proto_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::FontCollectionProto_TablesProtoEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::FontCollectionProto)},
  { 20, -1, -1, sizeof(::GlyphProto)},
  { 37, 45, -1, sizeof(::RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse)},
  { 47, -1, -1, sizeof(::RebuildMetadataProto)},
  { 56, 64, -1, sizeof(::FontProto_TablesProtoEntry_DoNotUse)},
  { 66, -1, -1, sizeof(::FontProto)},
  { 75, -1, -1, sizeof(::PointProto)},
  { 84, -1, -1, sizeof(::TtcFontProto)},
  { 94, -1, -1, sizeof(::BufferProto)},
  { 103, 111, -1, sizeof(::WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse)},
  { 113, -1, -1, sizeof(::WOFF2FontInfoProto)},
  { 124, -1, -1, sizeof(::FontTableProto)},
  { 138, -1, -1, sizeof(::GlyphPointProto)},
  { 147, -1, -1, sizeof(::WOFF2HeaderProto)},
  { 161, -1, -1, sizeof(::TableProto)},
  { 175, -1, -1, sizeof(::GlyfEncoderProto)},
  { 191, -1, -1, sizeof(::ContourVecProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_FontCollectionProto_TablesProtoEntry_DoNotUse_default_instance_._instance,
  &::_FontCollectionProto_default_instance_._instance,
  &::_GlyphProto_default_instance_._instance,
  &::_RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse_default_instance_._instance,
  &::_RebuildMetadataProto_default_instance_._instance,
  &::_FontProto_TablesProtoEntry_DoNotUse_default_instance_._instance,
  &::_FontProto_default_instance_._instance,
  &::_PointProto_default_instance_._instance,
  &::_TtcFontProto_default_instance_._instance,
  &::_BufferProto_default_instance_._instance,
  &::_WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse_default_instance_._instance,
  &::_WOFF2FontInfoProto_default_instance_._instance,
  &::_FontTableProto_default_instance_._instance,
  &::_GlyphPointProto_default_instance_._instance,
  &::_WOFF2HeaderProto_default_instance_._instance,
  &::_TableProto_default_instance_._instance,
  &::_GlyfEncoderProto_default_instance_._instance,
  &::_ContourVecProto_default_instance_._instance,
};

const char descriptor_table_protodef_woff2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013woff2.proto\"\354\001\n\023FontCollectionProto\022\024\n"
  "\014flavor_proto\030\001 \001(\r\022\034\n\024header_version_pr"
  "oto\030\002 \001(\r\022;\n\014tables_proto\030\003 \003(\0132%.FontCo"
  "llectionProto.TablesProtoEntry\022\037\n\013fonts_"
  "proto\030\004 \003(\0132\n.FontProto\032C\n\020TablesProtoEn"
  "try\022\013\n\003key\030\001 \001(\r\022\036\n\005value\030\002 \001(\0132\017.FontTa"
  "bleProto:\0028\001\"\325\002\n\nGlyphProto\022\023\n\013x_min_pro"
  "to\030\001 \001(\005\022\023\n\013x_max_proto\030\002 \001(\005\022\023\n\013y_min_p"
  "roto\030\003 \001(\005\022\023\n\013y_max_proto\030\004 \001(\005\022\037\n\027instr"
  "uctions_size_proto\030\005 \001(\r\022\037\n\027instructions"
  "_data_proto\030\006 \001(\014\022%\n\035overlap_simple_flag"
  "_set_proto\030\007 \001(\010\022(\n\016contours_proto\030\010 \003(\013"
  "2\020.ContourVecProto\022\034\n\024composite_data_pro"
  "to\030\t \001(\014\022!\n\031composite_data_size_proto\030\n "
  "\001(\r\022\037\n\027have_instructions_proto\030\013 \001(\010\"\337\001\n"
  "\024RebuildMetadataProto\022\035\n\025header_checksum"
  "_proto\030\001 \001(\r\022-\n\020font_infos_proto\030\002 \003(\0132\023"
  ".WOFF2FontInfoProto\022B\n\017checksums_proto\030\003"
  " \003(\0132).RebuildMetadataProto.ChecksumsPro"
  "toEntry\0325\n\023ChecksumsProtoEntry\022\013\n\003key\030\001 "
  "\001(\004\022\r\n\005value\030\002 \001(\r:\0028\001\"\263\001\n\tFontProto\022\024\n\014"
  "flavor_proto\030\001 \001(\r\022\030\n\020num_tables_proto\030\002"
  " \001(\r\0221\n\014tables_proto\030\003 \003(\0132\033.FontProto.T"
  "ablesProtoEntry\032C\n\020TablesProtoEntry\022\013\n\003k"
  "ey\030\001 \001(\r\022\036\n\005value\030\002 \001(\0132\017.FontTableProto"
  ":\0028\001\"F\n\nPointProto\022\017\n\007x_proto\030\001 \001(\005\022\017\n\007y"
  "_proto\030\002 \001(\005\022\026\n\016on_curve_proto\030\003 \001(\010\"z\n\014"
  "TtcFontProto\022\024\n\014flavor_proto\030\001 \001(\r\022\030\n\020ds"
  "t_offset_proto\030\002 \001(\r\022\035\n\025header_checksum_"
  "proto\030\003 \001(\r\022\033\n\023table_indices_proto\030\004 \003(\r"
  "\"O\n\013BufferProto\022\024\n\014buffer_proto\030\001 \001(\014\022\024\n"
  "\014length_proto\030\002 \001(\004\022\024\n\014offset_proto\030\003 \001("
  "\004\"\212\002\n\022WOFF2FontInfoProto\022\030\n\020num_glyphs_p"
  "roto\030\001 \001(\r\022\032\n\022index_format_proto\030\002 \001(\r\022\032"
  "\n\022num_hmetrics_proto\030\003 \001(\r\022\024\n\014x_mins_pro"
  "to\030\004 \003(\005\022O\n\030table_entry_by_tag_proto\030\005 \003"
  "(\0132-.WOFF2FontInfoProto.TableEntryByTagP"
  "rotoEntry\032;\n\031TableEntryByTagProtoEntry\022\013"
  "\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\323\001\n\016FontT"
  "ableProto\022\021\n\ttag_proto\030\001 \001(\r\022\026\n\016checksum"
  "_proto\030\002 \001(\r\022\024\n\014offset_proto\030\003 \001(\r\022\024\n\014le"
  "ngth_proto\030\004 \001(\r\022\022\n\ndata_proto\030\005 \001(\014\022\024\n\014"
  "buffer_proto\030\006 \003(\r\022\'\n\016reuse_of_proto\030\007 \001"
  "(\0132\017.FontTableProto\022\027\n\017flag_byte_proto\030\010"
  " \001(\r\"K\n\017GlyphPointProto\022\017\n\007x_proto\030\001 \001(\005"
  "\022\017\n\007y_proto\030\002 \001(\005\022\026\n\016on_curve_proto\030\003 \001("
  "\010\"\216\002\n\020WOFF2HeaderProto\022\024\n\014flavor_proto\030\001"
  " \001(\r\022\034\n\024header_version_proto\030\002 \001(\r\022\030\n\020nu"
  "m_tables_proto\030\003 \001(\r\022\037\n\027compressed_offse"
  "t_proto\030\004 \001(\004\022\037\n\027compressed_length_proto"
  "\030\005 \001(\r\022\037\n\027uncompressed_size_proto\030\006 \001(\r\022"
  "!\n\014tables_proto\030\007 \003(\0132\013.TableProto\022&\n\017tt"
  "c_fonts_proto\030\010 \003(\0132\r.TtcFontProto\"\324\001\n\nT"
  "ableProto\022\021\n\ttag_proto\030\001 \001(\r\022\023\n\013flags_pr"
  "oto\030\002 \001(\r\022\030\n\020src_offset_proto\030\003 \001(\r\022\030\n\020s"
  "rc_length_proto\030\004 \001(\r\022\036\n\026transform_lengt"
  "h_proto\030\005 \001(\r\022\030\n\020dst_offset_proto\030\006 \001(\r\022"
  "\030\n\020dst_length_proto\030\007 \001(\r\022\026\n\016dst_data_pr"
  "oto\030\010 \001(\014\"\273\002\n\020GlyfEncoderProto\022\036\n\026n_cont"
  "our_stream_proto\030\001 \003(\r\022\035\n\025n_points_strea"
  "m_proto\030\002 \003(\r\022\036\n\026flag_byte_stream_proto\030"
  "\003 \003(\r\022\036\n\026composite_stream_proto\030\004 \003(\r\022\031\n"
  "\021bbox_bitmap_proto\030\005 \003(\r\022\031\n\021bbox_stream_"
  "proto\030\006 \003(\r\022\032\n\022glyph_stream_proto\030\007 \003(\r\022"
  " \n\030instruction_stream_proto\030\010 \003(\r\022\034\n\024ove"
  "rlap_bitmap_proto\030\t \003(\r\022\026\n\016n_glyphs_prot"
  "o\030\n \001(\005\"9\n\017ContourVecProto\022&\n\014points_pro"
  "to\030\001 \003(\0132\020.GlyphPointProtob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_woff2_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_woff2_2eproto = {
    false, false, 2714, descriptor_table_protodef_woff2_2eproto,
    "woff2.proto",
    &descriptor_table_woff2_2eproto_once, nullptr, 0, 18,
    schemas, file_default_instances, TableStruct_woff2_2eproto::offsets,
    file_level_metadata_woff2_2eproto, file_level_enum_descriptors_woff2_2eproto,
    file_level_service_descriptors_woff2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_woff2_2eproto_getter() {
  return &descriptor_table_woff2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_woff2_2eproto(&descriptor_table_woff2_2eproto);

// ===================================================================

FontCollectionProto_TablesProtoEntry_DoNotUse::FontCollectionProto_TablesProtoEntry_DoNotUse() {}
FontCollectionProto_TablesProtoEntry_DoNotUse::FontCollectionProto_TablesProtoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FontCollectionProto_TablesProtoEntry_DoNotUse::MergeFrom(const FontCollectionProto_TablesProtoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FontCollectionProto_TablesProtoEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[0]);
}

// ===================================================================

class FontCollectionProto::_Internal {
 public:
};

FontCollectionProto::FontCollectionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tables_proto_(arena),
  fonts_proto_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &FontCollectionProto::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:FontCollectionProto)
}
FontCollectionProto::FontCollectionProto(const FontCollectionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fonts_proto_(from.fonts_proto_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tables_proto_.MergeFrom(from.tables_proto_);
  ::memcpy(&flavor_proto_, &from.flavor_proto_,
    static_cast<size_t>(reinterpret_cast<char*>(&header_version_proto_) -
    reinterpret_cast<char*>(&flavor_proto_)) + sizeof(header_version_proto_));
  // @@protoc_insertion_point(copy_constructor:FontCollectionProto)
}

inline void FontCollectionProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flavor_proto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&header_version_proto_) -
    reinterpret_cast<char*>(&flavor_proto_)) + sizeof(header_version_proto_));
}

FontCollectionProto::~FontCollectionProto() {
  // @@protoc_insertion_point(destructor:FontCollectionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void FontCollectionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tables_proto_.Destruct();
}

void FontCollectionProto::ArenaDtor(void* object) {
  FontCollectionProto* _this = reinterpret_cast< FontCollectionProto* >(object);
  _this->tables_proto_.Destruct();
}
void FontCollectionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FontCollectionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:FontCollectionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_proto_.Clear();
  fonts_proto_.Clear();
  ::memset(&flavor_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&header_version_proto_) -
      reinterpret_cast<char*>(&flavor_proto_)) + sizeof(header_version_proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FontCollectionProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 flavor_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          flavor_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 header_version_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          header_version_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .FontTableProto> tables_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tables_proto_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .FontProto fonts_proto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fonts_proto(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FontCollectionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FontCollectionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flavor_proto = 1;
  if (this->_internal_flavor_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flavor_proto(), target);
  }

  // uint32 header_version_proto = 2;
  if (this->_internal_header_version_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_header_version_proto(), target);
  }

  // map<uint32, .FontTableProto> tables_proto = 3;
  if (!this->_internal_tables_proto().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::FontTableProto>;
    using WireHelper = FontCollectionProto_TablesProtoEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tables_proto();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated .FontProto fonts_proto = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fonts_proto_size()); i < n; i++) {
    const auto& repfield = this->_internal_fonts_proto(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FontCollectionProto)
  return target;
}

size_t FontCollectionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FontCollectionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .FontTableProto> tables_proto = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tables_proto_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FontTableProto >::const_iterator
      it = this->_internal_tables_proto().begin();
      it != this->_internal_tables_proto().end(); ++it) {
    total_size += FontCollectionProto_TablesProtoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .FontProto fonts_proto = 4;
  total_size += 1UL * this->_internal_fonts_proto_size();
  for (const auto& msg : this->fonts_proto_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 flavor_proto = 1;
  if (this->_internal_flavor_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flavor_proto());
  }

  // uint32 header_version_proto = 2;
  if (this->_internal_header_version_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_header_version_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FontCollectionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FontCollectionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FontCollectionProto::GetClassData() const { return &_class_data_; }

void FontCollectionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FontCollectionProto *>(to)->MergeFrom(
      static_cast<const FontCollectionProto &>(from));
}


void FontCollectionProto::MergeFrom(const FontCollectionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FontCollectionProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tables_proto_.MergeFrom(from.tables_proto_);
  fonts_proto_.MergeFrom(from.fonts_proto_);
  if (from._internal_flavor_proto() != 0) {
    _internal_set_flavor_proto(from._internal_flavor_proto());
  }
  if (from._internal_header_version_proto() != 0) {
    _internal_set_header_version_proto(from._internal_header_version_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FontCollectionProto::CopyFrom(const FontCollectionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FontCollectionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontCollectionProto::IsInitialized() const {
  return true;
}

void FontCollectionProto::InternalSwap(FontCollectionProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tables_proto_.InternalSwap(&other->tables_proto_);
  fonts_proto_.InternalSwap(&other->fonts_proto_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FontCollectionProto, header_version_proto_)
      + sizeof(FontCollectionProto::header_version_proto_)
      - PROTOBUF_FIELD_OFFSET(FontCollectionProto, flavor_proto_)>(
          reinterpret_cast<char*>(&flavor_proto_),
          reinterpret_cast<char*>(&other->flavor_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FontCollectionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[1]);
}

// ===================================================================

class GlyphProto::_Internal {
 public:
};

GlyphProto::GlyphProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  contours_proto_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:GlyphProto)
}
GlyphProto::GlyphProto(const GlyphProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contours_proto_(from.contours_proto_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instructions_data_proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instructions_data_proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instructions_data_proto().empty()) {
    instructions_data_proto_.Set(from._internal_instructions_data_proto(), 
      GetArenaForAllocation());
  }
  composite_data_proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    composite_data_proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_composite_data_proto().empty()) {
    composite_data_proto_.Set(from._internal_composite_data_proto(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_min_proto_, &from.x_min_proto_,
    static_cast<size_t>(reinterpret_cast<char*>(&composite_data_size_proto_) -
    reinterpret_cast<char*>(&x_min_proto_)) + sizeof(composite_data_size_proto_));
  // @@protoc_insertion_point(copy_constructor:GlyphProto)
}

inline void GlyphProto::SharedCtor() {
instructions_data_proto_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instructions_data_proto_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
composite_data_proto_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  composite_data_proto_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_min_proto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&composite_data_size_proto_) -
    reinterpret_cast<char*>(&x_min_proto_)) + sizeof(composite_data_size_proto_));
}

GlyphProto::~GlyphProto() {
  // @@protoc_insertion_point(destructor:GlyphProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlyphProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  instructions_data_proto_.Destroy();
  composite_data_proto_.Destroy();
}

void GlyphProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlyphProto::Clear() {
// @@protoc_insertion_point(message_clear_start:GlyphProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contours_proto_.Clear();
  instructions_data_proto_.ClearToEmpty();
  composite_data_proto_.ClearToEmpty();
  ::memset(&x_min_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&composite_data_size_proto_) -
      reinterpret_cast<char*>(&x_min_proto_)) + sizeof(composite_data_size_proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlyphProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x_min_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_min_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x_max_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          x_max_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y_min_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          y_min_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y_max_proto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          y_max_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 instructions_size_proto = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          instructions_size_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes instructions_data_proto = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_instructions_data_proto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool overlap_simple_flag_set_proto = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          overlap_simple_flag_set_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ContourVecProto contours_proto = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contours_proto(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes composite_data_proto = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_composite_data_proto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 composite_data_size_proto = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          composite_data_size_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool have_instructions_proto = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          have_instructions_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlyphProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GlyphProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x_min_proto = 1;
  if (this->_internal_x_min_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x_min_proto(), target);
  }

  // int32 x_max_proto = 2;
  if (this->_internal_x_max_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x_max_proto(), target);
  }

  // int32 y_min_proto = 3;
  if (this->_internal_y_min_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y_min_proto(), target);
  }

  // int32 y_max_proto = 4;
  if (this->_internal_y_max_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y_max_proto(), target);
  }

  // uint32 instructions_size_proto = 5;
  if (this->_internal_instructions_size_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_instructions_size_proto(), target);
  }

  // bytes instructions_data_proto = 6;
  if (!this->_internal_instructions_data_proto().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_instructions_data_proto(), target);
  }

  // bool overlap_simple_flag_set_proto = 7;
  if (this->_internal_overlap_simple_flag_set_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_overlap_simple_flag_set_proto(), target);
  }

  // repeated .ContourVecProto contours_proto = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contours_proto_size()); i < n; i++) {
    const auto& repfield = this->_internal_contours_proto(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes composite_data_proto = 9;
  if (!this->_internal_composite_data_proto().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_composite_data_proto(), target);
  }

  // uint32 composite_data_size_proto = 10;
  if (this->_internal_composite_data_size_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_composite_data_size_proto(), target);
  }

  // bool have_instructions_proto = 11;
  if (this->_internal_have_instructions_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_have_instructions_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GlyphProto)
  return target;
}

size_t GlyphProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GlyphProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ContourVecProto contours_proto = 8;
  total_size += 1UL * this->_internal_contours_proto_size();
  for (const auto& msg : this->contours_proto_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes instructions_data_proto = 6;
  if (!this->_internal_instructions_data_proto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instructions_data_proto());
  }

  // bytes composite_data_proto = 9;
  if (!this->_internal_composite_data_proto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_composite_data_proto());
  }

  // int32 x_min_proto = 1;
  if (this->_internal_x_min_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_min_proto());
  }

  // int32 x_max_proto = 2;
  if (this->_internal_x_max_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_max_proto());
  }

  // int32 y_min_proto = 3;
  if (this->_internal_y_min_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_min_proto());
  }

  // int32 y_max_proto = 4;
  if (this->_internal_y_max_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_max_proto());
  }

  // uint32 instructions_size_proto = 5;
  if (this->_internal_instructions_size_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instructions_size_proto());
  }

  // bool overlap_simple_flag_set_proto = 7;
  if (this->_internal_overlap_simple_flag_set_proto() != 0) {
    total_size += 1 + 1;
  }

  // bool have_instructions_proto = 11;
  if (this->_internal_have_instructions_proto() != 0) {
    total_size += 1 + 1;
  }

  // uint32 composite_data_size_proto = 10;
  if (this->_internal_composite_data_size_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_composite_data_size_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlyphProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlyphProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlyphProto::GetClassData() const { return &_class_data_; }

void GlyphProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GlyphProto *>(to)->MergeFrom(
      static_cast<const GlyphProto &>(from));
}


void GlyphProto::MergeFrom(const GlyphProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GlyphProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  contours_proto_.MergeFrom(from.contours_proto_);
  if (!from._internal_instructions_data_proto().empty()) {
    _internal_set_instructions_data_proto(from._internal_instructions_data_proto());
  }
  if (!from._internal_composite_data_proto().empty()) {
    _internal_set_composite_data_proto(from._internal_composite_data_proto());
  }
  if (from._internal_x_min_proto() != 0) {
    _internal_set_x_min_proto(from._internal_x_min_proto());
  }
  if (from._internal_x_max_proto() != 0) {
    _internal_set_x_max_proto(from._internal_x_max_proto());
  }
  if (from._internal_y_min_proto() != 0) {
    _internal_set_y_min_proto(from._internal_y_min_proto());
  }
  if (from._internal_y_max_proto() != 0) {
    _internal_set_y_max_proto(from._internal_y_max_proto());
  }
  if (from._internal_instructions_size_proto() != 0) {
    _internal_set_instructions_size_proto(from._internal_instructions_size_proto());
  }
  if (from._internal_overlap_simple_flag_set_proto() != 0) {
    _internal_set_overlap_simple_flag_set_proto(from._internal_overlap_simple_flag_set_proto());
  }
  if (from._internal_have_instructions_proto() != 0) {
    _internal_set_have_instructions_proto(from._internal_have_instructions_proto());
  }
  if (from._internal_composite_data_size_proto() != 0) {
    _internal_set_composite_data_size_proto(from._internal_composite_data_size_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlyphProto::CopyFrom(const GlyphProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GlyphProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlyphProto::IsInitialized() const {
  return true;
}

void GlyphProto::InternalSwap(GlyphProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  contours_proto_.InternalSwap(&other->contours_proto_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instructions_data_proto_, lhs_arena,
      &other->instructions_data_proto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &composite_data_proto_, lhs_arena,
      &other->composite_data_proto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlyphProto, composite_data_size_proto_)
      + sizeof(GlyphProto::composite_data_size_proto_)
      - PROTOBUF_FIELD_OFFSET(GlyphProto, x_min_proto_)>(
          reinterpret_cast<char*>(&x_min_proto_),
          reinterpret_cast<char*>(&other->x_min_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlyphProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[2]);
}

// ===================================================================

RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse::RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse() {}
RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse::RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse::MergeFrom(const RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[3]);
}

// ===================================================================

class RebuildMetadataProto::_Internal {
 public:
};

RebuildMetadataProto::RebuildMetadataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  font_infos_proto_(arena),
  checksums_proto_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RebuildMetadataProto::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:RebuildMetadataProto)
}
RebuildMetadataProto::RebuildMetadataProto(const RebuildMetadataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      font_infos_proto_(from.font_infos_proto_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  checksums_proto_.MergeFrom(from.checksums_proto_);
  header_checksum_proto_ = from.header_checksum_proto_;
  // @@protoc_insertion_point(copy_constructor:RebuildMetadataProto)
}

inline void RebuildMetadataProto::SharedCtor() {
header_checksum_proto_ = 0u;
}

RebuildMetadataProto::~RebuildMetadataProto() {
  // @@protoc_insertion_point(destructor:RebuildMetadataProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RebuildMetadataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  checksums_proto_.Destruct();
}

void RebuildMetadataProto::ArenaDtor(void* object) {
  RebuildMetadataProto* _this = reinterpret_cast< RebuildMetadataProto* >(object);
  _this->checksums_proto_.Destruct();
}
void RebuildMetadataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RebuildMetadataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:RebuildMetadataProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  font_infos_proto_.Clear();
  checksums_proto_.Clear();
  header_checksum_proto_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RebuildMetadataProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 header_checksum_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          header_checksum_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .WOFF2FontInfoProto font_infos_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_font_infos_proto(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, uint32> checksums_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&checksums_proto_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RebuildMetadataProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RebuildMetadataProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 header_checksum_proto = 1;
  if (this->_internal_header_checksum_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_header_checksum_proto(), target);
  }

  // repeated .WOFF2FontInfoProto font_infos_proto = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_font_infos_proto_size()); i < n; i++) {
    const auto& repfield = this->_internal_font_infos_proto(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<uint64, uint32> checksums_proto = 3;
  if (!this->_internal_checksums_proto().empty()) {
    using MapType = ::_pb::Map<uint64_t, uint32_t>;
    using WireHelper = RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_checksums_proto();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RebuildMetadataProto)
  return target;
}

size_t RebuildMetadataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RebuildMetadataProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .WOFF2FontInfoProto font_infos_proto = 2;
  total_size += 1UL * this->_internal_font_infos_proto_size();
  for (const auto& msg : this->font_infos_proto_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint64, uint32> checksums_proto = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_checksums_proto_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >::const_iterator
      it = this->_internal_checksums_proto().begin();
      it != this->_internal_checksums_proto().end(); ++it) {
    total_size += RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 header_checksum_proto = 1;
  if (this->_internal_header_checksum_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_header_checksum_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RebuildMetadataProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RebuildMetadataProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RebuildMetadataProto::GetClassData() const { return &_class_data_; }

void RebuildMetadataProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RebuildMetadataProto *>(to)->MergeFrom(
      static_cast<const RebuildMetadataProto &>(from));
}


void RebuildMetadataProto::MergeFrom(const RebuildMetadataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RebuildMetadataProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  font_infos_proto_.MergeFrom(from.font_infos_proto_);
  checksums_proto_.MergeFrom(from.checksums_proto_);
  if (from._internal_header_checksum_proto() != 0) {
    _internal_set_header_checksum_proto(from._internal_header_checksum_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RebuildMetadataProto::CopyFrom(const RebuildMetadataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RebuildMetadataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebuildMetadataProto::IsInitialized() const {
  return true;
}

void RebuildMetadataProto::InternalSwap(RebuildMetadataProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  font_infos_proto_.InternalSwap(&other->font_infos_proto_);
  checksums_proto_.InternalSwap(&other->checksums_proto_);
  swap(header_checksum_proto_, other->header_checksum_proto_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RebuildMetadataProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[4]);
}

// ===================================================================

FontProto_TablesProtoEntry_DoNotUse::FontProto_TablesProtoEntry_DoNotUse() {}
FontProto_TablesProtoEntry_DoNotUse::FontProto_TablesProtoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FontProto_TablesProtoEntry_DoNotUse::MergeFrom(const FontProto_TablesProtoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FontProto_TablesProtoEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[5]);
}

// ===================================================================

class FontProto::_Internal {
 public:
};

FontProto::FontProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tables_proto_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &FontProto::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:FontProto)
}
FontProto::FontProto(const FontProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tables_proto_.MergeFrom(from.tables_proto_);
  ::memcpy(&flavor_proto_, &from.flavor_proto_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_tables_proto_) -
    reinterpret_cast<char*>(&flavor_proto_)) + sizeof(num_tables_proto_));
  // @@protoc_insertion_point(copy_constructor:FontProto)
}

inline void FontProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flavor_proto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_tables_proto_) -
    reinterpret_cast<char*>(&flavor_proto_)) + sizeof(num_tables_proto_));
}

FontProto::~FontProto() {
  // @@protoc_insertion_point(destructor:FontProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void FontProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tables_proto_.Destruct();
}

void FontProto::ArenaDtor(void* object) {
  FontProto* _this = reinterpret_cast< FontProto* >(object);
  _this->tables_proto_.Destruct();
}
void FontProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FontProto::Clear() {
// @@protoc_insertion_point(message_clear_start:FontProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_proto_.Clear();
  ::memset(&flavor_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_tables_proto_) -
      reinterpret_cast<char*>(&flavor_proto_)) + sizeof(num_tables_proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FontProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 flavor_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          flavor_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_tables_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          num_tables_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .FontTableProto> tables_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tables_proto_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FontProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FontProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flavor_proto = 1;
  if (this->_internal_flavor_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flavor_proto(), target);
  }

  // uint32 num_tables_proto = 2;
  if (this->_internal_num_tables_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_tables_proto(), target);
  }

  // map<uint32, .FontTableProto> tables_proto = 3;
  if (!this->_internal_tables_proto().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::FontTableProto>;
    using WireHelper = FontProto_TablesProtoEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tables_proto();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FontProto)
  return target;
}

size_t FontProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FontProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .FontTableProto> tables_proto = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tables_proto_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FontTableProto >::const_iterator
      it = this->_internal_tables_proto().begin();
      it != this->_internal_tables_proto().end(); ++it) {
    total_size += FontProto_TablesProtoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 flavor_proto = 1;
  if (this->_internal_flavor_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flavor_proto());
  }

  // uint32 num_tables_proto = 2;
  if (this->_internal_num_tables_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_tables_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FontProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FontProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FontProto::GetClassData() const { return &_class_data_; }

void FontProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FontProto *>(to)->MergeFrom(
      static_cast<const FontProto &>(from));
}


void FontProto::MergeFrom(const FontProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FontProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tables_proto_.MergeFrom(from.tables_proto_);
  if (from._internal_flavor_proto() != 0) {
    _internal_set_flavor_proto(from._internal_flavor_proto());
  }
  if (from._internal_num_tables_proto() != 0) {
    _internal_set_num_tables_proto(from._internal_num_tables_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FontProto::CopyFrom(const FontProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FontProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontProto::IsInitialized() const {
  return true;
}

void FontProto::InternalSwap(FontProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tables_proto_.InternalSwap(&other->tables_proto_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FontProto, num_tables_proto_)
      + sizeof(FontProto::num_tables_proto_)
      - PROTOBUF_FIELD_OFFSET(FontProto, flavor_proto_)>(
          reinterpret_cast<char*>(&flavor_proto_),
          reinterpret_cast<char*>(&other->flavor_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FontProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[6]);
}

// ===================================================================

class PointProto::_Internal {
 public:
};

PointProto::PointProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PointProto)
}
PointProto::PointProto(const PointProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_proto_, &from.x_proto_,
    static_cast<size_t>(reinterpret_cast<char*>(&on_curve_proto_) -
    reinterpret_cast<char*>(&x_proto_)) + sizeof(on_curve_proto_));
  // @@protoc_insertion_point(copy_constructor:PointProto)
}

inline void PointProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_proto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&on_curve_proto_) -
    reinterpret_cast<char*>(&x_proto_)) + sizeof(on_curve_proto_));
}

PointProto::~PointProto() {
  // @@protoc_insertion_point(destructor:PointProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PointProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PointProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PointProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PointProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_curve_proto_) -
      reinterpret_cast<char*>(&x_proto_)) + sizeof(on_curve_proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool on_curve_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          on_curve_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PointProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x_proto = 1;
  if (this->_internal_x_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x_proto(), target);
  }

  // int32 y_proto = 2;
  if (this->_internal_y_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y_proto(), target);
  }

  // bool on_curve_proto = 3;
  if (this->_internal_on_curve_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_on_curve_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PointProto)
  return target;
}

size_t PointProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PointProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x_proto = 1;
  if (this->_internal_x_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_proto());
  }

  // int32 y_proto = 2;
  if (this->_internal_y_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_proto());
  }

  // bool on_curve_proto = 3;
  if (this->_internal_on_curve_proto() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PointProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointProto::GetClassData() const { return &_class_data_; }

void PointProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PointProto *>(to)->MergeFrom(
      static_cast<const PointProto &>(from));
}


void PointProto::MergeFrom(const PointProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PointProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x_proto() != 0) {
    _internal_set_x_proto(from._internal_x_proto());
  }
  if (from._internal_y_proto() != 0) {
    _internal_set_y_proto(from._internal_y_proto());
  }
  if (from._internal_on_curve_proto() != 0) {
    _internal_set_on_curve_proto(from._internal_on_curve_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointProto::CopyFrom(const PointProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PointProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointProto::IsInitialized() const {
  return true;
}

void PointProto::InternalSwap(PointProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointProto, on_curve_proto_)
      + sizeof(PointProto::on_curve_proto_)
      - PROTOBUF_FIELD_OFFSET(PointProto, x_proto_)>(
          reinterpret_cast<char*>(&x_proto_),
          reinterpret_cast<char*>(&other->x_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[7]);
}

// ===================================================================

class TtcFontProto::_Internal {
 public:
};

TtcFontProto::TtcFontProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  table_indices_proto_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:TtcFontProto)
}
TtcFontProto::TtcFontProto(const TtcFontProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      table_indices_proto_(from.table_indices_proto_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flavor_proto_, &from.flavor_proto_,
    static_cast<size_t>(reinterpret_cast<char*>(&header_checksum_proto_) -
    reinterpret_cast<char*>(&flavor_proto_)) + sizeof(header_checksum_proto_));
  // @@protoc_insertion_point(copy_constructor:TtcFontProto)
}

inline void TtcFontProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flavor_proto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&header_checksum_proto_) -
    reinterpret_cast<char*>(&flavor_proto_)) + sizeof(header_checksum_proto_));
}

TtcFontProto::~TtcFontProto() {
  // @@protoc_insertion_point(destructor:TtcFontProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TtcFontProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TtcFontProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TtcFontProto::Clear() {
// @@protoc_insertion_point(message_clear_start:TtcFontProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_indices_proto_.Clear();
  ::memset(&flavor_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&header_checksum_proto_) -
      reinterpret_cast<char*>(&flavor_proto_)) + sizeof(header_checksum_proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TtcFontProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 flavor_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          flavor_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dst_offset_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          dst_offset_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 header_checksum_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          header_checksum_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 table_indices_proto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_table_indices_proto(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_table_indices_proto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TtcFontProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TtcFontProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flavor_proto = 1;
  if (this->_internal_flavor_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flavor_proto(), target);
  }

  // uint32 dst_offset_proto = 2;
  if (this->_internal_dst_offset_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dst_offset_proto(), target);
  }

  // uint32 header_checksum_proto = 3;
  if (this->_internal_header_checksum_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_header_checksum_proto(), target);
  }

  // repeated uint32 table_indices_proto = 4;
  {
    int byte_size = _table_indices_proto_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_table_indices_proto(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TtcFontProto)
  return target;
}

size_t TtcFontProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TtcFontProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 table_indices_proto = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->table_indices_proto_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _table_indices_proto_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 flavor_proto = 1;
  if (this->_internal_flavor_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flavor_proto());
  }

  // uint32 dst_offset_proto = 2;
  if (this->_internal_dst_offset_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dst_offset_proto());
  }

  // uint32 header_checksum_proto = 3;
  if (this->_internal_header_checksum_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_header_checksum_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TtcFontProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TtcFontProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TtcFontProto::GetClassData() const { return &_class_data_; }

void TtcFontProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TtcFontProto *>(to)->MergeFrom(
      static_cast<const TtcFontProto &>(from));
}


void TtcFontProto::MergeFrom(const TtcFontProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TtcFontProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  table_indices_proto_.MergeFrom(from.table_indices_proto_);
  if (from._internal_flavor_proto() != 0) {
    _internal_set_flavor_proto(from._internal_flavor_proto());
  }
  if (from._internal_dst_offset_proto() != 0) {
    _internal_set_dst_offset_proto(from._internal_dst_offset_proto());
  }
  if (from._internal_header_checksum_proto() != 0) {
    _internal_set_header_checksum_proto(from._internal_header_checksum_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TtcFontProto::CopyFrom(const TtcFontProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TtcFontProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtcFontProto::IsInitialized() const {
  return true;
}

void TtcFontProto::InternalSwap(TtcFontProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  table_indices_proto_.InternalSwap(&other->table_indices_proto_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TtcFontProto, header_checksum_proto_)
      + sizeof(TtcFontProto::header_checksum_proto_)
      - PROTOBUF_FIELD_OFFSET(TtcFontProto, flavor_proto_)>(
          reinterpret_cast<char*>(&flavor_proto_),
          reinterpret_cast<char*>(&other->flavor_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TtcFontProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[8]);
}

// ===================================================================

class BufferProto::_Internal {
 public:
};

BufferProto::BufferProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:BufferProto)
}
BufferProto::BufferProto(const BufferProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buffer_proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buffer_proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buffer_proto().empty()) {
    buffer_proto_.Set(from._internal_buffer_proto(), 
      GetArenaForAllocation());
  }
  ::memcpy(&length_proto_, &from.length_proto_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_proto_) -
    reinterpret_cast<char*>(&length_proto_)) + sizeof(offset_proto_));
  // @@protoc_insertion_point(copy_constructor:BufferProto)
}

inline void BufferProto::SharedCtor() {
buffer_proto_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buffer_proto_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&length_proto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_proto_) -
    reinterpret_cast<char*>(&length_proto_)) + sizeof(offset_proto_));
}

BufferProto::~BufferProto() {
  // @@protoc_insertion_point(destructor:BufferProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BufferProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buffer_proto_.Destroy();
}

void BufferProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BufferProto::Clear() {
// @@protoc_insertion_point(message_clear_start:BufferProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_proto_.ClearToEmpty();
  ::memset(&length_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_proto_) -
      reinterpret_cast<char*>(&length_proto_)) + sizeof(offset_proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BufferProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes buffer_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_buffer_proto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 length_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          length_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          offset_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BufferProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BufferProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buffer_proto = 1;
  if (!this->_internal_buffer_proto().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buffer_proto(), target);
  }

  // uint64 length_proto = 2;
  if (this->_internal_length_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_length_proto(), target);
  }

  // uint64 offset_proto = 3;
  if (this->_internal_offset_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_offset_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BufferProto)
  return target;
}

size_t BufferProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BufferProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer_proto = 1;
  if (!this->_internal_buffer_proto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer_proto());
  }

  // uint64 length_proto = 2;
  if (this->_internal_length_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_length_proto());
  }

  // uint64 offset_proto = 3;
  if (this->_internal_offset_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BufferProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BufferProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BufferProto::GetClassData() const { return &_class_data_; }

void BufferProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BufferProto *>(to)->MergeFrom(
      static_cast<const BufferProto &>(from));
}


void BufferProto::MergeFrom(const BufferProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BufferProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buffer_proto().empty()) {
    _internal_set_buffer_proto(from._internal_buffer_proto());
  }
  if (from._internal_length_proto() != 0) {
    _internal_set_length_proto(from._internal_length_proto());
  }
  if (from._internal_offset_proto() != 0) {
    _internal_set_offset_proto(from._internal_offset_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BufferProto::CopyFrom(const BufferProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BufferProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferProto::IsInitialized() const {
  return true;
}

void BufferProto::InternalSwap(BufferProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &buffer_proto_, lhs_arena,
      &other->buffer_proto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BufferProto, offset_proto_)
      + sizeof(BufferProto::offset_proto_)
      - PROTOBUF_FIELD_OFFSET(BufferProto, length_proto_)>(
          reinterpret_cast<char*>(&length_proto_),
          reinterpret_cast<char*>(&other->length_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BufferProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[9]);
}

// ===================================================================

WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse::WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse() {}
WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse::WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse::MergeFrom(const WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[10]);
}

// ===================================================================

class WOFF2FontInfoProto::_Internal {
 public:
};

WOFF2FontInfoProto::WOFF2FontInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  x_mins_proto_(arena),
  table_entry_by_tag_proto_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &WOFF2FontInfoProto::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:WOFF2FontInfoProto)
}
WOFF2FontInfoProto::WOFF2FontInfoProto(const WOFF2FontInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      x_mins_proto_(from.x_mins_proto_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_entry_by_tag_proto_.MergeFrom(from.table_entry_by_tag_proto_);
  ::memcpy(&num_glyphs_proto_, &from.num_glyphs_proto_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_hmetrics_proto_) -
    reinterpret_cast<char*>(&num_glyphs_proto_)) + sizeof(num_hmetrics_proto_));
  // @@protoc_insertion_point(copy_constructor:WOFF2FontInfoProto)
}

inline void WOFF2FontInfoProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_glyphs_proto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_hmetrics_proto_) -
    reinterpret_cast<char*>(&num_glyphs_proto_)) + sizeof(num_hmetrics_proto_));
}

WOFF2FontInfoProto::~WOFF2FontInfoProto() {
  // @@protoc_insertion_point(destructor:WOFF2FontInfoProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void WOFF2FontInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_entry_by_tag_proto_.Destruct();
}

void WOFF2FontInfoProto::ArenaDtor(void* object) {
  WOFF2FontInfoProto* _this = reinterpret_cast< WOFF2FontInfoProto* >(object);
  _this->table_entry_by_tag_proto_.Destruct();
}
void WOFF2FontInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WOFF2FontInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:WOFF2FontInfoProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_mins_proto_.Clear();
  table_entry_by_tag_proto_.Clear();
  ::memset(&num_glyphs_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_hmetrics_proto_) -
      reinterpret_cast<char*>(&num_glyphs_proto_)) + sizeof(num_hmetrics_proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WOFF2FontInfoProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 num_glyphs_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          num_glyphs_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 index_format_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          index_format_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_hmetrics_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          num_hmetrics_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 x_mins_proto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_x_mins_proto(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_x_mins_proto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> table_entry_by_tag_proto = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&table_entry_by_tag_proto_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WOFF2FontInfoProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WOFF2FontInfoProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_glyphs_proto = 1;
  if (this->_internal_num_glyphs_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_glyphs_proto(), target);
  }

  // uint32 index_format_proto = 2;
  if (this->_internal_index_format_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index_format_proto(), target);
  }

  // uint32 num_hmetrics_proto = 3;
  if (this->_internal_num_hmetrics_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_hmetrics_proto(), target);
  }

  // repeated int32 x_mins_proto = 4;
  {
    int byte_size = _x_mins_proto_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_x_mins_proto(), byte_size, target);
    }
  }

  // map<uint32, uint32> table_entry_by_tag_proto = 5;
  if (!this->_internal_table_entry_by_tag_proto().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_table_entry_by_tag_proto();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WOFF2FontInfoProto)
  return target;
}

size_t WOFF2FontInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WOFF2FontInfoProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 x_mins_proto = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->x_mins_proto_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _x_mins_proto_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, uint32> table_entry_by_tag_proto = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_table_entry_by_tag_proto_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_table_entry_by_tag_proto().begin();
      it != this->_internal_table_entry_by_tag_proto().end(); ++it) {
    total_size += WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 num_glyphs_proto = 1;
  if (this->_internal_num_glyphs_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_glyphs_proto());
  }

  // uint32 index_format_proto = 2;
  if (this->_internal_index_format_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index_format_proto());
  }

  // uint32 num_hmetrics_proto = 3;
  if (this->_internal_num_hmetrics_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_hmetrics_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WOFF2FontInfoProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WOFF2FontInfoProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WOFF2FontInfoProto::GetClassData() const { return &_class_data_; }

void WOFF2FontInfoProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WOFF2FontInfoProto *>(to)->MergeFrom(
      static_cast<const WOFF2FontInfoProto &>(from));
}


void WOFF2FontInfoProto::MergeFrom(const WOFF2FontInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WOFF2FontInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  x_mins_proto_.MergeFrom(from.x_mins_proto_);
  table_entry_by_tag_proto_.MergeFrom(from.table_entry_by_tag_proto_);
  if (from._internal_num_glyphs_proto() != 0) {
    _internal_set_num_glyphs_proto(from._internal_num_glyphs_proto());
  }
  if (from._internal_index_format_proto() != 0) {
    _internal_set_index_format_proto(from._internal_index_format_proto());
  }
  if (from._internal_num_hmetrics_proto() != 0) {
    _internal_set_num_hmetrics_proto(from._internal_num_hmetrics_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WOFF2FontInfoProto::CopyFrom(const WOFF2FontInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WOFF2FontInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WOFF2FontInfoProto::IsInitialized() const {
  return true;
}

void WOFF2FontInfoProto::InternalSwap(WOFF2FontInfoProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  x_mins_proto_.InternalSwap(&other->x_mins_proto_);
  table_entry_by_tag_proto_.InternalSwap(&other->table_entry_by_tag_proto_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WOFF2FontInfoProto, num_hmetrics_proto_)
      + sizeof(WOFF2FontInfoProto::num_hmetrics_proto_)
      - PROTOBUF_FIELD_OFFSET(WOFF2FontInfoProto, num_glyphs_proto_)>(
          reinterpret_cast<char*>(&num_glyphs_proto_),
          reinterpret_cast<char*>(&other->num_glyphs_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WOFF2FontInfoProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[11]);
}

// ===================================================================

class FontTableProto::_Internal {
 public:
  static const ::FontTableProto& reuse_of_proto(const FontTableProto* msg);
};

const ::FontTableProto&
FontTableProto::_Internal::reuse_of_proto(const FontTableProto* msg) {
  return *msg->reuse_of_proto_;
}
FontTableProto::FontTableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buffer_proto_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:FontTableProto)
}
FontTableProto::FontTableProto(const FontTableProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buffer_proto_(from.buffer_proto_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_proto().empty()) {
    data_proto_.Set(from._internal_data_proto(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_reuse_of_proto()) {
    reuse_of_proto_ = new ::FontTableProto(*from.reuse_of_proto_);
  } else {
    reuse_of_proto_ = nullptr;
  }
  ::memcpy(&tag_proto_, &from.tag_proto_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_byte_proto_) -
    reinterpret_cast<char*>(&tag_proto_)) + sizeof(flag_byte_proto_));
  // @@protoc_insertion_point(copy_constructor:FontTableProto)
}

inline void FontTableProto::SharedCtor() {
data_proto_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_proto_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reuse_of_proto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flag_byte_proto_) -
    reinterpret_cast<char*>(&reuse_of_proto_)) + sizeof(flag_byte_proto_));
}

FontTableProto::~FontTableProto() {
  // @@protoc_insertion_point(destructor:FontTableProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FontTableProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_proto_.Destroy();
  if (this != internal_default_instance()) delete reuse_of_proto_;
}

void FontTableProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FontTableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:FontTableProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_proto_.Clear();
  data_proto_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && reuse_of_proto_ != nullptr) {
    delete reuse_of_proto_;
  }
  reuse_of_proto_ = nullptr;
  ::memset(&tag_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_byte_proto_) -
      reinterpret_cast<char*>(&tag_proto_)) + sizeof(flag_byte_proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FontTableProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 tag_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tag_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 checksum_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          checksum_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offset_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          offset_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 length_proto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          length_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data_proto = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data_proto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 buffer_proto = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_buffer_proto(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_buffer_proto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FontTableProto reuse_of_proto = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reuse_of_proto(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flag_byte_proto = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          flag_byte_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FontTableProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FontTableProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tag_proto = 1;
  if (this->_internal_tag_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tag_proto(), target);
  }

  // uint32 checksum_proto = 2;
  if (this->_internal_checksum_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_checksum_proto(), target);
  }

  // uint32 offset_proto = 3;
  if (this->_internal_offset_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_offset_proto(), target);
  }

  // uint32 length_proto = 4;
  if (this->_internal_length_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_length_proto(), target);
  }

  // bytes data_proto = 5;
  if (!this->_internal_data_proto().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data_proto(), target);
  }

  // repeated uint32 buffer_proto = 6;
  {
    int byte_size = _buffer_proto_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_buffer_proto(), byte_size, target);
    }
  }

  // .FontTableProto reuse_of_proto = 7;
  if (this->_internal_has_reuse_of_proto()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::reuse_of_proto(this),
        _Internal::reuse_of_proto(this).GetCachedSize(), target, stream);
  }

  // uint32 flag_byte_proto = 8;
  if (this->_internal_flag_byte_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_flag_byte_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FontTableProto)
  return target;
}

size_t FontTableProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FontTableProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 buffer_proto = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->buffer_proto_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _buffer_proto_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes data_proto = 5;
  if (!this->_internal_data_proto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_proto());
  }

  // .FontTableProto reuse_of_proto = 7;
  if (this->_internal_has_reuse_of_proto()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reuse_of_proto_);
  }

  // uint32 tag_proto = 1;
  if (this->_internal_tag_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tag_proto());
  }

  // uint32 checksum_proto = 2;
  if (this->_internal_checksum_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_checksum_proto());
  }

  // uint32 offset_proto = 3;
  if (this->_internal_offset_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset_proto());
  }

  // uint32 length_proto = 4;
  if (this->_internal_length_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length_proto());
  }

  // uint32 flag_byte_proto = 8;
  if (this->_internal_flag_byte_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flag_byte_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FontTableProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FontTableProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FontTableProto::GetClassData() const { return &_class_data_; }

void FontTableProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FontTableProto *>(to)->MergeFrom(
      static_cast<const FontTableProto &>(from));
}


void FontTableProto::MergeFrom(const FontTableProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FontTableProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_proto_.MergeFrom(from.buffer_proto_);
  if (!from._internal_data_proto().empty()) {
    _internal_set_data_proto(from._internal_data_proto());
  }
  if (from._internal_has_reuse_of_proto()) {
    _internal_mutable_reuse_of_proto()->::FontTableProto::MergeFrom(from._internal_reuse_of_proto());
  }
  if (from._internal_tag_proto() != 0) {
    _internal_set_tag_proto(from._internal_tag_proto());
  }
  if (from._internal_checksum_proto() != 0) {
    _internal_set_checksum_proto(from._internal_checksum_proto());
  }
  if (from._internal_offset_proto() != 0) {
    _internal_set_offset_proto(from._internal_offset_proto());
  }
  if (from._internal_length_proto() != 0) {
    _internal_set_length_proto(from._internal_length_proto());
  }
  if (from._internal_flag_byte_proto() != 0) {
    _internal_set_flag_byte_proto(from._internal_flag_byte_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FontTableProto::CopyFrom(const FontTableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FontTableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontTableProto::IsInitialized() const {
  return true;
}

void FontTableProto::InternalSwap(FontTableProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buffer_proto_.InternalSwap(&other->buffer_proto_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_proto_, lhs_arena,
      &other->data_proto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FontTableProto, flag_byte_proto_)
      + sizeof(FontTableProto::flag_byte_proto_)
      - PROTOBUF_FIELD_OFFSET(FontTableProto, reuse_of_proto_)>(
          reinterpret_cast<char*>(&reuse_of_proto_),
          reinterpret_cast<char*>(&other->reuse_of_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FontTableProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[12]);
}

// ===================================================================

class GlyphPointProto::_Internal {
 public:
};

GlyphPointProto::GlyphPointProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:GlyphPointProto)
}
GlyphPointProto::GlyphPointProto(const GlyphPointProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_proto_, &from.x_proto_,
    static_cast<size_t>(reinterpret_cast<char*>(&on_curve_proto_) -
    reinterpret_cast<char*>(&x_proto_)) + sizeof(on_curve_proto_));
  // @@protoc_insertion_point(copy_constructor:GlyphPointProto)
}

inline void GlyphPointProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_proto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&on_curve_proto_) -
    reinterpret_cast<char*>(&x_proto_)) + sizeof(on_curve_proto_));
}

GlyphPointProto::~GlyphPointProto() {
  // @@protoc_insertion_point(destructor:GlyphPointProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlyphPointProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GlyphPointProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlyphPointProto::Clear() {
// @@protoc_insertion_point(message_clear_start:GlyphPointProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_curve_proto_) -
      reinterpret_cast<char*>(&x_proto_)) + sizeof(on_curve_proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlyphPointProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool on_curve_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          on_curve_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlyphPointProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GlyphPointProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x_proto = 1;
  if (this->_internal_x_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x_proto(), target);
  }

  // int32 y_proto = 2;
  if (this->_internal_y_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y_proto(), target);
  }

  // bool on_curve_proto = 3;
  if (this->_internal_on_curve_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_on_curve_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GlyphPointProto)
  return target;
}

size_t GlyphPointProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GlyphPointProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x_proto = 1;
  if (this->_internal_x_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_proto());
  }

  // int32 y_proto = 2;
  if (this->_internal_y_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_proto());
  }

  // bool on_curve_proto = 3;
  if (this->_internal_on_curve_proto() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlyphPointProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlyphPointProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlyphPointProto::GetClassData() const { return &_class_data_; }

void GlyphPointProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GlyphPointProto *>(to)->MergeFrom(
      static_cast<const GlyphPointProto &>(from));
}


void GlyphPointProto::MergeFrom(const GlyphPointProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GlyphPointProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x_proto() != 0) {
    _internal_set_x_proto(from._internal_x_proto());
  }
  if (from._internal_y_proto() != 0) {
    _internal_set_y_proto(from._internal_y_proto());
  }
  if (from._internal_on_curve_proto() != 0) {
    _internal_set_on_curve_proto(from._internal_on_curve_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlyphPointProto::CopyFrom(const GlyphPointProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GlyphPointProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlyphPointProto::IsInitialized() const {
  return true;
}

void GlyphPointProto::InternalSwap(GlyphPointProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlyphPointProto, on_curve_proto_)
      + sizeof(GlyphPointProto::on_curve_proto_)
      - PROTOBUF_FIELD_OFFSET(GlyphPointProto, x_proto_)>(
          reinterpret_cast<char*>(&x_proto_),
          reinterpret_cast<char*>(&other->x_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlyphPointProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[13]);
}

// ===================================================================

class WOFF2HeaderProto::_Internal {
 public:
};

WOFF2HeaderProto::WOFF2HeaderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tables_proto_(arena),
  ttc_fonts_proto_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:WOFF2HeaderProto)
}
WOFF2HeaderProto::WOFF2HeaderProto(const WOFF2HeaderProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tables_proto_(from.tables_proto_),
      ttc_fonts_proto_(from.ttc_fonts_proto_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flavor_proto_, &from.flavor_proto_,
    static_cast<size_t>(reinterpret_cast<char*>(&uncompressed_size_proto_) -
    reinterpret_cast<char*>(&flavor_proto_)) + sizeof(uncompressed_size_proto_));
  // @@protoc_insertion_point(copy_constructor:WOFF2HeaderProto)
}

inline void WOFF2HeaderProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flavor_proto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uncompressed_size_proto_) -
    reinterpret_cast<char*>(&flavor_proto_)) + sizeof(uncompressed_size_proto_));
}

WOFF2HeaderProto::~WOFF2HeaderProto() {
  // @@protoc_insertion_point(destructor:WOFF2HeaderProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WOFF2HeaderProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WOFF2HeaderProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WOFF2HeaderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:WOFF2HeaderProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_proto_.Clear();
  ttc_fonts_proto_.Clear();
  ::memset(&flavor_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uncompressed_size_proto_) -
      reinterpret_cast<char*>(&flavor_proto_)) + sizeof(uncompressed_size_proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WOFF2HeaderProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 flavor_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          flavor_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 header_version_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          header_version_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_tables_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          num_tables_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 compressed_offset_proto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          compressed_offset_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 compressed_length_proto = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          compressed_length_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uncompressed_size_proto = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uncompressed_size_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TableProto tables_proto = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tables_proto(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TtcFontProto ttc_fonts_proto = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ttc_fonts_proto(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WOFF2HeaderProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WOFF2HeaderProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flavor_proto = 1;
  if (this->_internal_flavor_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flavor_proto(), target);
  }

  // uint32 header_version_proto = 2;
  if (this->_internal_header_version_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_header_version_proto(), target);
  }

  // uint32 num_tables_proto = 3;
  if (this->_internal_num_tables_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_tables_proto(), target);
  }

  // uint64 compressed_offset_proto = 4;
  if (this->_internal_compressed_offset_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_compressed_offset_proto(), target);
  }

  // uint32 compressed_length_proto = 5;
  if (this->_internal_compressed_length_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_compressed_length_proto(), target);
  }

  // uint32 uncompressed_size_proto = 6;
  if (this->_internal_uncompressed_size_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uncompressed_size_proto(), target);
  }

  // repeated .TableProto tables_proto = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tables_proto_size()); i < n; i++) {
    const auto& repfield = this->_internal_tables_proto(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TtcFontProto ttc_fonts_proto = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ttc_fonts_proto_size()); i < n; i++) {
    const auto& repfield = this->_internal_ttc_fonts_proto(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WOFF2HeaderProto)
  return target;
}

size_t WOFF2HeaderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WOFF2HeaderProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TableProto tables_proto = 7;
  total_size += 1UL * this->_internal_tables_proto_size();
  for (const auto& msg : this->tables_proto_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TtcFontProto ttc_fonts_proto = 8;
  total_size += 1UL * this->_internal_ttc_fonts_proto_size();
  for (const auto& msg : this->ttc_fonts_proto_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 flavor_proto = 1;
  if (this->_internal_flavor_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flavor_proto());
  }

  // uint32 header_version_proto = 2;
  if (this->_internal_header_version_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_header_version_proto());
  }

  // uint64 compressed_offset_proto = 4;
  if (this->_internal_compressed_offset_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_compressed_offset_proto());
  }

  // uint32 num_tables_proto = 3;
  if (this->_internal_num_tables_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_tables_proto());
  }

  // uint32 compressed_length_proto = 5;
  if (this->_internal_compressed_length_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_compressed_length_proto());
  }

  // uint32 uncompressed_size_proto = 6;
  if (this->_internal_uncompressed_size_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uncompressed_size_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WOFF2HeaderProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WOFF2HeaderProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WOFF2HeaderProto::GetClassData() const { return &_class_data_; }

void WOFF2HeaderProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WOFF2HeaderProto *>(to)->MergeFrom(
      static_cast<const WOFF2HeaderProto &>(from));
}


void WOFF2HeaderProto::MergeFrom(const WOFF2HeaderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WOFF2HeaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tables_proto_.MergeFrom(from.tables_proto_);
  ttc_fonts_proto_.MergeFrom(from.ttc_fonts_proto_);
  if (from._internal_flavor_proto() != 0) {
    _internal_set_flavor_proto(from._internal_flavor_proto());
  }
  if (from._internal_header_version_proto() != 0) {
    _internal_set_header_version_proto(from._internal_header_version_proto());
  }
  if (from._internal_compressed_offset_proto() != 0) {
    _internal_set_compressed_offset_proto(from._internal_compressed_offset_proto());
  }
  if (from._internal_num_tables_proto() != 0) {
    _internal_set_num_tables_proto(from._internal_num_tables_proto());
  }
  if (from._internal_compressed_length_proto() != 0) {
    _internal_set_compressed_length_proto(from._internal_compressed_length_proto());
  }
  if (from._internal_uncompressed_size_proto() != 0) {
    _internal_set_uncompressed_size_proto(from._internal_uncompressed_size_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WOFF2HeaderProto::CopyFrom(const WOFF2HeaderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WOFF2HeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WOFF2HeaderProto::IsInitialized() const {
  return true;
}

void WOFF2HeaderProto::InternalSwap(WOFF2HeaderProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tables_proto_.InternalSwap(&other->tables_proto_);
  ttc_fonts_proto_.InternalSwap(&other->ttc_fonts_proto_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WOFF2HeaderProto, uncompressed_size_proto_)
      + sizeof(WOFF2HeaderProto::uncompressed_size_proto_)
      - PROTOBUF_FIELD_OFFSET(WOFF2HeaderProto, flavor_proto_)>(
          reinterpret_cast<char*>(&flavor_proto_),
          reinterpret_cast<char*>(&other->flavor_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WOFF2HeaderProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[14]);
}

// ===================================================================

class TableProto::_Internal {
 public:
};

TableProto::TableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:TableProto)
}
TableProto::TableProto(const TableProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dst_data_proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dst_data_proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dst_data_proto().empty()) {
    dst_data_proto_.Set(from._internal_dst_data_proto(), 
      GetArenaForAllocation());
  }
  ::memcpy(&tag_proto_, &from.tag_proto_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_length_proto_) -
    reinterpret_cast<char*>(&tag_proto_)) + sizeof(dst_length_proto_));
  // @@protoc_insertion_point(copy_constructor:TableProto)
}

inline void TableProto::SharedCtor() {
dst_data_proto_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dst_data_proto_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tag_proto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dst_length_proto_) -
    reinterpret_cast<char*>(&tag_proto_)) + sizeof(dst_length_proto_));
}

TableProto::~TableProto() {
  // @@protoc_insertion_point(destructor:TableProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dst_data_proto_.Destroy();
}

void TableProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:TableProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dst_data_proto_.ClearToEmpty();
  ::memset(&tag_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_length_proto_) -
      reinterpret_cast<char*>(&tag_proto_)) + sizeof(dst_length_proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 tag_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tag_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          flags_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 src_offset_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          src_offset_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 src_length_proto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          src_length_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 transform_length_proto = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          transform_length_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dst_offset_proto = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          dst_offset_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dst_length_proto = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          dst_length_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes dst_data_proto = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_dst_data_proto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TableProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tag_proto = 1;
  if (this->_internal_tag_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tag_proto(), target);
  }

  // uint32 flags_proto = 2;
  if (this->_internal_flags_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags_proto(), target);
  }

  // uint32 src_offset_proto = 3;
  if (this->_internal_src_offset_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_src_offset_proto(), target);
  }

  // uint32 src_length_proto = 4;
  if (this->_internal_src_length_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_src_length_proto(), target);
  }

  // uint32 transform_length_proto = 5;
  if (this->_internal_transform_length_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_transform_length_proto(), target);
  }

  // uint32 dst_offset_proto = 6;
  if (this->_internal_dst_offset_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_dst_offset_proto(), target);
  }

  // uint32 dst_length_proto = 7;
  if (this->_internal_dst_length_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_dst_length_proto(), target);
  }

  // bytes dst_data_proto = 8;
  if (!this->_internal_dst_data_proto().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_dst_data_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TableProto)
  return target;
}

size_t TableProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TableProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes dst_data_proto = 8;
  if (!this->_internal_dst_data_proto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dst_data_proto());
  }

  // uint32 tag_proto = 1;
  if (this->_internal_tag_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tag_proto());
  }

  // uint32 flags_proto = 2;
  if (this->_internal_flags_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags_proto());
  }

  // uint32 src_offset_proto = 3;
  if (this->_internal_src_offset_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src_offset_proto());
  }

  // uint32 src_length_proto = 4;
  if (this->_internal_src_length_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src_length_proto());
  }

  // uint32 transform_length_proto = 5;
  if (this->_internal_transform_length_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_transform_length_proto());
  }

  // uint32 dst_offset_proto = 6;
  if (this->_internal_dst_offset_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dst_offset_proto());
  }

  // uint32 dst_length_proto = 7;
  if (this->_internal_dst_length_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dst_length_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableProto::GetClassData() const { return &_class_data_; }

void TableProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TableProto *>(to)->MergeFrom(
      static_cast<const TableProto &>(from));
}


void TableProto::MergeFrom(const TableProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TableProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dst_data_proto().empty()) {
    _internal_set_dst_data_proto(from._internal_dst_data_proto());
  }
  if (from._internal_tag_proto() != 0) {
    _internal_set_tag_proto(from._internal_tag_proto());
  }
  if (from._internal_flags_proto() != 0) {
    _internal_set_flags_proto(from._internal_flags_proto());
  }
  if (from._internal_src_offset_proto() != 0) {
    _internal_set_src_offset_proto(from._internal_src_offset_proto());
  }
  if (from._internal_src_length_proto() != 0) {
    _internal_set_src_length_proto(from._internal_src_length_proto());
  }
  if (from._internal_transform_length_proto() != 0) {
    _internal_set_transform_length_proto(from._internal_transform_length_proto());
  }
  if (from._internal_dst_offset_proto() != 0) {
    _internal_set_dst_offset_proto(from._internal_dst_offset_proto());
  }
  if (from._internal_dst_length_proto() != 0) {
    _internal_set_dst_length_proto(from._internal_dst_length_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableProto::CopyFrom(const TableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableProto::IsInitialized() const {
  return true;
}

void TableProto::InternalSwap(TableProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &dst_data_proto_, lhs_arena,
      &other->dst_data_proto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableProto, dst_length_proto_)
      + sizeof(TableProto::dst_length_proto_)
      - PROTOBUF_FIELD_OFFSET(TableProto, tag_proto_)>(
          reinterpret_cast<char*>(&tag_proto_),
          reinterpret_cast<char*>(&other->tag_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[15]);
}

// ===================================================================

class GlyfEncoderProto::_Internal {
 public:
};

GlyfEncoderProto::GlyfEncoderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  n_contour_stream_proto_(arena),
  n_points_stream_proto_(arena),
  flag_byte_stream_proto_(arena),
  composite_stream_proto_(arena),
  bbox_bitmap_proto_(arena),
  bbox_stream_proto_(arena),
  glyph_stream_proto_(arena),
  instruction_stream_proto_(arena),
  overlap_bitmap_proto_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:GlyfEncoderProto)
}
GlyfEncoderProto::GlyfEncoderProto(const GlyfEncoderProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      n_contour_stream_proto_(from.n_contour_stream_proto_),
      n_points_stream_proto_(from.n_points_stream_proto_),
      flag_byte_stream_proto_(from.flag_byte_stream_proto_),
      composite_stream_proto_(from.composite_stream_proto_),
      bbox_bitmap_proto_(from.bbox_bitmap_proto_),
      bbox_stream_proto_(from.bbox_stream_proto_),
      glyph_stream_proto_(from.glyph_stream_proto_),
      instruction_stream_proto_(from.instruction_stream_proto_),
      overlap_bitmap_proto_(from.overlap_bitmap_proto_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  n_glyphs_proto_ = from.n_glyphs_proto_;
  // @@protoc_insertion_point(copy_constructor:GlyfEncoderProto)
}

inline void GlyfEncoderProto::SharedCtor() {
n_glyphs_proto_ = 0;
}

GlyfEncoderProto::~GlyfEncoderProto() {
  // @@protoc_insertion_point(destructor:GlyfEncoderProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlyfEncoderProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GlyfEncoderProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlyfEncoderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:GlyfEncoderProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n_contour_stream_proto_.Clear();
  n_points_stream_proto_.Clear();
  flag_byte_stream_proto_.Clear();
  composite_stream_proto_.Clear();
  bbox_bitmap_proto_.Clear();
  bbox_stream_proto_.Clear();
  glyph_stream_proto_.Clear();
  instruction_stream_proto_.Clear();
  overlap_bitmap_proto_.Clear();
  n_glyphs_proto_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlyfEncoderProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 n_contour_stream_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_n_contour_stream_proto(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_n_contour_stream_proto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 n_points_stream_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_n_points_stream_proto(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_n_points_stream_proto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 flag_byte_stream_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_flag_byte_stream_proto(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_flag_byte_stream_proto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 composite_stream_proto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_composite_stream_proto(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_composite_stream_proto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 bbox_bitmap_proto = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bbox_bitmap_proto(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_bbox_bitmap_proto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 bbox_stream_proto = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bbox_stream_proto(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_bbox_stream_proto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 glyph_stream_proto = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_glyph_stream_proto(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_glyph_stream_proto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 instruction_stream_proto = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_instruction_stream_proto(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_instruction_stream_proto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 overlap_bitmap_proto = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_overlap_bitmap_proto(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_overlap_bitmap_proto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 n_glyphs_proto = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          n_glyphs_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlyfEncoderProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GlyfEncoderProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 n_contour_stream_proto = 1;
  {
    int byte_size = _n_contour_stream_proto_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_n_contour_stream_proto(), byte_size, target);
    }
  }

  // repeated uint32 n_points_stream_proto = 2;
  {
    int byte_size = _n_points_stream_proto_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_n_points_stream_proto(), byte_size, target);
    }
  }

  // repeated uint32 flag_byte_stream_proto = 3;
  {
    int byte_size = _flag_byte_stream_proto_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_flag_byte_stream_proto(), byte_size, target);
    }
  }

  // repeated uint32 composite_stream_proto = 4;
  {
    int byte_size = _composite_stream_proto_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_composite_stream_proto(), byte_size, target);
    }
  }

  // repeated uint32 bbox_bitmap_proto = 5;
  {
    int byte_size = _bbox_bitmap_proto_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_bbox_bitmap_proto(), byte_size, target);
    }
  }

  // repeated uint32 bbox_stream_proto = 6;
  {
    int byte_size = _bbox_stream_proto_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_bbox_stream_proto(), byte_size, target);
    }
  }

  // repeated uint32 glyph_stream_proto = 7;
  {
    int byte_size = _glyph_stream_proto_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_glyph_stream_proto(), byte_size, target);
    }
  }

  // repeated uint32 instruction_stream_proto = 8;
  {
    int byte_size = _instruction_stream_proto_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_instruction_stream_proto(), byte_size, target);
    }
  }

  // repeated uint32 overlap_bitmap_proto = 9;
  {
    int byte_size = _overlap_bitmap_proto_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_overlap_bitmap_proto(), byte_size, target);
    }
  }

  // int32 n_glyphs_proto = 10;
  if (this->_internal_n_glyphs_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_n_glyphs_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GlyfEncoderProto)
  return target;
}

size_t GlyfEncoderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GlyfEncoderProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 n_contour_stream_proto = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->n_contour_stream_proto_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _n_contour_stream_proto_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 n_points_stream_proto = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->n_points_stream_proto_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _n_points_stream_proto_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 flag_byte_stream_proto = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->flag_byte_stream_proto_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _flag_byte_stream_proto_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 composite_stream_proto = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->composite_stream_proto_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _composite_stream_proto_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 bbox_bitmap_proto = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->bbox_bitmap_proto_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _bbox_bitmap_proto_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 bbox_stream_proto = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->bbox_stream_proto_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _bbox_stream_proto_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 glyph_stream_proto = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->glyph_stream_proto_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _glyph_stream_proto_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 instruction_stream_proto = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->instruction_stream_proto_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _instruction_stream_proto_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 overlap_bitmap_proto = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->overlap_bitmap_proto_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _overlap_bitmap_proto_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 n_glyphs_proto = 10;
  if (this->_internal_n_glyphs_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n_glyphs_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlyfEncoderProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlyfEncoderProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlyfEncoderProto::GetClassData() const { return &_class_data_; }

void GlyfEncoderProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GlyfEncoderProto *>(to)->MergeFrom(
      static_cast<const GlyfEncoderProto &>(from));
}


void GlyfEncoderProto::MergeFrom(const GlyfEncoderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GlyfEncoderProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  n_contour_stream_proto_.MergeFrom(from.n_contour_stream_proto_);
  n_points_stream_proto_.MergeFrom(from.n_points_stream_proto_);
  flag_byte_stream_proto_.MergeFrom(from.flag_byte_stream_proto_);
  composite_stream_proto_.MergeFrom(from.composite_stream_proto_);
  bbox_bitmap_proto_.MergeFrom(from.bbox_bitmap_proto_);
  bbox_stream_proto_.MergeFrom(from.bbox_stream_proto_);
  glyph_stream_proto_.MergeFrom(from.glyph_stream_proto_);
  instruction_stream_proto_.MergeFrom(from.instruction_stream_proto_);
  overlap_bitmap_proto_.MergeFrom(from.overlap_bitmap_proto_);
  if (from._internal_n_glyphs_proto() != 0) {
    _internal_set_n_glyphs_proto(from._internal_n_glyphs_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlyfEncoderProto::CopyFrom(const GlyfEncoderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GlyfEncoderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlyfEncoderProto::IsInitialized() const {
  return true;
}

void GlyfEncoderProto::InternalSwap(GlyfEncoderProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  n_contour_stream_proto_.InternalSwap(&other->n_contour_stream_proto_);
  n_points_stream_proto_.InternalSwap(&other->n_points_stream_proto_);
  flag_byte_stream_proto_.InternalSwap(&other->flag_byte_stream_proto_);
  composite_stream_proto_.InternalSwap(&other->composite_stream_proto_);
  bbox_bitmap_proto_.InternalSwap(&other->bbox_bitmap_proto_);
  bbox_stream_proto_.InternalSwap(&other->bbox_stream_proto_);
  glyph_stream_proto_.InternalSwap(&other->glyph_stream_proto_);
  instruction_stream_proto_.InternalSwap(&other->instruction_stream_proto_);
  overlap_bitmap_proto_.InternalSwap(&other->overlap_bitmap_proto_);
  swap(n_glyphs_proto_, other->n_glyphs_proto_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlyfEncoderProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[16]);
}

// ===================================================================

class ContourVecProto::_Internal {
 public:
};

ContourVecProto::ContourVecProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_proto_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ContourVecProto)
}
ContourVecProto::ContourVecProto(const ContourVecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_proto_(from.points_proto_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ContourVecProto)
}

inline void ContourVecProto::SharedCtor() {
}

ContourVecProto::~ContourVecProto() {
  // @@protoc_insertion_point(destructor:ContourVecProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContourVecProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ContourVecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContourVecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ContourVecProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_proto_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContourVecProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .GlyphPointProto points_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points_proto(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContourVecProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContourVecProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GlyphPointProto points_proto = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_proto_size()); i < n; i++) {
    const auto& repfield = this->_internal_points_proto(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContourVecProto)
  return target;
}

size_t ContourVecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContourVecProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GlyphPointProto points_proto = 1;
  total_size += 1UL * this->_internal_points_proto_size();
  for (const auto& msg : this->points_proto_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContourVecProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContourVecProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContourVecProto::GetClassData() const { return &_class_data_; }

void ContourVecProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContourVecProto *>(to)->MergeFrom(
      static_cast<const ContourVecProto &>(from));
}


void ContourVecProto::MergeFrom(const ContourVecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContourVecProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  points_proto_.MergeFrom(from.points_proto_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContourVecProto::CopyFrom(const ContourVecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContourVecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContourVecProto::IsInitialized() const {
  return true;
}

void ContourVecProto::InternalSwap(ContourVecProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_proto_.InternalSwap(&other->points_proto_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContourVecProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_woff2_2eproto_getter, &descriptor_table_woff2_2eproto_once,
      file_level_metadata_woff2_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FontCollectionProto_TablesProtoEntry_DoNotUse*
Arena::CreateMaybeMessage< ::FontCollectionProto_TablesProtoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FontCollectionProto_TablesProtoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FontCollectionProto*
Arena::CreateMaybeMessage< ::FontCollectionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FontCollectionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::GlyphProto*
Arena::CreateMaybeMessage< ::GlyphProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GlyphProto >(arena);
}
template<> PROTOBUF_NOINLINE ::RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse*
Arena::CreateMaybeMessage< ::RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RebuildMetadataProto_ChecksumsProtoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RebuildMetadataProto*
Arena::CreateMaybeMessage< ::RebuildMetadataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RebuildMetadataProto >(arena);
}
template<> PROTOBUF_NOINLINE ::FontProto_TablesProtoEntry_DoNotUse*
Arena::CreateMaybeMessage< ::FontProto_TablesProtoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FontProto_TablesProtoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FontProto*
Arena::CreateMaybeMessage< ::FontProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FontProto >(arena);
}
template<> PROTOBUF_NOINLINE ::PointProto*
Arena::CreateMaybeMessage< ::PointProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PointProto >(arena);
}
template<> PROTOBUF_NOINLINE ::TtcFontProto*
Arena::CreateMaybeMessage< ::TtcFontProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TtcFontProto >(arena);
}
template<> PROTOBUF_NOINLINE ::BufferProto*
Arena::CreateMaybeMessage< ::BufferProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BufferProto >(arena);
}
template<> PROTOBUF_NOINLINE ::WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse*
Arena::CreateMaybeMessage< ::WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WOFF2FontInfoProto_TableEntryByTagProtoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::WOFF2FontInfoProto*
Arena::CreateMaybeMessage< ::WOFF2FontInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WOFF2FontInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::FontTableProto*
Arena::CreateMaybeMessage< ::FontTableProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FontTableProto >(arena);
}
template<> PROTOBUF_NOINLINE ::GlyphPointProto*
Arena::CreateMaybeMessage< ::GlyphPointProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GlyphPointProto >(arena);
}
template<> PROTOBUF_NOINLINE ::WOFF2HeaderProto*
Arena::CreateMaybeMessage< ::WOFF2HeaderProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WOFF2HeaderProto >(arena);
}
template<> PROTOBUF_NOINLINE ::TableProto*
Arena::CreateMaybeMessage< ::TableProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TableProto >(arena);
}
template<> PROTOBUF_NOINLINE ::GlyfEncoderProto*
Arena::CreateMaybeMessage< ::GlyfEncoderProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GlyfEncoderProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ContourVecProto*
Arena::CreateMaybeMessage< ::ContourVecProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContourVecProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
