// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2eproto;
class ArrayProto;
struct ArrayProtoDefaultTypeInternal;
extern ArrayProtoDefaultTypeInternal _ArrayProto_default_instance_;
class BitsProto;
struct BitsProtoDefaultTypeInternal;
extern BitsProtoDefaultTypeInternal _BitsProto_default_instance_;
class CharReaderBuilder_Proto;
struct CharReaderBuilder_ProtoDefaultTypeInternal;
extern CharReaderBuilder_ProtoDefaultTypeInternal _CharReaderBuilder_Proto_default_instance_;
class CommentsProto;
struct CommentsProtoDefaultTypeInternal;
extern CommentsProtoDefaultTypeInternal _CommentsProto_default_instance_;
class LargestIntProto;
struct LargestIntProtoDefaultTypeInternal;
extern LargestIntProtoDefaultTypeInternal _LargestIntProto_default_instance_;
class LargestUIntProto;
struct LargestUIntProtoDefaultTypeInternal;
extern LargestUIntProtoDefaultTypeInternal _LargestUIntProto_default_instance_;
class ObjectValuesProto;
struct ObjectValuesProtoDefaultTypeInternal;
extern ObjectValuesProtoDefaultTypeInternal _ObjectValuesProto_default_instance_;
class ObjectValuesProto_ValuesEntry_DoNotUse;
struct ObjectValuesProto_ValuesEntry_DoNotUseDefaultTypeInternal;
extern ObjectValuesProto_ValuesEntry_DoNotUseDefaultTypeInternal _ObjectValuesProto_ValuesEntry_DoNotUse_default_instance_;
class ValueProto;
struct ValueProtoDefaultTypeInternal;
extern ValueProtoDefaultTypeInternal _ValueProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ArrayProto* Arena::CreateMaybeMessage<::ArrayProto>(Arena*);
template<> ::BitsProto* Arena::CreateMaybeMessage<::BitsProto>(Arena*);
template<> ::CharReaderBuilder_Proto* Arena::CreateMaybeMessage<::CharReaderBuilder_Proto>(Arena*);
template<> ::CommentsProto* Arena::CreateMaybeMessage<::CommentsProto>(Arena*);
template<> ::LargestIntProto* Arena::CreateMaybeMessage<::LargestIntProto>(Arena*);
template<> ::LargestUIntProto* Arena::CreateMaybeMessage<::LargestUIntProto>(Arena*);
template<> ::ObjectValuesProto* Arena::CreateMaybeMessage<::ObjectValuesProto>(Arena*);
template<> ::ObjectValuesProto_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::ObjectValuesProto_ValuesEntry_DoNotUse>(Arena*);
template<> ::ValueProto* Arena::CreateMaybeMessage<::ValueProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CharReaderBuilder_Proto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CharReaderBuilder_Proto) */ {
 public:
  inline CharReaderBuilder_Proto() : CharReaderBuilder_Proto(nullptr) {}
  ~CharReaderBuilder_Proto() override;
  explicit PROTOBUF_CONSTEXPR CharReaderBuilder_Proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharReaderBuilder_Proto(const CharReaderBuilder_Proto& from);
  CharReaderBuilder_Proto(CharReaderBuilder_Proto&& from) noexcept
    : CharReaderBuilder_Proto() {
    *this = ::std::move(from);
  }

  inline CharReaderBuilder_Proto& operator=(const CharReaderBuilder_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharReaderBuilder_Proto& operator=(CharReaderBuilder_Proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharReaderBuilder_Proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharReaderBuilder_Proto* internal_default_instance() {
    return reinterpret_cast<const CharReaderBuilder_Proto*>(
               &_CharReaderBuilder_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CharReaderBuilder_Proto& a, CharReaderBuilder_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(CharReaderBuilder_Proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharReaderBuilder_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharReaderBuilder_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharReaderBuilder_Proto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharReaderBuilder_Proto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CharReaderBuilder_Proto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharReaderBuilder_Proto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CharReaderBuilder_Proto";
  }
  protected:
  explicit CharReaderBuilder_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 1,
  };
  // .ValueProto settings = 1;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::ValueProto& settings() const;
  PROTOBUF_NODISCARD ::ValueProto* release_settings();
  ::ValueProto* mutable_settings();
  void set_allocated_settings(::ValueProto* settings);
  private:
  const ::ValueProto& _internal_settings() const;
  ::ValueProto* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::ValueProto* settings);
  ::ValueProto* unsafe_arena_release_settings();

  // @@protoc_insertion_point(class_scope:CharReaderBuilder_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ValueProto* settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ValueProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ValueProto) */ {
 public:
  inline ValueProto() : ValueProto(nullptr) {}
  ~ValueProto() override;
  explicit PROTOBUF_CONSTEXPR ValueProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueProto(const ValueProto& from);
  ValueProto(ValueProto&& from) noexcept
    : ValueProto() {
    *this = ::std::move(from);
  }

  inline ValueProto& operator=(const ValueProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueProto& operator=(ValueProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValueProto& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntValue = 1,
    kUintValue = 2,
    kRealValue = 3,
    kBoolValue = 4,
    kStringValue = 5,
    kMapValue = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const ValueProto* internal_default_instance() {
    return reinterpret_cast<const ValueProto*>(
               &_ValueProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ValueProto& a, ValueProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValueProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValueProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValueProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ValueProto";
  }
  protected:
  explicit ValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitsFieldNumber = 7,
    kCommentsFieldNumber = 8,
    kStartFieldNumber = 9,
    kLimitFieldNumber = 10,
    kIntValueFieldNumber = 1,
    kUintValueFieldNumber = 2,
    kRealValueFieldNumber = 3,
    kBoolValueFieldNumber = 4,
    kStringValueFieldNumber = 5,
    kMapValueFieldNumber = 6,
  };
  // .BitsProto bits = 7;
  bool has_bits() const;
  private:
  bool _internal_has_bits() const;
  public:
  void clear_bits();
  const ::BitsProto& bits() const;
  PROTOBUF_NODISCARD ::BitsProto* release_bits();
  ::BitsProto* mutable_bits();
  void set_allocated_bits(::BitsProto* bits);
  private:
  const ::BitsProto& _internal_bits() const;
  ::BitsProto* _internal_mutable_bits();
  public:
  void unsafe_arena_set_allocated_bits(
      ::BitsProto* bits);
  ::BitsProto* unsafe_arena_release_bits();

  // .CommentsProto comments = 8;
  bool has_comments() const;
  private:
  bool _internal_has_comments() const;
  public:
  void clear_comments();
  const ::CommentsProto& comments() const;
  PROTOBUF_NODISCARD ::CommentsProto* release_comments();
  ::CommentsProto* mutable_comments();
  void set_allocated_comments(::CommentsProto* comments);
  private:
  const ::CommentsProto& _internal_comments() const;
  ::CommentsProto* _internal_mutable_comments();
  public:
  void unsafe_arena_set_allocated_comments(
      ::CommentsProto* comments);
  ::CommentsProto* unsafe_arena_release_comments();

  // int64 start = 9;
  void clear_start();
  int64_t start() const;
  void set_start(int64_t value);
  private:
  int64_t _internal_start() const;
  void _internal_set_start(int64_t value);
  public:

  // int64 limit = 10;
  void clear_limit();
  int64_t limit() const;
  void set_limit(int64_t value);
  private:
  int64_t _internal_limit() const;
  void _internal_set_limit(int64_t value);
  public:

  // .LargestIntProto int_value = 1;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  const ::LargestIntProto& int_value() const;
  PROTOBUF_NODISCARD ::LargestIntProto* release_int_value();
  ::LargestIntProto* mutable_int_value();
  void set_allocated_int_value(::LargestIntProto* int_value);
  private:
  const ::LargestIntProto& _internal_int_value() const;
  ::LargestIntProto* _internal_mutable_int_value();
  public:
  void unsafe_arena_set_allocated_int_value(
      ::LargestIntProto* int_value);
  ::LargestIntProto* unsafe_arena_release_int_value();

  // .LargestUIntProto uint_value = 2;
  bool has_uint_value() const;
  private:
  bool _internal_has_uint_value() const;
  public:
  void clear_uint_value();
  const ::LargestUIntProto& uint_value() const;
  PROTOBUF_NODISCARD ::LargestUIntProto* release_uint_value();
  ::LargestUIntProto* mutable_uint_value();
  void set_allocated_uint_value(::LargestUIntProto* uint_value);
  private:
  const ::LargestUIntProto& _internal_uint_value() const;
  ::LargestUIntProto* _internal_mutable_uint_value();
  public:
  void unsafe_arena_set_allocated_uint_value(
      ::LargestUIntProto* uint_value);
  ::LargestUIntProto* unsafe_arena_release_uint_value();

  // double real_value = 3;
  bool has_real_value() const;
  private:
  bool _internal_has_real_value() const;
  public:
  void clear_real_value();
  double real_value() const;
  void set_real_value(double value);
  private:
  double _internal_real_value() const;
  void _internal_set_real_value(double value);
  public:

  // bool bool_value = 4;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // string string_value = 5;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // .ObjectValuesProto map_value = 6;
  bool has_map_value() const;
  private:
  bool _internal_has_map_value() const;
  public:
  void clear_map_value();
  const ::ObjectValuesProto& map_value() const;
  PROTOBUF_NODISCARD ::ObjectValuesProto* release_map_value();
  ::ObjectValuesProto* mutable_map_value();
  void set_allocated_map_value(::ObjectValuesProto* map_value);
  private:
  const ::ObjectValuesProto& _internal_map_value() const;
  ::ObjectValuesProto* _internal_mutable_map_value();
  public:
  void unsafe_arena_set_allocated_map_value(
      ::ObjectValuesProto* map_value);
  ::ObjectValuesProto* unsafe_arena_release_map_value();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:ValueProto)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_uint_value();
  void set_has_real_value();
  void set_has_bool_value();
  void set_has_string_value();
  void set_has_map_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BitsProto* bits_;
  ::CommentsProto* comments_;
  int64_t start_;
  int64_t limit_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::LargestIntProto* int_value_;
    ::LargestUIntProto* uint_value_;
    double real_value_;
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::ObjectValuesProto* map_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class CommentsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommentsProto) */ {
 public:
  inline CommentsProto() : CommentsProto(nullptr) {}
  ~CommentsProto() override;
  explicit PROTOBUF_CONSTEXPR CommentsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommentsProto(const CommentsProto& from);
  CommentsProto(CommentsProto&& from) noexcept
    : CommentsProto() {
    *this = ::std::move(from);
  }

  inline CommentsProto& operator=(const CommentsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommentsProto& operator=(CommentsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommentsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommentsProto* internal_default_instance() {
    return reinterpret_cast<const CommentsProto*>(
               &_CommentsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommentsProto& a, CommentsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CommentsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommentsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommentsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommentsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommentsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommentsProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommentsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommentsProto";
  }
  protected:
  explicit CommentsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayFieldNumber = 1,
  };
  // .ArrayProto array = 1;
  bool has_array() const;
  private:
  bool _internal_has_array() const;
  public:
  void clear_array();
  const ::ArrayProto& array() const;
  PROTOBUF_NODISCARD ::ArrayProto* release_array();
  ::ArrayProto* mutable_array();
  void set_allocated_array(::ArrayProto* array);
  private:
  const ::ArrayProto& _internal_array() const;
  ::ArrayProto* _internal_mutable_array();
  public:
  void unsafe_arena_set_allocated_array(
      ::ArrayProto* array);
  ::ArrayProto* unsafe_arena_release_array();

  // @@protoc_insertion_point(class_scope:CommentsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ArrayProto* array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ArrayProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArrayProto) */ {
 public:
  inline ArrayProto() : ArrayProto(nullptr) {}
  ~ArrayProto() override;
  explicit PROTOBUF_CONSTEXPR ArrayProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayProto(const ArrayProto& from);
  ArrayProto(ArrayProto&& from) noexcept
    : ArrayProto() {
    *this = ::std::move(from);
  }

  inline ArrayProto& operator=(const ArrayProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayProto& operator=(ArrayProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArrayProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayProto* internal_default_instance() {
    return reinterpret_cast<const ArrayProto*>(
               &_ArrayProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ArrayProto& a, ArrayProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArrayProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArrayProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArrayProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ArrayProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArrayProto";
  }
  protected:
  explicit ArrayProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .ValueProto values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::ValueProto* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValueProto >*
      mutable_values();
  private:
  const ::ValueProto& _internal_values(int index) const;
  ::ValueProto* _internal_add_values();
  public:
  const ::ValueProto& values(int index) const;
  ::ValueProto* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValueProto >&
      values() const;

  // @@protoc_insertion_point(class_scope:ArrayProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValueProto > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class BitsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BitsProto) */ {
 public:
  inline BitsProto() : BitsProto(nullptr) {}
  ~BitsProto() override;
  explicit PROTOBUF_CONSTEXPR BitsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BitsProto(const BitsProto& from);
  BitsProto(BitsProto&& from) noexcept
    : BitsProto() {
    *this = ::std::move(from);
  }

  inline BitsProto& operator=(const BitsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitsProto& operator=(BitsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BitsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BitsProto* internal_default_instance() {
    return reinterpret_cast<const BitsProto*>(
               &_BitsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BitsProto& a, BitsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BitsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BitsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BitsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BitsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BitsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BitsProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BitsProto";
  }
  protected:
  explicit BitsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueTypeFieldNumber = 1,
    kAllocatedFieldNumber = 2,
  };
  // uint32 value_type = 1;
  void clear_value_type();
  uint32_t value_type() const;
  void set_value_type(uint32_t value);
  private:
  uint32_t _internal_value_type() const;
  void _internal_set_value_type(uint32_t value);
  public:

  // uint32 allocated = 2;
  void clear_allocated();
  uint32_t allocated() const;
  void set_allocated(uint32_t value);
  private:
  uint32_t _internal_allocated() const;
  void _internal_set_allocated(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:BitsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t value_type_;
  uint32_t allocated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ObjectValuesProto_ValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ObjectValuesProto_ValuesEntry_DoNotUse, 
    std::string, ::ValueProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ObjectValuesProto_ValuesEntry_DoNotUse, 
    std::string, ::ValueProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ObjectValuesProto_ValuesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ObjectValuesProto_ValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ObjectValuesProto_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ObjectValuesProto_ValuesEntry_DoNotUse& other);
  static const ObjectValuesProto_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ObjectValuesProto_ValuesEntry_DoNotUse*>(&_ObjectValuesProto_ValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ObjectValuesProto.ValuesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_proto_2eproto;
};

// -------------------------------------------------------------------

class ObjectValuesProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObjectValuesProto) */ {
 public:
  inline ObjectValuesProto() : ObjectValuesProto(nullptr) {}
  ~ObjectValuesProto() override;
  explicit PROTOBUF_CONSTEXPR ObjectValuesProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectValuesProto(const ObjectValuesProto& from);
  ObjectValuesProto(ObjectValuesProto&& from) noexcept
    : ObjectValuesProto() {
    *this = ::std::move(from);
  }

  inline ObjectValuesProto& operator=(const ObjectValuesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectValuesProto& operator=(ObjectValuesProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectValuesProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectValuesProto* internal_default_instance() {
    return reinterpret_cast<const ObjectValuesProto*>(
               &_ObjectValuesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ObjectValuesProto& a, ObjectValuesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectValuesProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectValuesProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectValuesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectValuesProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectValuesProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectValuesProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectValuesProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObjectValuesProto";
  }
  protected:
  explicit ObjectValuesProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // map<string, .ValueProto> values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueProto >&
      _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueProto >*
      _internal_mutable_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueProto >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueProto >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:ObjectValuesProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ObjectValuesProto_ValuesEntry_DoNotUse,
      std::string, ::ValueProto,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class LargestIntProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LargestIntProto) */ {
 public:
  inline LargestIntProto() : LargestIntProto(nullptr) {}
  ~LargestIntProto() override;
  explicit PROTOBUF_CONSTEXPR LargestIntProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargestIntProto(const LargestIntProto& from);
  LargestIntProto(LargestIntProto&& from) noexcept
    : LargestIntProto() {
    *this = ::std::move(from);
  }

  inline LargestIntProto& operator=(const LargestIntProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargestIntProto& operator=(LargestIntProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargestIntProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargestIntProto* internal_default_instance() {
    return reinterpret_cast<const LargestIntProto*>(
               &_LargestIntProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LargestIntProto& a, LargestIntProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LargestIntProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargestIntProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LargestIntProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LargestIntProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LargestIntProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LargestIntProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargestIntProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LargestIntProto";
  }
  protected:
  explicit LargestIntProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:LargestIntProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class LargestUIntProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LargestUIntProto) */ {
 public:
  inline LargestUIntProto() : LargestUIntProto(nullptr) {}
  ~LargestUIntProto() override;
  explicit PROTOBUF_CONSTEXPR LargestUIntProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargestUIntProto(const LargestUIntProto& from);
  LargestUIntProto(LargestUIntProto&& from) noexcept
    : LargestUIntProto() {
    *this = ::std::move(from);
  }

  inline LargestUIntProto& operator=(const LargestUIntProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargestUIntProto& operator=(LargestUIntProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargestUIntProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargestUIntProto* internal_default_instance() {
    return reinterpret_cast<const LargestUIntProto*>(
               &_LargestUIntProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LargestUIntProto& a, LargestUIntProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LargestUIntProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargestUIntProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LargestUIntProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LargestUIntProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LargestUIntProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LargestUIntProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargestUIntProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LargestUIntProto";
  }
  protected:
  explicit LargestUIntProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1;
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:LargestUIntProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CharReaderBuilder_Proto

// .ValueProto settings = 1;
inline bool CharReaderBuilder_Proto::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool CharReaderBuilder_Proto::has_settings() const {
  return _internal_has_settings();
}
inline void CharReaderBuilder_Proto::clear_settings() {
  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::ValueProto& CharReaderBuilder_Proto::_internal_settings() const {
  const ::ValueProto* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ValueProto&>(
      ::_ValueProto_default_instance_);
}
inline const ::ValueProto& CharReaderBuilder_Proto::settings() const {
  // @@protoc_insertion_point(field_get:CharReaderBuilder_Proto.settings)
  return _internal_settings();
}
inline void CharReaderBuilder_Proto::unsafe_arena_set_allocated_settings(
    ::ValueProto* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CharReaderBuilder_Proto.settings)
}
inline ::ValueProto* CharReaderBuilder_Proto::release_settings() {
  
  ::ValueProto* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ValueProto* CharReaderBuilder_Proto::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:CharReaderBuilder_Proto.settings)
  
  ::ValueProto* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::ValueProto* CharReaderBuilder_Proto::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ValueProto>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::ValueProto* CharReaderBuilder_Proto::mutable_settings() {
  ::ValueProto* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:CharReaderBuilder_Proto.settings)
  return _msg;
}
inline void CharReaderBuilder_Proto::set_allocated_settings(::ValueProto* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:CharReaderBuilder_Proto.settings)
}

// -------------------------------------------------------------------

// ValueProto

// .LargestIntProto int_value = 1;
inline bool ValueProto::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool ValueProto::has_int_value() const {
  return _internal_has_int_value();
}
inline void ValueProto::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void ValueProto::clear_int_value() {
  if (_internal_has_int_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.int_value_;
    }
    clear_has_value();
  }
}
inline ::LargestIntProto* ValueProto::release_int_value() {
  // @@protoc_insertion_point(field_release:ValueProto.int_value)
  if (_internal_has_int_value()) {
    clear_has_value();
    ::LargestIntProto* temp = value_.int_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.int_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LargestIntProto& ValueProto::_internal_int_value() const {
  return _internal_has_int_value()
      ? *value_.int_value_
      : reinterpret_cast< ::LargestIntProto&>(::_LargestIntProto_default_instance_);
}
inline const ::LargestIntProto& ValueProto::int_value() const {
  // @@protoc_insertion_point(field_get:ValueProto.int_value)
  return _internal_int_value();
}
inline ::LargestIntProto* ValueProto::unsafe_arena_release_int_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ValueProto.int_value)
  if (_internal_has_int_value()) {
    clear_has_value();
    ::LargestIntProto* temp = value_.int_value_;
    value_.int_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_int_value(::LargestIntProto* int_value) {
  clear_value();
  if (int_value) {
    set_has_int_value();
    value_.int_value_ = int_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ValueProto.int_value)
}
inline ::LargestIntProto* ValueProto::_internal_mutable_int_value() {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
    value_.int_value_ = CreateMaybeMessage< ::LargestIntProto >(GetArenaForAllocation());
  }
  return value_.int_value_;
}
inline ::LargestIntProto* ValueProto::mutable_int_value() {
  ::LargestIntProto* _msg = _internal_mutable_int_value();
  // @@protoc_insertion_point(field_mutable:ValueProto.int_value)
  return _msg;
}

// .LargestUIntProto uint_value = 2;
inline bool ValueProto::_internal_has_uint_value() const {
  return value_case() == kUintValue;
}
inline bool ValueProto::has_uint_value() const {
  return _internal_has_uint_value();
}
inline void ValueProto::set_has_uint_value() {
  _oneof_case_[0] = kUintValue;
}
inline void ValueProto::clear_uint_value() {
  if (_internal_has_uint_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.uint_value_;
    }
    clear_has_value();
  }
}
inline ::LargestUIntProto* ValueProto::release_uint_value() {
  // @@protoc_insertion_point(field_release:ValueProto.uint_value)
  if (_internal_has_uint_value()) {
    clear_has_value();
    ::LargestUIntProto* temp = value_.uint_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uint_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LargestUIntProto& ValueProto::_internal_uint_value() const {
  return _internal_has_uint_value()
      ? *value_.uint_value_
      : reinterpret_cast< ::LargestUIntProto&>(::_LargestUIntProto_default_instance_);
}
inline const ::LargestUIntProto& ValueProto::uint_value() const {
  // @@protoc_insertion_point(field_get:ValueProto.uint_value)
  return _internal_uint_value();
}
inline ::LargestUIntProto* ValueProto::unsafe_arena_release_uint_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ValueProto.uint_value)
  if (_internal_has_uint_value()) {
    clear_has_value();
    ::LargestUIntProto* temp = value_.uint_value_;
    value_.uint_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_uint_value(::LargestUIntProto* uint_value) {
  clear_value();
  if (uint_value) {
    set_has_uint_value();
    value_.uint_value_ = uint_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ValueProto.uint_value)
}
inline ::LargestUIntProto* ValueProto::_internal_mutable_uint_value() {
  if (!_internal_has_uint_value()) {
    clear_value();
    set_has_uint_value();
    value_.uint_value_ = CreateMaybeMessage< ::LargestUIntProto >(GetArenaForAllocation());
  }
  return value_.uint_value_;
}
inline ::LargestUIntProto* ValueProto::mutable_uint_value() {
  ::LargestUIntProto* _msg = _internal_mutable_uint_value();
  // @@protoc_insertion_point(field_mutable:ValueProto.uint_value)
  return _msg;
}

// double real_value = 3;
inline bool ValueProto::_internal_has_real_value() const {
  return value_case() == kRealValue;
}
inline bool ValueProto::has_real_value() const {
  return _internal_has_real_value();
}
inline void ValueProto::set_has_real_value() {
  _oneof_case_[0] = kRealValue;
}
inline void ValueProto::clear_real_value() {
  if (_internal_has_real_value()) {
    value_.real_value_ = 0;
    clear_has_value();
  }
}
inline double ValueProto::_internal_real_value() const {
  if (_internal_has_real_value()) {
    return value_.real_value_;
  }
  return 0;
}
inline void ValueProto::_internal_set_real_value(double value) {
  if (!_internal_has_real_value()) {
    clear_value();
    set_has_real_value();
  }
  value_.real_value_ = value;
}
inline double ValueProto::real_value() const {
  // @@protoc_insertion_point(field_get:ValueProto.real_value)
  return _internal_real_value();
}
inline void ValueProto::set_real_value(double value) {
  _internal_set_real_value(value);
  // @@protoc_insertion_point(field_set:ValueProto.real_value)
}

// bool bool_value = 4;
inline bool ValueProto::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool ValueProto::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void ValueProto::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void ValueProto::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ValueProto::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void ValueProto::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
}
inline bool ValueProto::bool_value() const {
  // @@protoc_insertion_point(field_get:ValueProto.bool_value)
  return _internal_bool_value();
}
inline void ValueProto::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:ValueProto.bool_value)
}

// string string_value = 5;
inline bool ValueProto::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool ValueProto::has_string_value() const {
  return _internal_has_string_value();
}
inline void ValueProto::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void ValueProto::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ValueProto::string_value() const {
  // @@protoc_insertion_point(field_get:ValueProto.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void ValueProto::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.InitDefault();
  }
  value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ValueProto.string_value)
}
inline std::string* ValueProto::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:ValueProto.string_value)
  return _s;
}
inline const std::string& ValueProto::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.InitDefault();
  }
  value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ValueProto::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.InitDefault();
  }
  return value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ValueProto::release_string_value() {
  // @@protoc_insertion_point(field_release:ValueProto.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ValueProto::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:ValueProto.string_value)
}

// .ObjectValuesProto map_value = 6;
inline bool ValueProto::_internal_has_map_value() const {
  return value_case() == kMapValue;
}
inline bool ValueProto::has_map_value() const {
  return _internal_has_map_value();
}
inline void ValueProto::set_has_map_value() {
  _oneof_case_[0] = kMapValue;
}
inline void ValueProto::clear_map_value() {
  if (_internal_has_map_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.map_value_;
    }
    clear_has_value();
  }
}
inline ::ObjectValuesProto* ValueProto::release_map_value() {
  // @@protoc_insertion_point(field_release:ValueProto.map_value)
  if (_internal_has_map_value()) {
    clear_has_value();
    ::ObjectValuesProto* temp = value_.map_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.map_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ObjectValuesProto& ValueProto::_internal_map_value() const {
  return _internal_has_map_value()
      ? *value_.map_value_
      : reinterpret_cast< ::ObjectValuesProto&>(::_ObjectValuesProto_default_instance_);
}
inline const ::ObjectValuesProto& ValueProto::map_value() const {
  // @@protoc_insertion_point(field_get:ValueProto.map_value)
  return _internal_map_value();
}
inline ::ObjectValuesProto* ValueProto::unsafe_arena_release_map_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ValueProto.map_value)
  if (_internal_has_map_value()) {
    clear_has_value();
    ::ObjectValuesProto* temp = value_.map_value_;
    value_.map_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_map_value(::ObjectValuesProto* map_value) {
  clear_value();
  if (map_value) {
    set_has_map_value();
    value_.map_value_ = map_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ValueProto.map_value)
}
inline ::ObjectValuesProto* ValueProto::_internal_mutable_map_value() {
  if (!_internal_has_map_value()) {
    clear_value();
    set_has_map_value();
    value_.map_value_ = CreateMaybeMessage< ::ObjectValuesProto >(GetArenaForAllocation());
  }
  return value_.map_value_;
}
inline ::ObjectValuesProto* ValueProto::mutable_map_value() {
  ::ObjectValuesProto* _msg = _internal_mutable_map_value();
  // @@protoc_insertion_point(field_mutable:ValueProto.map_value)
  return _msg;
}

// .BitsProto bits = 7;
inline bool ValueProto::_internal_has_bits() const {
  return this != internal_default_instance() && bits_ != nullptr;
}
inline bool ValueProto::has_bits() const {
  return _internal_has_bits();
}
inline void ValueProto::clear_bits() {
  if (GetArenaForAllocation() == nullptr && bits_ != nullptr) {
    delete bits_;
  }
  bits_ = nullptr;
}
inline const ::BitsProto& ValueProto::_internal_bits() const {
  const ::BitsProto* p = bits_;
  return p != nullptr ? *p : reinterpret_cast<const ::BitsProto&>(
      ::_BitsProto_default_instance_);
}
inline const ::BitsProto& ValueProto::bits() const {
  // @@protoc_insertion_point(field_get:ValueProto.bits)
  return _internal_bits();
}
inline void ValueProto::unsafe_arena_set_allocated_bits(
    ::BitsProto* bits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bits_);
  }
  bits_ = bits;
  if (bits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ValueProto.bits)
}
inline ::BitsProto* ValueProto::release_bits() {
  
  ::BitsProto* temp = bits_;
  bits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BitsProto* ValueProto::unsafe_arena_release_bits() {
  // @@protoc_insertion_point(field_release:ValueProto.bits)
  
  ::BitsProto* temp = bits_;
  bits_ = nullptr;
  return temp;
}
inline ::BitsProto* ValueProto::_internal_mutable_bits() {
  
  if (bits_ == nullptr) {
    auto* p = CreateMaybeMessage<::BitsProto>(GetArenaForAllocation());
    bits_ = p;
  }
  return bits_;
}
inline ::BitsProto* ValueProto::mutable_bits() {
  ::BitsProto* _msg = _internal_mutable_bits();
  // @@protoc_insertion_point(field_mutable:ValueProto.bits)
  return _msg;
}
inline void ValueProto::set_allocated_bits(::BitsProto* bits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bits_;
  }
  if (bits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bits);
    if (message_arena != submessage_arena) {
      bits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bits, submessage_arena);
    }
    
  } else {
    
  }
  bits_ = bits;
  // @@protoc_insertion_point(field_set_allocated:ValueProto.bits)
}

// .CommentsProto comments = 8;
inline bool ValueProto::_internal_has_comments() const {
  return this != internal_default_instance() && comments_ != nullptr;
}
inline bool ValueProto::has_comments() const {
  return _internal_has_comments();
}
inline void ValueProto::clear_comments() {
  if (GetArenaForAllocation() == nullptr && comments_ != nullptr) {
    delete comments_;
  }
  comments_ = nullptr;
}
inline const ::CommentsProto& ValueProto::_internal_comments() const {
  const ::CommentsProto* p = comments_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommentsProto&>(
      ::_CommentsProto_default_instance_);
}
inline const ::CommentsProto& ValueProto::comments() const {
  // @@protoc_insertion_point(field_get:ValueProto.comments)
  return _internal_comments();
}
inline void ValueProto::unsafe_arena_set_allocated_comments(
    ::CommentsProto* comments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comments_);
  }
  comments_ = comments;
  if (comments) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ValueProto.comments)
}
inline ::CommentsProto* ValueProto::release_comments() {
  
  ::CommentsProto* temp = comments_;
  comments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CommentsProto* ValueProto::unsafe_arena_release_comments() {
  // @@protoc_insertion_point(field_release:ValueProto.comments)
  
  ::CommentsProto* temp = comments_;
  comments_ = nullptr;
  return temp;
}
inline ::CommentsProto* ValueProto::_internal_mutable_comments() {
  
  if (comments_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommentsProto>(GetArenaForAllocation());
    comments_ = p;
  }
  return comments_;
}
inline ::CommentsProto* ValueProto::mutable_comments() {
  ::CommentsProto* _msg = _internal_mutable_comments();
  // @@protoc_insertion_point(field_mutable:ValueProto.comments)
  return _msg;
}
inline void ValueProto::set_allocated_comments(::CommentsProto* comments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete comments_;
  }
  if (comments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(comments);
    if (message_arena != submessage_arena) {
      comments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comments, submessage_arena);
    }
    
  } else {
    
  }
  comments_ = comments;
  // @@protoc_insertion_point(field_set_allocated:ValueProto.comments)
}

// int64 start = 9;
inline void ValueProto::clear_start() {
  start_ = int64_t{0};
}
inline int64_t ValueProto::_internal_start() const {
  return start_;
}
inline int64_t ValueProto::start() const {
  // @@protoc_insertion_point(field_get:ValueProto.start)
  return _internal_start();
}
inline void ValueProto::_internal_set_start(int64_t value) {
  
  start_ = value;
}
inline void ValueProto::set_start(int64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:ValueProto.start)
}

// int64 limit = 10;
inline void ValueProto::clear_limit() {
  limit_ = int64_t{0};
}
inline int64_t ValueProto::_internal_limit() const {
  return limit_;
}
inline int64_t ValueProto::limit() const {
  // @@protoc_insertion_point(field_get:ValueProto.limit)
  return _internal_limit();
}
inline void ValueProto::_internal_set_limit(int64_t value) {
  
  limit_ = value;
}
inline void ValueProto::set_limit(int64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:ValueProto.limit)
}

inline bool ValueProto::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ValueProto::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ValueProto::ValueCase ValueProto::value_case() const {
  return ValueProto::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommentsProto

// .ArrayProto array = 1;
inline bool CommentsProto::_internal_has_array() const {
  return this != internal_default_instance() && array_ != nullptr;
}
inline bool CommentsProto::has_array() const {
  return _internal_has_array();
}
inline void CommentsProto::clear_array() {
  if (GetArenaForAllocation() == nullptr && array_ != nullptr) {
    delete array_;
  }
  array_ = nullptr;
}
inline const ::ArrayProto& CommentsProto::_internal_array() const {
  const ::ArrayProto* p = array_;
  return p != nullptr ? *p : reinterpret_cast<const ::ArrayProto&>(
      ::_ArrayProto_default_instance_);
}
inline const ::ArrayProto& CommentsProto::array() const {
  // @@protoc_insertion_point(field_get:CommentsProto.array)
  return _internal_array();
}
inline void CommentsProto::unsafe_arena_set_allocated_array(
    ::ArrayProto* array) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(array_);
  }
  array_ = array;
  if (array) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommentsProto.array)
}
inline ::ArrayProto* CommentsProto::release_array() {
  
  ::ArrayProto* temp = array_;
  array_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ArrayProto* CommentsProto::unsafe_arena_release_array() {
  // @@protoc_insertion_point(field_release:CommentsProto.array)
  
  ::ArrayProto* temp = array_;
  array_ = nullptr;
  return temp;
}
inline ::ArrayProto* CommentsProto::_internal_mutable_array() {
  
  if (array_ == nullptr) {
    auto* p = CreateMaybeMessage<::ArrayProto>(GetArenaForAllocation());
    array_ = p;
  }
  return array_;
}
inline ::ArrayProto* CommentsProto::mutable_array() {
  ::ArrayProto* _msg = _internal_mutable_array();
  // @@protoc_insertion_point(field_mutable:CommentsProto.array)
  return _msg;
}
inline void CommentsProto::set_allocated_array(::ArrayProto* array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete array_;
  }
  if (array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(array);
    if (message_arena != submessage_arena) {
      array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array, submessage_arena);
    }
    
  } else {
    
  }
  array_ = array;
  // @@protoc_insertion_point(field_set_allocated:CommentsProto.array)
}

// -------------------------------------------------------------------

// ArrayProto

// repeated .ValueProto values = 1;
inline int ArrayProto::_internal_values_size() const {
  return values_.size();
}
inline int ArrayProto::values_size() const {
  return _internal_values_size();
}
inline void ArrayProto::clear_values() {
  values_.Clear();
}
inline ::ValueProto* ArrayProto::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:ArrayProto.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValueProto >*
ArrayProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ArrayProto.values)
  return &values_;
}
inline const ::ValueProto& ArrayProto::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::ValueProto& ArrayProto::values(int index) const {
  // @@protoc_insertion_point(field_get:ArrayProto.values)
  return _internal_values(index);
}
inline ::ValueProto* ArrayProto::_internal_add_values() {
  return values_.Add();
}
inline ::ValueProto* ArrayProto::add_values() {
  ::ValueProto* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:ArrayProto.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValueProto >&
ArrayProto::values() const {
  // @@protoc_insertion_point(field_list:ArrayProto.values)
  return values_;
}

// -------------------------------------------------------------------

// BitsProto

// uint32 value_type = 1;
inline void BitsProto::clear_value_type() {
  value_type_ = 0u;
}
inline uint32_t BitsProto::_internal_value_type() const {
  return value_type_;
}
inline uint32_t BitsProto::value_type() const {
  // @@protoc_insertion_point(field_get:BitsProto.value_type)
  return _internal_value_type();
}
inline void BitsProto::_internal_set_value_type(uint32_t value) {
  
  value_type_ = value;
}
inline void BitsProto::set_value_type(uint32_t value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:BitsProto.value_type)
}

// uint32 allocated = 2;
inline void BitsProto::clear_allocated() {
  allocated_ = 0u;
}
inline uint32_t BitsProto::_internal_allocated() const {
  return allocated_;
}
inline uint32_t BitsProto::allocated() const {
  // @@protoc_insertion_point(field_get:BitsProto.allocated)
  return _internal_allocated();
}
inline void BitsProto::_internal_set_allocated(uint32_t value) {
  
  allocated_ = value;
}
inline void BitsProto::set_allocated(uint32_t value) {
  _internal_set_allocated(value);
  // @@protoc_insertion_point(field_set:BitsProto.allocated)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ObjectValuesProto

// map<string, .ValueProto> values = 1;
inline int ObjectValuesProto::_internal_values_size() const {
  return values_.size();
}
inline int ObjectValuesProto::values_size() const {
  return _internal_values_size();
}
inline void ObjectValuesProto::clear_values() {
  values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueProto >&
ObjectValuesProto::_internal_values() const {
  return values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueProto >&
ObjectValuesProto::values() const {
  // @@protoc_insertion_point(field_map:ObjectValuesProto.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueProto >*
ObjectValuesProto::_internal_mutable_values() {
  return values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueProto >*
ObjectValuesProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:ObjectValuesProto.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// LargestIntProto

// int64 value = 1;
inline void LargestIntProto::clear_value() {
  value_ = int64_t{0};
}
inline int64_t LargestIntProto::_internal_value() const {
  return value_;
}
inline int64_t LargestIntProto::value() const {
  // @@protoc_insertion_point(field_get:LargestIntProto.value)
  return _internal_value();
}
inline void LargestIntProto::_internal_set_value(int64_t value) {
  
  value_ = value;
}
inline void LargestIntProto::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:LargestIntProto.value)
}

// -------------------------------------------------------------------

// LargestUIntProto

// uint64 value = 1;
inline void LargestUIntProto::clear_value() {
  value_ = uint64_t{0u};
}
inline uint64_t LargestUIntProto::_internal_value() const {
  return value_;
}
inline uint64_t LargestUIntProto::value() const {
  // @@protoc_insertion_point(field_get:LargestUIntProto.value)
  return _internal_value();
}
inline void LargestUIntProto::_internal_set_value(uint64_t value) {
  
  value_ = value;
}
inline void LargestUIntProto::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:LargestUIntProto.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2eproto
