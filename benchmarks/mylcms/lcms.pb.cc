// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lcms.proto

#include "lcms.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR tmStructProto::tmStructProto(
    ::_pbi::ConstantInitialized)
  : tm_sec_(0)
  , tm_min_(0)
  , tm_hour_(0)
  , tm_mday_(0)
  , tm_mon_(0)
  , tm_year_(0)
  , tm_wday_(0)
  , tm_yday_(0)
  , tm_isdst_(0){}
struct tmStructProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR tmStructProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~tmStructProtoDefaultTypeInternal() {}
  union {
    tmStructProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 tmStructProtoDefaultTypeInternal _tmStructProto_default_instance_;
PROTOBUF_CONSTEXPR cmsProfileIDProto::cmsProfileIDProto(
    ::_pbi::ConstantInitialized)
  : id32_()
  , _id32_cached_byte_size_(0){}
struct cmsProfileIDProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR cmsProfileIDProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~cmsProfileIDProtoDefaultTypeInternal() {}
  union {
    cmsProfileIDProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 cmsProfileIDProtoDefaultTypeInternal _cmsProfileIDProto_default_instance_;
PROTOBUF_CONSTEXPR cmsICCPROFILEProto::cmsICCPROFILEProto(
    ::_pbi::ConstantInitialized)
  : tagnames_()
  , _tagnames_cached_byte_size_(0)
  , taglinked_()
  , _taglinked_cached_byte_size_(0)
  , tagsizes_()
  , _tagsizes_cached_byte_size_(0)
  , tagoffsets_()
  , _tagoffsets_cached_byte_size_(0)
  , tagsaveasraw_()
  , _tagsaveasraw_cached_byte_size_(0)
  , tag_ptrs_()
  , created_(nullptr)
  , profileid_(nullptr)
  , cmm_(0u)
  , version_(0u)
  , deviceclass_(0)

  , colorspace_(0)

  , pcs_(0)

  , renderingintent_(0u)
  , platform_(0)

  , flags_(0u)
  , manufacturer_(0u)
  , model_(0u)
  , attributes_(uint64_t{0u})
  , creator_(0u)
  , tagcount_(0u){}
struct cmsICCPROFILEProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR cmsICCPROFILEProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~cmsICCPROFILEProtoDefaultTypeInternal() {}
  union {
    cmsICCPROFILEProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 cmsICCPROFILEProtoDefaultTypeInternal _cmsICCPROFILEProto_default_instance_;
static ::_pb::Metadata file_level_metadata_lcms_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_lcms_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_lcms_2eproto = nullptr;

const uint32_t TableStruct_lcms_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tmStructProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tmStructProto, tm_sec_),
  PROTOBUF_FIELD_OFFSET(::tmStructProto, tm_min_),
  PROTOBUF_FIELD_OFFSET(::tmStructProto, tm_hour_),
  PROTOBUF_FIELD_OFFSET(::tmStructProto, tm_mday_),
  PROTOBUF_FIELD_OFFSET(::tmStructProto, tm_mon_),
  PROTOBUF_FIELD_OFFSET(::tmStructProto, tm_year_),
  PROTOBUF_FIELD_OFFSET(::tmStructProto, tm_wday_),
  PROTOBUF_FIELD_OFFSET(::tmStructProto, tm_yday_),
  PROTOBUF_FIELD_OFFSET(::tmStructProto, tm_isdst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cmsProfileIDProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cmsProfileIDProto, id32_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, created_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, cmm_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, version_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, deviceclass_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, colorspace_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, pcs_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, renderingintent_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, platform_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, flags_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, model_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, attributes_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, creator_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, profileid_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, tagcount_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, tagnames_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, taglinked_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, tagsizes_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, tagoffsets_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, tagsaveasraw_),
  PROTOBUF_FIELD_OFFSET(::cmsICCPROFILEProto, tag_ptrs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tmStructProto)},
  { 15, -1, -1, sizeof(::cmsProfileIDProto)},
  { 22, -1, -1, sizeof(::cmsICCPROFILEProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_tmStructProto_default_instance_._instance,
  &::_cmsProfileIDProto_default_instance_._instance,
  &::_cmsICCPROFILEProto_default_instance_._instance,
};

const char descriptor_table_protodef_lcms_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nlcms.proto\"\246\001\n\rtmStructProto\022\016\n\006tm_sec"
  "\030\001 \001(\005\022\016\n\006tm_min\030\002 \001(\005\022\017\n\007tm_hour\030\003 \001(\005\022"
  "\017\n\007tm_mday\030\004 \001(\005\022\016\n\006tm_mon\030\005 \001(\005\022\017\n\007tm_y"
  "ear\030\006 \001(\005\022\017\n\007tm_wday\030\007 \001(\005\022\017\n\007tm_yday\030\010 "
  "\001(\005\022\020\n\010tm_isdst\030\t \001(\005\"!\n\021cmsProfileIDPro"
  "to\022\014\n\004id32\030\001 \003(\r\"\337\004\n\022cmsICCPROFILEProto\022"
  "\037\n\007Created\030\003 \001(\0132\016.tmStructProto\022\013\n\003CMM\030"
  "\004 \001(\r\022\017\n\007Version\030\005 \001(\r\0223\n\013DeviceClass\030\006 "
  "\001(\0162\036.cmsProfileClassSignatureProto\0220\n\nC"
  "olorSpace\030\007 \001(\0162\034.cmsColorSpaceSignature"
  "Proto\022)\n\003PCS\030\010 \001(\0162\034.cmsColorSpaceSignat"
  "ureProto\022\027\n\017RenderingIntent\030\t \001(\r\022,\n\010pla"
  "tform\030\n \001(\0162\032.cmsPlatformSignatureProto\022"
  "\r\n\005flags\030\013 \001(\r\022\024\n\014manufacturer\030\014 \001(\r\022\r\n\005"
  "model\030\r \001(\r\022\022\n\nattributes\030\016 \001(\004\022\017\n\007creat"
  "or\030\017 \001(\r\022%\n\tProfileID\030\020 \001(\0132\022.cmsProfile"
  "IDProto\022\020\n\010TagCount\030\021 \001(\r\022\'\n\010TagNames\030\022 "
  "\003(\0162\025.cmsTagSignatureProto\022(\n\tTagLinked\030"
  "\023 \003(\0162\025.cmsTagSignatureProto\022\020\n\010TagSizes"
  "\030\024 \003(\r\022\022\n\nTagOffsets\030\025 \003(\r\022\024\n\014TagSaveAsR"
  "aw\030\026 \003(\005\022\020\n\010tag_ptrs\030\027 \003(\014*\252\021\n\024cmsTagSig"
  "natureProto\022\032\n\026CMSTagSignatureUnKnown\020\000\022"
  "\026\n\016CMSSigAToB0Tag\020\260\204\311\211\004\022\026\n\016CMSSigAToB1Ta"
  "g\020\261\204\311\211\004\022\026\n\016CMSSigAToB2Tag\020\262\204\311\211\004\022\035\n\025CMSSi"
  "gBlueColorantTag\020\332\262\341\222\006\022!\n\031CMSSigBlueMatr"
  "ixColumnTag\020\332\262\341\222\006\022\030\n\020CMSSigBlueTRCTag\020\303\244"
  "\321\222\006\022\026\n\016CMSSigBToA0Tag\020\260\202\311\221\004\022\026\n\016CMSSigBTo"
  "A1Tag\020\261\202\311\221\004\022\026\n\016CMSSigBToA2Tag\020\262\202\311\221\004\022$\n\034C"
  "MSSigCalibrationDateTimeTag\020\364\330\205\233\006\022\033\n\023CMS"
  "SigCharTargetTag\020\347\344\205\243\007\022$\n\034CMSSigChromati"
  "cAdaptationTag\020\344\302\241\233\006\022\035\n\025CMSSigChromatici"
  "tyTag\020\355\344\241\233\006\022\036\n\026CMSSigColorantOrderTag\020\357\344"
  "\261\233\006\022\036\n\026CMSSigColorantTableTag\020\364\344\261\233\006\022!\n\031C"
  "MSSigColorantTableOutTag\020\364\336\261\233\006\022-\n%CMSSig"
  "ColorimetricIntentImageStateTag\020\363\322\245\233\006\022\032\n"
  "\022CMSSigCopyrightTag\020\364\344\301\233\006\022\030\n\020CMSSigCrdIn"
  "foTag\020\351\310\311\233\006\022\025\n\rCMSSigDataTag\020\341\350\205\243\006\022\031\n\021CM"
  "SSigDateTimeTag\020\355\322\321\243\006\022\036\n\026CMSSigDeviceMfg"
  "DescTag\020\344\334\265\243\006\022 \n\030CMSSigDeviceModelDescTa"
  "g\020\344\310\265\243\006\022\037\n\027CMSSigDeviceSettingsTag\020\363\354\225\243\006"
  "\022\026\n\016CMSSigDToB0Tag\020\260\204\311\241\004\022\026\n\016CMSSigDToB1T"
  "ag\020\261\204\311\241\004\022\026\n\016CMSSigDToB2Tag\020\262\204\311\241\004\022\026\n\016CMSS"
  "igDToB3Tag\020\263\204\311\241\004\022\026\n\016CMSSigBToD0Tag\020\260\210\311\221\004"
  "\022\026\n\016CMSSigBToD1Tag\020\261\210\311\221\004\022\026\n\016CMSSigBToD2T"
  "ag\020\262\210\311\221\004\022\026\n\016CMSSigBToD3Tag\020\263\210\311\221\004\022\026\n\016CMSS"
  "igGamutTag\020\364\332\205\273\006\022\030\n\020CMSSigGrayTRCTag\020\303\244\321"
  "\332\006\022\036\n\026CMSSigGreenColorantTag\020\332\262\341\272\006\022\"\n\032CM"
  "SSigGreenMatrixColumnTag\020\332\262\341\272\006\022\031\n\021CMSSig"
  "GreenTRCTag\020\303\244\321\272\006\022\032\n\022CMSSigLuminanceTag\020"
  "\351\332\325\343\006\022\034\n\024CMSSigMeasurementTag\020\363\302\225\353\006\022 \n\030C"
  "MSSigMediaBlackPointTag\020\364\340\255\223\006\022 \n\030CMSSigM"
  "ediaWhitePointTag\020\364\340\321\273\007\022\033\n\023CMSSigNamedCo"
  "lorTag\020\354\336\215\363\006\022\034\n\024CMSSigNamedColor2Tag\020\262\330\215"
  "\363\006\022\037\n\027CMSSigOutputResponseTag\020\360\346\225\223\007\022/\n\'C"
  "MSSigPerceptualRenderingIntentGamutTag\020\260"
  "\316\245\223\007\022\031\n\021CMSSigPreview0Tag\020\260\312\311\203\007\022\031\n\021CMSSi"
  "gPreview1Tag\020\261\312\311\203\007\022\031\n\021CMSSigPreview2Tag\020"
  "\262\312\311\203\007\022#\n\033CMSSigProfileDescriptionTag\020\343\346\225"
  "\243\006\022%\n\035CMSSigProfileDescriptionMLTag\020\355\306\315\243"
  "\006\022$\n\034CMSSigProfileSequenceDescTag\020\361\312\315\203\007\022"
  "\"\n\032CMSSigProfileSequenceIdTag\020\344\322\315\203\007\022\030\n\020C"
  "MSSigPs2CRD0Tag\020\260\310\315\203\007\022\030\n\020CMSSigPs2CRD1Ta"
  "g\020\261\310\315\203\007\022\030\n\020CMSSigPs2CRD2Tag\020\262\310\315\203\007\022\030\n\020CMS"
  "SigPs2CRD3Tag\020\263\310\315\203\007\022\027\n\017CMSSigPs2CSATag\020\363"
  "\344\314\203\007\022#\n\033CMSSigPs2RenderingIntentTag\020\351\344\314\203"
  "\007\022\034\n\024CMSSigRedColorantTag\020\332\262\341\222\007\022 \n\030CMSSi"
  "gRedMatrixColumnTag\020\332\262\341\222\007\022\027\n\017CMSSigRedTR"
  "CTag\020\303\244\321\222\007\022/\n\'CMSSigSaturationRenderingI"
  "ntentGamutTag\020\262\316\245\223\007\022\036\n\026CMSSigScreeningDe"
  "scTag\020\344\344\215\233\007\022\032\n\022CMSSigScreeningTag\020\356\344\215\233\007\022"
  "\033\n\023CMSSigTechnologyTag\020\350\306\225\243\007\022\026\n\016CMSSigUc"
  "rBgTag\020\240\310\231\223\006\022 \n\030CMSSigViewingCondDescTag"
  "\020\344\312\325\263\007\022\"\n\032CMSSigViewingConditionsTag\020\367\312\245"
  "\263\007\022\025\n\rCMSSigVcgtTag\020\364\316\215\263\007\022\025\n\rCMSSigMetaT"
  "ag\020\341\350\225\353\006\022\025\n\rCMSSigcicpTag\020\360\306\245\233\006\022\033\n\023CMSSi"
  "gArgyllArtsTag\020\363\350\311\213\006\022\025\n\rCMSSigMHC2Tag\020\262\206"
  "\241\352\004\032\002\020\001*\211\002\n\035cmsProfileClassSignatureProt"
  "o\022#\n\037CMSProfileClassSignatureUnKnown\020\000\022\030"
  "\n\020CMSSigInputClass\020\362\334\215\233\007\022\032\n\022CMSSigDispla"
  "yClass\020\362\350\271\353\006\022\031\n\021CMSSigOutputClass\020\362\350\311\203\007\022"
  "\027\n\017CMSSigLinkClass\020\353\334\245\343\006\022\033\n\023CMSSigAbstra"
  "ctClass\020\364\346\211\213\006\022\035\n\025CMSSigColorSpaceClass\020\343"
  "\302\301\233\007\022\035\n\025CMSSigNamedColorClass\020\354\306\265\363\006*\346\010\n\033"
  "cmsColorSpaceSignatureProto\022!\n\035CMSColorS"
  "paceSignatureUnKnown\020\000\022\025\n\rCMSSigXYZData\020"
  "\240\264\345\302\005\022\025\n\rCMSSigLabData\020\240\304\205\343\004\022\025\n\rCMSSigLu"
  "vData\020\240\354\325\343\004\022\027\n\017CMSSigYCbCrData\020\362\304\215\312\005\022\025\n\r"
  "CMSSigYxyData\020\240\362\341\313\005\022\025\n\rCMSSigRgbData\020\240\204\235"
  "\222\005\022\026\n\016CMSSigGrayData\020\331\202\311\272\004\022\025\n\rCMSSigHsvD"
  "ata\020\240\254\315\302\004\022\025\n\rCMSSigHlsData\020\240\246\261\302\004\022\026\n\016CMSS"
  "igCmykData\020\313\262\265\232\004\022\025\n\rCMSSigCmyData\020\240\262\265\232\004\022"
  "\026\n\016CMSSigMCH1Data\020\261\220\215\352\004\022\026\n\016CMSSigMCH2Dat"
  "a\020\262\220\215\352\004\022\026\n\016CMSSigMCH3Data\020\263\220\215\352\004\022\026\n\016CMSSi"
  "gMCH4Data\020\264\220\215\352\004\022\026\n\016CMSSigMCH5Data\020\265\220\215\352\004\022"
  "\026\n\016CMSSigMCH6Data\020\266\220\215\352\004\022\026\n\016CMSSigMCH7Dat"
  "a\020\267\220\215\352\004\022\026\n\016CMSSigMCH8Data\020\270\220\215\352\004\022\026\n\016CMSSi"
  "gMCH9Data\020\271\220\215\352\004\022\026\n\016CMSSigMCHAData\020\301\220\215\352\004\022"
  "\026\n\016CMSSigMCHBData\020\302\220\215\352\004\022\026\n\016CMSSigMCHCDat"
  "a\020\303\220\215\352\004\022\026\n\016CMSSigMCHDData\020\304\220\215\352\004\022\026\n\016CMSSi"
  "gMCHEData\020\305\220\215\352\004\022\026\n\016CMSSigMCHFData\020\306\220\215\352\004\022"
  "\027\n\017CMSSigNamedData\020\354\306\265\363\006\022\030\n\020CMSSig1color"
  "Data\020\322\230\215\212\003\022\030\n\020CMSSig2colorData\020\322\230\215\222\003\022\030\n\020"
  "CMSSig3colorData\020\322\230\215\232\003\022\030\n\020CMSSig4colorDa"
  "ta\020\322\230\215\242\003\022\030\n\020CMSSig5colorData\020\322\230\215\252\003\022\030\n\020CM"
  "SSig6colorData\020\322\230\215\262\003\022\030\n\020CMSSig7colorData"
  "\020\322\230\215\272\003\022\030\n\020CMSSig8colorData\020\322\230\215\302\003\022\030\n\020CMSS"
  "ig9colorData\020\322\230\215\312\003\022\031\n\021CMSSig10colorData\020"
  "\322\230\215\212\004\022\031\n\021CMSSig11colorData\020\322\230\215\222\004\022\031\n\021CMSS"
  "ig12colorData\020\322\230\215\232\004\022\031\n\021CMSSig13colorData"
  "\020\322\230\215\242\004\022\031\n\021CMSSig14colorData\020\322\230\215\252\004\022\031\n\021CMS"
  "Sig15colorData\020\322\230\215\262\004\022\026\n\016CMSSigLuvKData\020\313"
  "\354\325\343\004*\306\001\n\031cmsPlatformSignatureProto\022\037\n\033CM"
  "SPlatformSignatureUnKnown\020\000\022\027\n\017CMSSigMac"
  "intosh\020\314\240\301\212\004\022\027\n\017CMSSigMicrosoft\020\324\214\315\352\004\022\025\n"
  "\rCMSSigSolaris\020\327\234\325\232\005\022\021\n\tCMSSigSGI\020\240\222\235\232\005\022"
  "\026\n\016CMSSigTaligent\020\324\234\235\242\005\022\024\n\014CMSSigUnices\020"
  "\370\322\271\323\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_lcms_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_lcms_2eproto = {
    false, false, 4653, descriptor_table_protodef_lcms_2eproto,
    "lcms.proto",
    &descriptor_table_lcms_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_lcms_2eproto::offsets,
    file_level_metadata_lcms_2eproto, file_level_enum_descriptors_lcms_2eproto,
    file_level_service_descriptors_lcms_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_lcms_2eproto_getter() {
  return &descriptor_table_lcms_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_lcms_2eproto(&descriptor_table_lcms_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* cmsTagSignatureProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lcms_2eproto);
  return file_level_enum_descriptors_lcms_2eproto[0];
}
bool cmsTagSignatureProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1093812784:
    case 1093812785:
    case 1093812786:
    case 1110589744:
    case 1110589745:
    case 1110589746:
    case 1110590512:
    case 1110590513:
    case 1110590514:
    case 1110590515:
    case 1144144432:
    case 1144144433:
    case 1144144434:
    case 1144144435:
    case 1296581426:
    case 1634890867:
    case 1649693251:
    case 1649957210:
    case 1650877472:
    case 1651208308:
    case 1667329140:
    case 1667785060:
    case 1667789421:
    case 1667851120:
    case 1667852659:
    case 1668050804:
    case 1668051567:
    case 1668051572:
    case 1668313716:
    case 1668441193:
    case 1684108385:
    case 1684370275:
    case 1684371059:
    case 1684890724:
    case 1684893284:
    case 1685283693:
    case 1685350765:
    case 1733579331:
    case 1733843290:
    case 1734438260:
    case 1800688195:
    case 1819635049:
    case 1835360627:
    case 1835365473:
    case 1852009522:
    case 1852010348:
    case 1886545200:
    case 1886545201:
    case 1886545202:
    case 1886597737:
    case 1886597747:
    case 1886610480:
    case 1886610481:
    case 1886610482:
    case 1886610483:
    case 1886610801:
    case 1886611812:
    case 1918128707:
    case 1918392666:
    case 1919251312:
    case 1919510320:
    case 1919510322:
    case 1935897188:
    case 1935897198:
    case 1952543335:
    case 1952801640:
    case 1986226036:
    case 1986618743:
    case 1987405156:
    case 2004119668:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* cmsProfileClassSignatureProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lcms_2eproto);
  return file_level_enum_descriptors_lcms_2eproto[1];
}
bool cmsProfileClassSignatureProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1633842036:
    case 1818848875:
    case 1835955314:
    case 1852662636:
    case 1886549106:
    case 1935896178:
    case 1936744803:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* cmsColorSpaceSignatureProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lcms_2eproto);
  return file_level_enum_descriptors_lcms_2eproto[2];
}
bool cmsColorSpaceSignatureProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 826494034:
    case 843271250:
    case 860048466:
    case 876825682:
    case 893602898:
    case 910380114:
    case 927157330:
    case 943934546:
    case 960711762:
    case 1094929490:
    case 1111706706:
    case 1128483922:
    case 1129142560:
    case 1129142603:
    case 1145261138:
    case 1162038354:
    case 1178815570:
    case 1196573017:
    case 1212961568:
    case 1213421088:
    case 1281450528:
    case 1282766368:
    case 1282766411:
    case 1296255025:
    case 1296255026:
    case 1296255027:
    case 1296255028:
    case 1296255029:
    case 1296255030:
    case 1296255031:
    case 1296255032:
    case 1296255033:
    case 1296255041:
    case 1296255042:
    case 1296255043:
    case 1296255044:
    case 1296255045:
    case 1296255046:
    case 1380401696:
    case 1482250784:
    case 1497588338:
    case 1501067552:
    case 1852662636:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* cmsPlatformSignatureProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lcms_2eproto);
  return file_level_enum_descriptors_lcms_2eproto[3];
}
bool cmsPlatformSignatureProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 711879032:
    case 1095782476:
    case 1297303124:
    case 1397180704:
    case 1398099543:
    case 1413959252:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class tmStructProto::_Internal {
 public:
};

tmStructProto::tmStructProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tmStructProto)
}
tmStructProto::tmStructProto(const tmStructProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tm_sec_, &from.tm_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&tm_isdst_) -
    reinterpret_cast<char*>(&tm_sec_)) + sizeof(tm_isdst_));
  // @@protoc_insertion_point(copy_constructor:tmStructProto)
}

inline void tmStructProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tm_sec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tm_isdst_) -
    reinterpret_cast<char*>(&tm_sec_)) + sizeof(tm_isdst_));
}

tmStructProto::~tmStructProto() {
  // @@protoc_insertion_point(destructor:tmStructProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void tmStructProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void tmStructProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void tmStructProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tmStructProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tm_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tm_isdst_) -
      reinterpret_cast<char*>(&tm_sec_)) + sizeof(tm_isdst_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tmStructProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tm_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tm_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tm_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          tm_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tm_hour = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          tm_hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tm_mday = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          tm_mday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tm_mon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          tm_mon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tm_year = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          tm_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tm_wday = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          tm_wday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tm_yday = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          tm_yday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tm_isdst = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          tm_isdst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* tmStructProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tmStructProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tm_sec = 1;
  if (this->_internal_tm_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tm_sec(), target);
  }

  // int32 tm_min = 2;
  if (this->_internal_tm_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tm_min(), target);
  }

  // int32 tm_hour = 3;
  if (this->_internal_tm_hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tm_hour(), target);
  }

  // int32 tm_mday = 4;
  if (this->_internal_tm_mday() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tm_mday(), target);
  }

  // int32 tm_mon = 5;
  if (this->_internal_tm_mon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_tm_mon(), target);
  }

  // int32 tm_year = 6;
  if (this->_internal_tm_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_tm_year(), target);
  }

  // int32 tm_wday = 7;
  if (this->_internal_tm_wday() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_tm_wday(), target);
  }

  // int32 tm_yday = 8;
  if (this->_internal_tm_yday() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_tm_yday(), target);
  }

  // int32 tm_isdst = 9;
  if (this->_internal_tm_isdst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_tm_isdst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tmStructProto)
  return target;
}

size_t tmStructProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tmStructProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 tm_sec = 1;
  if (this->_internal_tm_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tm_sec());
  }

  // int32 tm_min = 2;
  if (this->_internal_tm_min() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tm_min());
  }

  // int32 tm_hour = 3;
  if (this->_internal_tm_hour() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tm_hour());
  }

  // int32 tm_mday = 4;
  if (this->_internal_tm_mday() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tm_mday());
  }

  // int32 tm_mon = 5;
  if (this->_internal_tm_mon() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tm_mon());
  }

  // int32 tm_year = 6;
  if (this->_internal_tm_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tm_year());
  }

  // int32 tm_wday = 7;
  if (this->_internal_tm_wday() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tm_wday());
  }

  // int32 tm_yday = 8;
  if (this->_internal_tm_yday() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tm_yday());
  }

  // int32 tm_isdst = 9;
  if (this->_internal_tm_isdst() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tm_isdst());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData tmStructProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    tmStructProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*tmStructProto::GetClassData() const { return &_class_data_; }

void tmStructProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<tmStructProto *>(to)->MergeFrom(
      static_cast<const tmStructProto &>(from));
}


void tmStructProto::MergeFrom(const tmStructProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tmStructProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tm_sec() != 0) {
    _internal_set_tm_sec(from._internal_tm_sec());
  }
  if (from._internal_tm_min() != 0) {
    _internal_set_tm_min(from._internal_tm_min());
  }
  if (from._internal_tm_hour() != 0) {
    _internal_set_tm_hour(from._internal_tm_hour());
  }
  if (from._internal_tm_mday() != 0) {
    _internal_set_tm_mday(from._internal_tm_mday());
  }
  if (from._internal_tm_mon() != 0) {
    _internal_set_tm_mon(from._internal_tm_mon());
  }
  if (from._internal_tm_year() != 0) {
    _internal_set_tm_year(from._internal_tm_year());
  }
  if (from._internal_tm_wday() != 0) {
    _internal_set_tm_wday(from._internal_tm_wday());
  }
  if (from._internal_tm_yday() != 0) {
    _internal_set_tm_yday(from._internal_tm_yday());
  }
  if (from._internal_tm_isdst() != 0) {
    _internal_set_tm_isdst(from._internal_tm_isdst());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void tmStructProto::CopyFrom(const tmStructProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tmStructProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tmStructProto::IsInitialized() const {
  return true;
}

void tmStructProto::InternalSwap(tmStructProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(tmStructProto, tm_isdst_)
      + sizeof(tmStructProto::tm_isdst_)
      - PROTOBUF_FIELD_OFFSET(tmStructProto, tm_sec_)>(
          reinterpret_cast<char*>(&tm_sec_),
          reinterpret_cast<char*>(&other->tm_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata tmStructProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lcms_2eproto_getter, &descriptor_table_lcms_2eproto_once,
      file_level_metadata_lcms_2eproto[0]);
}

// ===================================================================

class cmsProfileIDProto::_Internal {
 public:
};

cmsProfileIDProto::cmsProfileIDProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  id32_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cmsProfileIDProto)
}
cmsProfileIDProto::cmsProfileIDProto(const cmsProfileIDProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id32_(from.id32_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cmsProfileIDProto)
}

inline void cmsProfileIDProto::SharedCtor() {
}

cmsProfileIDProto::~cmsProfileIDProto() {
  // @@protoc_insertion_point(destructor:cmsProfileIDProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void cmsProfileIDProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void cmsProfileIDProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void cmsProfileIDProto::Clear() {
// @@protoc_insertion_point(message_clear_start:cmsProfileIDProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id32_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cmsProfileIDProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 id32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_id32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_id32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* cmsProfileIDProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cmsProfileIDProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 id32 = 1;
  {
    int byte_size = _id32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_id32(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cmsProfileIDProto)
  return target;
}

size_t cmsProfileIDProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmsProfileIDProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 id32 = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->id32_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _id32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData cmsProfileIDProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    cmsProfileIDProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*cmsProfileIDProto::GetClassData() const { return &_class_data_; }

void cmsProfileIDProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<cmsProfileIDProto *>(to)->MergeFrom(
      static_cast<const cmsProfileIDProto &>(from));
}


void cmsProfileIDProto::MergeFrom(const cmsProfileIDProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmsProfileIDProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  id32_.MergeFrom(from.id32_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void cmsProfileIDProto::CopyFrom(const cmsProfileIDProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmsProfileIDProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsProfileIDProto::IsInitialized() const {
  return true;
}

void cmsProfileIDProto::InternalSwap(cmsProfileIDProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  id32_.InternalSwap(&other->id32_);
}

::PROTOBUF_NAMESPACE_ID::Metadata cmsProfileIDProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lcms_2eproto_getter, &descriptor_table_lcms_2eproto_once,
      file_level_metadata_lcms_2eproto[1]);
}

// ===================================================================

class cmsICCPROFILEProto::_Internal {
 public:
  static const ::tmStructProto& created(const cmsICCPROFILEProto* msg);
  static const ::cmsProfileIDProto& profileid(const cmsICCPROFILEProto* msg);
};

const ::tmStructProto&
cmsICCPROFILEProto::_Internal::created(const cmsICCPROFILEProto* msg) {
  return *msg->created_;
}
const ::cmsProfileIDProto&
cmsICCPROFILEProto::_Internal::profileid(const cmsICCPROFILEProto* msg) {
  return *msg->profileid_;
}
cmsICCPROFILEProto::cmsICCPROFILEProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tagnames_(arena),
  taglinked_(arena),
  tagsizes_(arena),
  tagoffsets_(arena),
  tagsaveasraw_(arena),
  tag_ptrs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cmsICCPROFILEProto)
}
cmsICCPROFILEProto::cmsICCPROFILEProto(const cmsICCPROFILEProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tagnames_(from.tagnames_),
      taglinked_(from.taglinked_),
      tagsizes_(from.tagsizes_),
      tagoffsets_(from.tagoffsets_),
      tagsaveasraw_(from.tagsaveasraw_),
      tag_ptrs_(from.tag_ptrs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_created()) {
    created_ = new ::tmStructProto(*from.created_);
  } else {
    created_ = nullptr;
  }
  if (from._internal_has_profileid()) {
    profileid_ = new ::cmsProfileIDProto(*from.profileid_);
  } else {
    profileid_ = nullptr;
  }
  ::memcpy(&cmm_, &from.cmm_,
    static_cast<size_t>(reinterpret_cast<char*>(&tagcount_) -
    reinterpret_cast<char*>(&cmm_)) + sizeof(tagcount_));
  // @@protoc_insertion_point(copy_constructor:cmsICCPROFILEProto)
}

inline void cmsICCPROFILEProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tagcount_) -
    reinterpret_cast<char*>(&created_)) + sizeof(tagcount_));
}

cmsICCPROFILEProto::~cmsICCPROFILEProto() {
  // @@protoc_insertion_point(destructor:cmsICCPROFILEProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void cmsICCPROFILEProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete created_;
  if (this != internal_default_instance()) delete profileid_;
}

void cmsICCPROFILEProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void cmsICCPROFILEProto::Clear() {
// @@protoc_insertion_point(message_clear_start:cmsICCPROFILEProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagnames_.Clear();
  taglinked_.Clear();
  tagsizes_.Clear();
  tagoffsets_.Clear();
  tagsaveasraw_.Clear();
  tag_ptrs_.Clear();
  if (GetArenaForAllocation() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  if (GetArenaForAllocation() == nullptr && profileid_ != nullptr) {
    delete profileid_;
  }
  profileid_ = nullptr;
  ::memset(&cmm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tagcount_) -
      reinterpret_cast<char*>(&cmm_)) + sizeof(tagcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cmsICCPROFILEProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tmStructProto Created = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 CMM = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          cmm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cmsProfileClassSignatureProto DeviceClass = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_deviceclass(static_cast<::cmsProfileClassSignatureProto>(val));
        } else
          goto handle_unusual;
        continue;
      // .cmsColorSpaceSignatureProto ColorSpace = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_colorspace(static_cast<::cmsColorSpaceSignatureProto>(val));
        } else
          goto handle_unusual;
        continue;
      // .cmsColorSpaceSignatureProto PCS = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pcs(static_cast<::cmsColorSpaceSignatureProto>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 RenderingIntent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          renderingintent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cmsPlatformSignatureProto platform = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platform(static_cast<::cmsPlatformSignatureProto>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 manufacturer = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          manufacturer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 model = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 attributes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          attributes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 creator = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          creator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cmsProfileIDProto ProfileID = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_profileid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TagCount = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          tagcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cmsTagSignatureProto TagNames = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_tagnames(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 144) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_tagnames(static_cast<::cmsTagSignatureProto>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .cmsTagSignatureProto TagLinked = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_taglinked(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 152) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_taglinked(static_cast<::cmsTagSignatureProto>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 TagSizes = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tagsizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 160) {
          _internal_add_tagsizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 TagOffsets = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tagoffsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 168) {
          _internal_add_tagoffsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 TagSaveAsRaw = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tagsaveasraw(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 176) {
          _internal_add_tagsaveasraw(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes tag_ptrs = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tag_ptrs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* cmsICCPROFILEProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cmsICCPROFILEProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tmStructProto Created = 3;
  if (this->_internal_has_created()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::created(this),
        _Internal::created(this).GetCachedSize(), target, stream);
  }

  // uint32 CMM = 4;
  if (this->_internal_cmm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cmm(), target);
  }

  // uint32 Version = 5;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_version(), target);
  }

  // .cmsProfileClassSignatureProto DeviceClass = 6;
  if (this->_internal_deviceclass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_deviceclass(), target);
  }

  // .cmsColorSpaceSignatureProto ColorSpace = 7;
  if (this->_internal_colorspace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_colorspace(), target);
  }

  // .cmsColorSpaceSignatureProto PCS = 8;
  if (this->_internal_pcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_pcs(), target);
  }

  // uint32 RenderingIntent = 9;
  if (this->_internal_renderingintent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_renderingintent(), target);
  }

  // .cmsPlatformSignatureProto platform = 10;
  if (this->_internal_platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_platform(), target);
  }

  // uint32 flags = 11;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_flags(), target);
  }

  // uint32 manufacturer = 12;
  if (this->_internal_manufacturer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_manufacturer(), target);
  }

  // uint32 model = 13;
  if (this->_internal_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_model(), target);
  }

  // uint64 attributes = 14;
  if (this->_internal_attributes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_attributes(), target);
  }

  // uint32 creator = 15;
  if (this->_internal_creator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_creator(), target);
  }

  // .cmsProfileIDProto ProfileID = 16;
  if (this->_internal_has_profileid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::profileid(this),
        _Internal::profileid(this).GetCachedSize(), target, stream);
  }

  // uint32 TagCount = 17;
  if (this->_internal_tagcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_tagcount(), target);
  }

  // repeated .cmsTagSignatureProto TagNames = 18;
  {
    int byte_size = _tagnames_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          18, tagnames_, byte_size, target);
    }
  }

  // repeated .cmsTagSignatureProto TagLinked = 19;
  {
    int byte_size = _taglinked_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          19, taglinked_, byte_size, target);
    }
  }

  // repeated uint32 TagSizes = 20;
  {
    int byte_size = _tagsizes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          20, _internal_tagsizes(), byte_size, target);
    }
  }

  // repeated uint32 TagOffsets = 21;
  {
    int byte_size = _tagoffsets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          21, _internal_tagoffsets(), byte_size, target);
    }
  }

  // repeated int32 TagSaveAsRaw = 22;
  {
    int byte_size = _tagsaveasraw_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          22, _internal_tagsaveasraw(), byte_size, target);
    }
  }

  // repeated bytes tag_ptrs = 23;
  for (int i = 0, n = this->_internal_tag_ptrs_size(); i < n; i++) {
    const auto& s = this->_internal_tag_ptrs(i);
    target = stream->WriteBytes(23, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cmsICCPROFILEProto)
  return target;
}

size_t cmsICCPROFILEProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmsICCPROFILEProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cmsTagSignatureProto TagNames = 18;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_tagnames_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_tagnames(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _tagnames_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .cmsTagSignatureProto TagLinked = 19;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_taglinked_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_taglinked(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _taglinked_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 TagSizes = 20;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->tagsizes_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _tagsizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 TagOffsets = 21;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->tagoffsets_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _tagoffsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 TagSaveAsRaw = 22;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->tagsaveasraw_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _tagsaveasraw_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes tag_ptrs = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tag_ptrs_.size());
  for (int i = 0, n = tag_ptrs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      tag_ptrs_.Get(i));
  }

  // .tmStructProto Created = 3;
  if (this->_internal_has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .cmsProfileIDProto ProfileID = 16;
  if (this->_internal_has_profileid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profileid_);
  }

  // uint32 CMM = 4;
  if (this->_internal_cmm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cmm());
  }

  // uint32 Version = 5;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // .cmsProfileClassSignatureProto DeviceClass = 6;
  if (this->_internal_deviceclass() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_deviceclass());
  }

  // .cmsColorSpaceSignatureProto ColorSpace = 7;
  if (this->_internal_colorspace() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_colorspace());
  }

  // .cmsColorSpaceSignatureProto PCS = 8;
  if (this->_internal_pcs() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pcs());
  }

  // uint32 RenderingIntent = 9;
  if (this->_internal_renderingintent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_renderingintent());
  }

  // .cmsPlatformSignatureProto platform = 10;
  if (this->_internal_platform() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
  }

  // uint32 flags = 11;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  // uint32 manufacturer = 12;
  if (this->_internal_manufacturer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_manufacturer());
  }

  // uint32 model = 13;
  if (this->_internal_model() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_model());
  }

  // uint64 attributes = 14;
  if (this->_internal_attributes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_attributes());
  }

  // uint32 creator = 15;
  if (this->_internal_creator() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creator());
  }

  // uint32 TagCount = 17;
  if (this->_internal_tagcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tagcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData cmsICCPROFILEProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    cmsICCPROFILEProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*cmsICCPROFILEProto::GetClassData() const { return &_class_data_; }

void cmsICCPROFILEProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<cmsICCPROFILEProto *>(to)->MergeFrom(
      static_cast<const cmsICCPROFILEProto &>(from));
}


void cmsICCPROFILEProto::MergeFrom(const cmsICCPROFILEProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmsICCPROFILEProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tagnames_.MergeFrom(from.tagnames_);
  taglinked_.MergeFrom(from.taglinked_);
  tagsizes_.MergeFrom(from.tagsizes_);
  tagoffsets_.MergeFrom(from.tagoffsets_);
  tagsaveasraw_.MergeFrom(from.tagsaveasraw_);
  tag_ptrs_.MergeFrom(from.tag_ptrs_);
  if (from._internal_has_created()) {
    _internal_mutable_created()->::tmStructProto::MergeFrom(from._internal_created());
  }
  if (from._internal_has_profileid()) {
    _internal_mutable_profileid()->::cmsProfileIDProto::MergeFrom(from._internal_profileid());
  }
  if (from._internal_cmm() != 0) {
    _internal_set_cmm(from._internal_cmm());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_deviceclass() != 0) {
    _internal_set_deviceclass(from._internal_deviceclass());
  }
  if (from._internal_colorspace() != 0) {
    _internal_set_colorspace(from._internal_colorspace());
  }
  if (from._internal_pcs() != 0) {
    _internal_set_pcs(from._internal_pcs());
  }
  if (from._internal_renderingintent() != 0) {
    _internal_set_renderingintent(from._internal_renderingintent());
  }
  if (from._internal_platform() != 0) {
    _internal_set_platform(from._internal_platform());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_manufacturer() != 0) {
    _internal_set_manufacturer(from._internal_manufacturer());
  }
  if (from._internal_model() != 0) {
    _internal_set_model(from._internal_model());
  }
  if (from._internal_attributes() != 0) {
    _internal_set_attributes(from._internal_attributes());
  }
  if (from._internal_creator() != 0) {
    _internal_set_creator(from._internal_creator());
  }
  if (from._internal_tagcount() != 0) {
    _internal_set_tagcount(from._internal_tagcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void cmsICCPROFILEProto::CopyFrom(const cmsICCPROFILEProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmsICCPROFILEProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsICCPROFILEProto::IsInitialized() const {
  return true;
}

void cmsICCPROFILEProto::InternalSwap(cmsICCPROFILEProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tagnames_.InternalSwap(&other->tagnames_);
  taglinked_.InternalSwap(&other->taglinked_);
  tagsizes_.InternalSwap(&other->tagsizes_);
  tagoffsets_.InternalSwap(&other->tagoffsets_);
  tagsaveasraw_.InternalSwap(&other->tagsaveasraw_);
  tag_ptrs_.InternalSwap(&other->tag_ptrs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cmsICCPROFILEProto, tagcount_)
      + sizeof(cmsICCPROFILEProto::tagcount_)
      - PROTOBUF_FIELD_OFFSET(cmsICCPROFILEProto, created_)>(
          reinterpret_cast<char*>(&created_),
          reinterpret_cast<char*>(&other->created_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cmsICCPROFILEProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lcms_2eproto_getter, &descriptor_table_lcms_2eproto_once,
      file_level_metadata_lcms_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tmStructProto*
Arena::CreateMaybeMessage< ::tmStructProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tmStructProto >(arena);
}
template<> PROTOBUF_NOINLINE ::cmsProfileIDProto*
Arena::CreateMaybeMessage< ::cmsProfileIDProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cmsProfileIDProto >(arena);
}
template<> PROTOBUF_NOINLINE ::cmsICCPROFILEProto*
Arena::CreateMaybeMessage< ::cmsICCPROFILEProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cmsICCPROFILEProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
