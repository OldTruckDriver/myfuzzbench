// FontCollection.proto
syntax = "proto3";

message FontCollection {
    uint32 flavor = 1;
    uint32 header_version = 2;
    repeated uint32 tables_keys = 3;
    repeated FontTable tables_values = 4;
    repeated Font fonts = 5;
    repeated ContourVec contours = 6;
}

message ContourVec {
    repeated GlyphPoint points = 1;
}

message FontTable {
    repeated FontTableSelf tables = 1;
}

message FontTableSelf {
    uint32 tag = 1;
    uint32 checksum = 2;
    uint32 offset = 3;
    uint32 length = 4;
    bytes data = 5;
    repeated uint8 buffer = 6;
    uint8 flag_byte = 7;
}


message PthreadInternalList {
    PthreadInternalList __prev = 1;
    PthreadInternalList __next = 2;
}

message PthreadMutexS {
    int32 __lock = 1;
    uint32 __count = 2;
    int32 __owner = 3;
    uint32 __nusers = 4;
    int32 __kind = 5;
    int32 __spins = 6;
    int32 __elision = 7;
    PthreadInternalList __list = 8;
}

message Addrinfo {
    int32 ai_flags = 1;
    int32 ai_family = 2;
    int32 ai_socktype = 3;
    int32 ai_protocol = 4;
    uint32 ai_addrlen = 5;
    Addrinfo ai_addr = 6;
    string ai_canonname = 7;
    Addrinfo ai_next = 8;
}

message PthreadMutexT {
    PthreadMutexS __data = 1;
    bytes __size = 2;
    int64 __align = 3;
}

message CurlFileinfo {
    string filename = 1;
    CurlFiletype filetype = 2;
    int64 time = 3;
    uint32 perm = 4;
    int32 uid = 5;
    int32 gid = 6;
    int64 size = 7;
    int64 hardlinks = 8;
    repeated string strings = 9;
    uint32 flags = 10;
    bytes b_data = 11;
    uint64 b_size = 12;
    uint64 b_used = 13;
}


message Fileinfo {
    CurlFileinfo info = 1;
    CurlLlistElement list = 2;
    Dynbuf buf = 3;
}

message ThreadSyncData {
    PthreadMutexT mtx = 1;
    int32 done = 2;
    int32 port = 3;
    string hostname = 4;
    CurlEasy data = 5;
    repeated int32 sock_pair = 6;
    int32 sock_error = 7;
    CurlAddrinfo res = 8;
    Addrinfo hints = 9;
    ThreadData td = 10;
}

message Sockaddr {
    uint32 sa_family = 1;
    bytes sa_data = 2;
}

message ThreadData {
    uint64 thread_hnd = 1;
    uint32 poll_interval = 2;
    int64 interval_end = 3;
    ThreadSyncData tsd = 4;
}

message FtpParselistData {
    OsType os_type = 1;
    State state = 2;
    int32 error = 3;
    Fileinfo file_data = 4;
    uint32 item_length = 5;
    uint64 item_offset = 6;
    Offsets offsets = 7;
}

message CurlMime {
    CurlMimepart parent = 1;
    CurlMimepart firstpart = 2;
    CurlMimepart lastpart = 3;
    string boundary = 4;
    MimeState state = 5;
}

message MimeState {
    Mimestate state = 1;
    google.protobuf.Any ptr = 2;
    int64 offset = 3;
}

message MimeEncoderState {
    uint64 pos = 1;
    uint64 bufbeg = 2;
    uint64 bufend = 3;
    string buf = 4;
}

message CurlAddrinfo {
    int32 ai_flags = 1;
    int32 ai_family = 2;
    int32 ai_socktype = 3;
    int32 ai_protocol = 4;
    uint32 ai_addrlen = 5;
    string ai_canonname = 6;
    Sockaddr ai_addr = 7;
    CurlAddrinfo ai_next = 8;
}

message Dnsprobe {
    CurlEasy easy = 1;
    Dnstype dnstype = 2;
    bytes dohbuffer = 3;
    uint64 dohlen = 4;
    Dynbuf serverdoh = 5;
}

message CurlBlob {
    bytes data = 1;
    uint64 len = 2;
    uint32 flags = 3;
}

message Ntlmdata {
    uint32 flags = 1;
    bytes nonce = 2;
    uint32 target_info_len = 3;
    google.protobuf.Any target_info = 4;
}

message DynamicallyAllocatedData {
    string proxyuserpwd = 1;
    string uagent = 2;
    string accept_encoding = 3;
    string userpwd = 4;
    string rangeline = 5;
    string ref = 6;
    string host = 7;
    string cookiehost = 8;
    string rtsp_transport = 9;
    string te = 10;
    string user = 11;
    string passwd = 12;
    string proxyuser = 13;
    string proxypasswd = 14;
}

message Auth {
    uint64 want = 1;
    uint64 picked = 2;
    uint64 avail = 3;
    uint32 done = 4;
    uint32 multipass = 5;
    uint32 iestyle = 6;
}

message SslPrimaryConfig {
    string CApath = 1;
    string CAfile = 2;
    string issuercert = 3;
    string clientcert = 4;
    string cipher_list = 5;
    string cipher_list13 = 6;
    string pinned_key = 7;
    string CRLfile = 8;
    CurlBlob cert_blob = 9;
    CurlBlob ca_info_blob = 10;
    CurlBlob issuercert_blob = 11;
    string username = 12;
    string password = 13;
    string curves = 14;
    uint8 ssl_options = 15;
    uint32 version_max = 16;
    uint8 version = 17;
    uint32 verifypeer = 18;
    uint32 verifyhost = 19;
    uint32 verifystatus = 20;
    uint32 sessionid = 21;
}

message Hostname {
    string rawalloc = 1;
    string encalloc = 2;
    string name = 3;
    string dispname = 4;
}

message ProxyInfo {
    Hostname host = 1;
    int32 port = 2;
    uint8 proxytype = 3;
    string user = 4;
    string passwd = 5;
}

message Urlpieces {
    string scheme = 1;
    string hostname = 2;
    string port = 3;
    string user = 4;
    string password = 5;
    string options = 6;
    string path = 7;
    string query = 8;
}

message CurlCwriter {
    CurlCwtype cwt = 1;
    CurlCwriter next = 2;
    CurlCwriterPhase phase = 3;
}

message CurlURL {
    string scheme = 1;
    string user = 2;
    string password = 3;
    string options = 4;
    string host = 5;
    string zoneid = 6;
    string port = 7;
    string path = 8;
    string query = 9;
    string fragment = 10;
    int64 portnum = 11;
}

message Curltime {
    int64 tv_sec = 1;
    int32 tv_usec = 2;
}

message MultiSslBackendData {
    string CAfile = 1;
    X509StoreSt store = 2;
    Curltime time = 3;
}

message CurlHeaderStore {
    CurlLlistElement node = 1;
    string name = 2;
    string value = 3;
    int32 request = 4;
    uint8 type = 5;
    bytes buffer = 6;
}

message URLPattern {
    URLPatternType type = 1;
    int32 globindex = 2;
    URLPatternContent content = 3;
}

message CurlLlist {
    CurlLlistElement head = 1;
    CurlLlistElement tail = 2;
    google.protobuf.Any dtor = 3;
    uint64 size = 4;
}
message SslGeneralConfig {
    uint64 max_ssl_sessions = 1;
    int32 ca_cache_timeout = 2;
}

message CurlTree {
    CurlTree smaller = 1;
    CurlTree larger = 2;
    CurlTree samen = 3;
    CurlTree samep = 4;
    Curltime key = 5;
    google.protobuf.Any payload = 6;
}

message CurlHash {
    CurlLlist table = 1;
    google.protobuf.Any hash_func = 2;
    google.protobuf.Any comp_func = 3;
    google.protobuf.Any dtor = 4;
    int32 slots = 5;
    uint64 size = 6;
}

message Dohdata {
    CurlSlist headers = 1;
    Dnsprobe probe = 2;
    uint32 pending = 3;
    int32 port = 4;
    string host = 5;
}

message Connectbundle {
    int32 multiuse = 1;
    uint64 num_connections = 2;
    CurlLlist conn_list = 3;
}

message CurlMimepart {
    CurlMime parent = 1;
    CurlMimepart nextpart = 2;
    Mimekind kind = 3;
    uint32 flags = 4;
    string data = 5;
    Readfunc readfunc = 6;
    Seekfunc seekfunc = 7;
    google.protobuf.Any freefunc = 8;
    google.protobuf.Any arg = 9;
    IOFile fp = 10;
    CurlSlist curlheaders = 11;
    CurlSlist userheaders = 12;
    string mimetype = 13;
    string filename = 14;
    string name = 15;
    int64 datasize = 16;
    MimeState state = 17;
    MimeEncoder encoder = 18;
    MimeEncoderState encstate = 19;
    uint64 lastreadstatus = 20;
}

message TimeNode {
    CurlLlistElement list = 1;
    Curltime time = 2;
    ExpireId eid = 3;
}

message FtpWc {
    FtpParselistData parser = 1;
    FtpWcBackup backup = 2;
}
message Conncache {
    CurlHash hash = 1;
    uint64 num_conn = 2;
    int64 next_connection_id = 3;
    int64 next_easy_id = 4;
    Curltime last_cleanup = 5;
    CurlEasy closure_handle = 6;
}

message ConnectBits {
    uint32 httpproxy = 1;
    uint32 socksproxy = 2;
    uint32 proxy_user_passwd = 3;
    uint32 tunnel_proxy = 4;
    uint32 proxy_connect_closed = 5;
    uint32 proxy = 6;
    uint32 close = 7;
    uint32 reuse = 8;
    uint32 altused = 9;
    uint32 conn_to_host = 10;
    uint32 conn_to_port = 11;
    uint32 ipv6_ip = 12;
    uint32 ipv6 = 13;
    uint32 do_more = 14;
    uint32 protoconnstart = 15;
    uint32 retry = 16;
    uint32 authneg = 17;
    uint32 ftp_use_epsv = 18;
    uint32 ftp_use_eprt = 19;
    uint32 ftp_use_data_ssl = 20;
    uint32 ftp_use_control_ssl = 21;
    uint32 netrc = 22;
    uint32 bound = 23;
    uint32 multiplex = 24;
    uint32 tcp_fastopen = 25;
    uint32 tls_enable_alpn = 26;
    uint32 doh = 27;
    uint32 abstract_unix_socket = 28;
    uint32 tls_upgraded = 29;
    uint32 sock_accepted = 30;
    uint32 parallel_connect = 31;
}

message CurlDnsEntry {
    CurlAddrinfo addr = 1;
    int64 timestamp = 2;
    int64 inuse = 3;
    int32 hostport = 4;
    string hostname = 5;
}

message CurlSslSession {
    string name = 1;
    string conn_to_host = 2;
    string scheme = 3;
    bytes sessionid = 4;
    uint64 idsize = 5;
    int64 age = 6;
    int32 remote_port = 7;
    int32 conn_to_port = 8;
    SslPrimaryConfig ssl_config = 9;
}

message Dynbuf {
    string bufr = 1;
    uint64 leng = 2;
    uint64 allc = 3;
    uint64 toobig = 4;
}

message Digestdata {
    string nonce = 1;
    string cnonce = 2;
    string realm = 3;
    string opaque = 4;
    string qop = 5;
    string algorithm = 6;
    int32 nc = 7;
    uint8 algo = 8;
    uint32 stale = 9;
    uint32 userhash = 10;
}

message CurlAsync {
    string hostname = 1;
    CurlDnsEntry dns = 2;
    ThreadData tdata = 3;
    google.protobuf.Any resolver = 4;
    int32 port = 5;
    int32 status = 6;
    uint32 done = 7;
}

message Tempbuf {
    Dynbuf b = 1;
    int32 type = 2;
    uint32 paused_body = 3;
}

message SslConfigData {
    SslPrimaryConfig primary = 1;
    int64 certverifyresult = 2;
    SSLCtx fsslctx = 3;
    google.protobuf.Any fsslctxp = 4;
    string cert_type = 5;
    string key = 6;
    CurlBlob key_blob = 7;
    string key_type = 8;
    string key_passwd = 9;
    uint32 certinfo = 10;
    uint32 falsestart = 11;
    uint32 enable_beast = 12;
    uint32 no_revoke = 13;
    uint32 no_partialchain = 14;
    uint32 revoke_best_effort = 15;
    uint32 native_ca_store = 16;
    uint32 auto_client_cert = 17;
}

message CurlSlist {
    string data = 1;
    CurlSlist next = 2;
}

message CurlHeader {
    string name = 1;
    string value = 2;
    uint64 amount = 3;
    uint64 index = 4;
    uint32 origin = 5;
    google.protobuf.Any anchor = 6;
}

message CurlHttppost {
    CurlHttppost next = 1;
    string name = 2;
    int64 namelength = 3;
    string contents = 4;
    int64 contentslength = 5;
    string buffer = 6;
    int64 bufferlength = 7;
    string contenttype = 8;
    CurlSlist contentheader = 9;
    CurlHttppost more = 10;
    int64 flags = 11;
    string showfilename = 12;
    google.protobuf.Any userp = 13;
    int64 contentlen = 14;
}

message IOFile {
    int32 flags = 1;
    string IO_read_ptr = 2;
    string IO_read_end = 3;
    string IO_read_base = 4;
    string IO_write_base = 5;
    string IO_write_ptr = 6;
    string IO_write_end = 7;
    string IO_buf_base = 8;
    string IO_buf_end = 9;
    string IO_save_base = 10;
    string IO_backup_base = 11;
    string IO_save_end = 12;
    repeated IOFileMarker markers = 13;
    IOFile chain = 14;
    int32 fileno = 15;
    int32 flags2 = 16;
    int64 old_offset = 17;
    uint32 cur_column = 18;
    int8 vtable_offset = 19;
    string shortbuf = 20;
    string lock = 21;
    int64 offset = 22;
    IOCodecvt codecvt = 23;
    IOWideData wide_data = 24;
    IOFile freeres_list = 25;
    string freeres_buf = 26;
    uint64 __pad5 = 27;
    int32 mode = 28;
    string unused2 = 29;
  }
  
  message IOFileMarker {
    // Define IOFileMarker fields as needed
  }
  
  message IOCodecvt {
    // Define IOCodecvt fields as needed
  }
  
  message IOWideData {
    // Define IOWideData fields as needed
  }
  
  message CurlCertinfo {
    int32 num_of_certs = 1;
    repeated CurlSList certinfo = 2;
  }
  
  message CurlSList {
    // Define CurlSList fields as needed
  }
  
  message CURLMsg {
    CURLMSG msg = 1;
    CurlEasy easy_handle = 2;
    CURLMsgData data = 3;
  }
  
  message CURLMsgData {
    // Define CURLMsgData fields as needed
  }
  
  message PureInfo {
    int32 httpcode = 1;
    int32 httpproxycode = 2;
    int32 httpversion = 3;
    int64 filetime = 4;
    int64 request_size = 5;
    uint64 proxyauthavail = 6;
    uint64 httpauthavail = 7;
    int64 numconnects = 8;
    string contenttype = 9;
    string wouldredirect = 10;
    int64 retry_after = 11;
    uint32 header_size = 12;
    string conn_primary_ip = 13;
    int32 conn_primary_port = 14;
    int32 conn_remote_port = 15;
    string conn_local_ip = 16;
    int32 conn_local_port = 17;
    string conn_scheme = 18;
    uint32 conn_protocol = 19;
    CurlCertinfo certs = 20;
    CURLproxycode pxcode = 21;
    uint32 timecond = 22;
  }
  
  message EasyPollset {
    repeated int32 sockets = 1;
    uint32 num = 2;
    repeated uint8 actions = 3;
  }
  
  message Altsvcinfo {
    string filename = 1;
    CurlLlist list = 2;
    int64 flags = 3;
  }
  
  message CurlLlist {
    CurlLlistElement element = 1;
  }
  
  message CurlLlistElement {
    void* ptr = 1;
    CurlLlistElement prev = 2;
    CurlLlistElement next = 3;
  }
  
  message ConnectData {
    CurlLlistElement bundle_node = 1;
    int64 fclosesocket = 2;
    string closesocket_client = 3;
    int64 connection_id = 4;
    CurlDnsEntry dns_entry = 5;
    CurlSockaddrEx remote_addr = 6;
    Hostname host = 7;
    string hostname_resolve = 8;
    string secondaryhostname = 9;
    Hostname conn_to_host = 10;
    ProxyInfo socks_proxy = 11;
    ProxyInfo http_proxy = 12;
    string primary_ip = 13;
    string user = 14;
    string passwd = 15;
    string options = 16;
    string sasl_authzid = 17;
    string oauth_bearer = 18;
    Curltime now = 19;
    Curltime created = 20;
    Curltime lastused = 21;
    repeated int32 sock = 22;
    repeated int64 recv = 23;
    repeated int64 send = 24;
    CurlCfilter cfilter = 25;
    SslPrimaryConfig ssl_config = 26;
    SslPrimaryConfig proxy_ssl_config = 27;
    ConnectBits bits = 28;
    CurlHandler handler = 29;
    CurlHandler given = 30;
    Curltime keepalive = 31;
    int32 sockfd = 32;
    int32 writesockfd = 33;
    CurlLlist easyq = 34;
    int64 seek_func = 35;
    string seek_client = 36;
    Curlntlm http_ntlm_state = 37;
    Curlntlm proxy_ntlm_state = 38;
    Ntlmdata ntlm = 39;
    Ntlmdata proxyntlm = 40;
    ConnectdataProto proto = 41;
    Connectbundle bundle = 42;
    string unix_domain_socket = 43;
    string localdev = 44;
    uint32 localportrange = 45;
    int32 waitfor = 46;
    int32 port = 47;
    int32 remote_port = 48;
    int32 conn_to_port = 49;
    uint32 scope_id = 50;
    uint16 localport = 51;
    uint16 secondary_port = 52;
    uint8 alpn = 53;
    uint8 proxy_alpn = 54;
    uint8 transport = 55;
    uint8 ip_version = 56;
    uint8 httpversion = 57;
    uint8 connect_only = 58;
    uint8 gssapi_delegation = 59;
  }
  
  message CurlCfilter {
    // Define CurlCfilter fields as needed
  }
  
  message CurlHandler {
    // Define CurlHandler fields as needed
  }
  
  message SslPrimaryConfig {
    // Define SslPrimaryConfig fields as needed
  }
  
  message ConnectBits {
    // Define ConnectBits fields as needed
  }
  
  message Curlntlm {
    // Define Curlntlm fields as needed
  }
  
  message Ntlmdata {
    // Define Ntlmdata fields as needed
  }
  
  message ConnectdataProto {
    // Define ConnectdataProto fields as needed
  }
  
  message Connectbundle {
    // Define Connectbundle fields as needed
  }
  
  message CookieInfo {
    repeated Cookie cookies = 1;
    int64 next_expiration = 2;
    int32 numcookies = 3;
    int32 lastct = 4;
    bool running = 5;
    bool newsession = 6;
  }
  
  message Cookie {
    // Define Cookie fields as needed
  }
  
  message UrlState {
    Conncache conn_cache = 1;
    Curltime keeps_speed = 2;
    int64 lastconnect_id = 3;
    int64 recent_conn_id = 4;
    Dynbuf headerb = 5;
    CurlSlist hstslist = 6;
    string buffer = 7;
    string ulbuf = 8;
    int64 current_speed = 9;
    string first_host = 10;
    int32 first_remote_port = 11;
    uint32 first_remote_protocol = 12;
    int32 retrycount = 13;
    CurlSslSession session = 14;
    int64 sessionage = 15;
    Tempbuf tempwrite = 16;
    uint32 tempcount = 17;
    int64 os_errno = 18;
    string scratch = 19;
    int64 followlocation = 20;
    int32 requests = 21;
    void (* prev_signal)(int) = 22;
    Digestdata digest = 23;
    Digestdata proxydigest = 24;
    Auth authhost = 25;
    Auth authproxy = 26;
    CurlAsync async = 27;
    void* engine = 28;
    Curltime expiretime = 29;
    Curltree timenode = 30;
    CurlLlist timeoutlist = 31;
    TimeNode expires = 32;
    string most_recent_ftp_entrypath = 33;
    uint32 prev_block_had_trailing_cr = 34;
    int64 crlf_conversions = 35;
    string range = 36;
    int64 resume_from = 37;
    int64 rtsp_next_client_CSeq = 38;
    int64 rtsp_next_server_CSeq = 39;
    int64 rtsp_CSeq_recv = 40;
    repeated uint8 rtp_channel_mask = 41;
    int64 infilesize = 42;
    uint64 fread_func = 43;
    void* in = 44;
    CurlURL uh = 45;
    Urlpieces up = 46;
    string url = 47;
    string referer = 48;
    CurlSlist resolve = 49;
    CurlMimepart mimepost = 50;
    CurlMimepart formp = 51;
    uint32 trailers_bytes_sent = 52;
    Dynbuf trailers_buf = 53;
    CurlLlist httphdrs = 54;
    CurlHeader headerout = 55;
    CurlHeaderStore prevhead = 56;
    TrailersState trailers_state = 57;
    CurlSlist cookielist = 58;
    DynamicallyAllocatedData aptr = 59;
    uint8 httpwant = 60;
    uint8 httpversion = 61;
    uint8 httpreq = 62;
    uint8 select_bits = 63;
    uint32 multi_owned_by_easy = 64;
    uint32 this_is_a_follow = 65;
    uint32 refused_stream = 66;
    uint32 errorbuf = 67;
    uint32 allow_port = 68;
    uint32 authproblem = 69;
    uint32 wildcardmatch = 70;
    uint32 expect100header = 71;
    uint32 disableexpect = 72;
    uint32 use_range = 73;
    uint32 rangestringalloc = 74;
    uint32 done = 75;
    uint32 previouslypending = 76;
    uint32 cookie_engine = 77;
    uint32 prefer_ascii = 78;
    uint32 list_only = 79;
    uint32 url_alloc = 80;
    uint32 referer_alloc = 81;
    uint32 wildcard_resolve = 82;
    uint32 rewindbeforesend = 83;
    uint32 upload = 84;
    uint32 internal = 85;
  }
  
  message Conncache {
    // Define Conncache fields as needed
  }
  
  message CurlSslSession {
    // Define CurlSslSession fields as needed
  }
  
  message Tempbuf {
    // Define Tempbuf fields as needed
  }
  
  message CurlAsync {
    // Define CurlAsync fields as needed
  }
  
  message Curltree {
    // Define Curltree fields as needed
  }
  
  message CurlLlist {
    // Define CurlLlist fields as needed
  }
  
  message TimeNode {
    // Define TimeNode fields as needed
  }
  
  message CurlMimepart {
    // Define CurlMimepart fields as needed
  }
  
  message TrailersState {
    // Define TrailersState fields as needed
  }
  
  message DynamicallyAllocatedData {
    // Define DynamicallyAllocatedData fields as needed
  }
  
  message CurlShare {
    uint32 magic = 1;
    uint32 specifier = 2;
    volatile uint32 dirty = 3;
    void (* lockfunc)(CurlEasy, CurlLockData, CurlLockAccess, void*) = 4;
    void (* unlockfunc)(CurlEasy, CurlLockData, void*) = 5;
    void* clientdata = 6;
    Conncache conn_cache = 7;
    CurlHash hostcache = 8;
    CookieInfo cookies = 9;
    Hsts hsts = 10;
    CurlSslSession sslsession = 11;
    uint64 max_ssl_sessions = 12;
    int64 sessionage = 13;
  }
  
  message CurlHash {
    // Define CurlHash fields as needed
  }
  
  message Names {
    CurlHash hostcache = 1;
    NamesUnnamed hostcachetype = 2;
  }
  
  message NamesUnnamed {
    // Define NamesUnnamed fields as needed
  }
  
  message SingleRequest {
    int64 size = 1;
    int64 maxdownload = 2;
    int64 bytecount = 3;
    int64 writebytecount = 4;
    int64 pendingheader = 5;
    Curltime start = 6;
    uint32 headerbytecount = 7;
    uint32 allheadercount = 8;
    uint32 deductheadercount = 9;
    int32 headerline = 10;
    int64 offset = 11;
    int32 httpcode = 12;
    int32 keepon = 13;
    Curltime start100 = 14;
    Expect100 exp100 = 15;
    Upgrade101 upgr101 = 16;
    CurlCwriter writer_stack = 17;
    int64 timeofdoc = 18;
    int64 bodywrites = 19;
    string location = 20;
    string newurl = 21;
    int64 upload_present = 22;
    string upload_fromhere = 23;
    SingleRequestP p = 24;
    Dohdata doh = 25;
    string fread_eof = 26;
    uint8 setcookies = 27;
    uint32 header = 28;
    uint32 content_range = 29;
    uint32 download_done = 30;
    uint32 eos_written = 31;
    uint32 upload_done = 32;
    uint32 ignorebody = 33;
    uint32 http_bodyless = 34;
    uint32 chunk = 35;
    uint32 ignore_cl = 36;
    uint32 upload_chunky = 37;
    uint32 getheader = 38;
    uint32 forbidchunk = 39;
    uint32 no_body = 40;
  }
  
  message CurlCwriter {
    // Define CurlCwriter fields as needed
  }
  
  message SingleRequestP {
    // Define SingleRequestP fields as needed
  }
  
  message CurlMessage {
    CurlLlistElement list = 1;
    CURLMsg extmsg = 2;
  }
  
  message URLGlob {
    repeated URLPattern pattern = 1;
    uint64 size = 2;
    uint64 urllen = 3;
    string glob_buffer = 4;
    bool beenhere = 5;
    string error = 6;
    uint64 pos = 7;
  }
  
  message URLPattern {
    // Define URLPattern fields as needed
  }
  
  message Hsts {
    CurlLlist list = 1;
    string filename = 2;
    uint32 flags = 3;
  }
  
  message Progress {
    int64 lastshow = 1;
    int64 size_dl = 2;
    int64 size_ul = 3;
    int64 downloaded = 4;
    int64 uploaded = 5;
    int64 current_speed = 6;
    int32 width = 7;
    int32 flags = 8;
    int64 timespent = 9;
    int64 dlspeed = 10;
    int64 ulspeed = 11;
    int64 t_postqueue = 12;
    int64 t_nslookup = 13;
    int64 t_connect = 14;
    int64 t_appconnect = 15;
    int64 t_pretransfer = 16;
    int64 t_starttransfer = 17;
    int64 t_redirect = 18;
    Curltime start = 19;
    Curltime t_startsingle = 20;
    Curltime t_startop = 21;
    Curltime t_acceptdata = 22;
    Curltime ul_limit_start = 23;
    int64 ul_limit_size = 24;
    Curltime dl_limit_start = 25;
    int64 dl_limit_size = 26;
    repeated int64 speeder = 27;
    repeated Curltime speeder_time = 28;
    int32 speeder_c = 29;
    uint32 callback = 30;
    uint32 is_t_startransfer_set = 31;
  }

  syntax = "proto3";

// Proto file for UserDefined
message UserDefined {
  _IO_FILE err = 1;
  bytes debugdata = 2;
  string errorbuffer = 3;
  bytes out = 4;
  bytes in_set = 5;
  bytes writeheader = 6;
  uint32 use_port = 7;
  uint64 httpauth = 8;
  uint64 proxyauth = 9;
  int64 maxredirs = 10;
  bytes postfields = 11;
  // (函数指针类型忽略)
  int64 postfieldsize = 13;
  uint32 localport = 14;
  uint32 localportrange = 15;
  // (函数指针类型忽略)
  int64 fwrite_func = 17;
  int64 fwrite_header = 18;
  int64 fwrite_rtp = 19;
  int64 fread_func_set = 20;
  // (函数指针类型忽略)
  int64 fprogress = 22;
  int64 fxferinfo = 23;
  int64 fdebug = 24;
  int64 ioctl_func = 25;
  int64 fsockopt = 26;
  bytes sockopt_client = 27;
  int64 fopensocket = 28;
  bytes opensocket_client = 29;
  int64 fclosesocket = 30;
  bytes closesocket_client = 31;
  int64 fprereq = 32;
  bytes prereq_userp = 33;
  bytes seek_client = 34;
  int64 hsts_read = 35;
  bytes hsts_read_userp = 36;
  int64 hsts_write = 37;
  bytes hsts_write_userp = 38;
  bytes progress_client = 39;
  bytes ioctl_client = 40;
  uint32 timeout = 41;
  uint32 connecttimeout = 42;
  uint32 happy_eyeballs_timeout = 43;
  uint32 server_response_timeout = 44;
  int64 maxage_conn = 45;
  int64 maxlifetime_conn = 46;
  int64 tftp_blksize = 47;
  int64 filesize = 48;
  int64 low_speed_limit = 49;
  int64 low_speed_time = 50;
  int64 max_send_speed = 51;
  int64 max_recv_speed = 52;
  int64 set_resume_from = 53;
  repeated string headers = 54;
  // (省略其他字段)
  string str = 72;
  repeated Blob blobs = 73;
  uint32 scope_id = 74;
  uint32 allowed_protocols = 75;
  uint32 redir_protocols = 76;
  bytes rtp_out = 77;
  Curl_RtspReq rtspreq = 78;
  int64 chunk_bgn = 79;
  int64 chunk_end = 80;
  int64 fnmatch = 81;
  bytes fnmatch_data = 82;
  bytes wildcardptr = 83;
  uint32 gssapi_delegation = 84;
  int32 tcp_keepidle = 85;
  int32 tcp_keepintvl = 86;
  int64 expect_100_timeout = 87;
  int64 resolver_start = 88;
  bytes resolver_start_client = 89;
  int64 upkeep_interval_ms = 90;
  int64 fmultidone = 91;
  Curl_easy dohfor = 92;
  Curl_URL uh = 93;
  bytes trailer_data = 94;
  int64 trailer_callback = 95;
  bytes keep_post = 96;
  repeated string mail_rcpt = 97;
  uint32 mail_rcpt_allowfails = 98;
  uint32 maxconnects = 99;
  uint32 use_ssl = 100;
  uint32 connect_only = 101;
  uint32 mime_formescape = 102;
  uint32 is_fread_set = 103;
  uint32 tftp_no_options = 104;
  uint32 sep_headers = 105;
  uint32 cookiesession = 106;
  uint32 crlf = 107;
  uint32 ssh_compression = 108;
  uint32 quick_exit = 109;
  uint32 get_filetime = 110;
  uint32 tunnel_thru_httpproxy = 111;
  uint32 prefer_ascii = 112;
  uint32 remote_append = 113;
  uint32 list_only = 114;
  uint32 ftp_use_port = 115;
  uint32 ftp_use_epsv = 116;
  uint32 ftp_use_eprt = 117;
  uint32 ftp_use_pret = 118;
  uint32 ftp_skip_ip = 119;
  uint32 wildcard_enabled = 120;
  uint32 hide_progress = 121;
  uint32 http_fail_on_error = 122;
  uint32 http_keep_sending_on_error = 123;
  uint32 http_follow_location = 124;
  uint32 http_transfer_encoding = 125;
  uint32 allow_auth_to_other_hosts = 126;
  uint32 include_header = 127;
  uint32 http_set_referer = 128;
  uint32 http_auto_referer = 129;
  uint32 opt_no_body = 130;
  uint32 verbose = 131;
  uint32 krb = 132;
  uint32 reuse_forbid = 133;
  uint32 reuse_fresh = 134;
  uint32 no_signal = 135;
  uint32 tcp_nodelay = 136;
  uint32 ignorecl = 137;
  uint32 http_te_skip = 138;
  uint32 http_ce_skip = 139;
  uint32 proxy_transfer_mode = 140;
  uint32 sasl_ir = 141;
  uint32 tcp_keepalive = 142;
  uint32 tcp_fastopen = 143;
  uint32 ssl_enable_alpn = 144;
  uint32 path_as_is = 145;
  uint32 pipewait = 146;
  uint32 suppress_connect_headers = 147;
  uint32 dns_shuffle_addresses = 148;
  uint32 haproxyprotocol = 149;
  uint32 abstract_unix_socket = 150;
  uint32 disallow_username_in_url = 151;
  uint32 doh = 152;
  uint32 doh_verifypeer = 153;
  uint32 doh_verifyhost = 154;
  uint32 doh_verifystatus = 155;
  uint32 http09_allowed = 156;
}

// Blob message for the blobs field in UserDefined
message Blob {
  bytes data = 1;
}

// Proto file for curl_tlssessioninfo
message curl_tlssessioninfo {
  curl_sslbackend backend = 1;
  bytes internals = 2;
}

// Proto file for Curl_easy
message Curl_easy {
  uint32 magic = 1;
  int64 id = 2;
  Curl_easy next = 3;
  Curl_easy prev = 4;
  connectdata conn = 5;
  Curl_llist_element connect_queue = 6;
  Curl_llist_element conn_queue = 7;
  CURLMstate mstate = 8;
  CURLcode result = 9;
  Curl_message msg = 10;
  easy_pollset last_poll = 11;
  Names dns = 12;
  Curl_multi multi = 13;
  Curl_multi multi_easy = 14;
  Curl_share share = 15;
  SingleRequest req = 16;
  UserDefined set = 17;
  CookieInfo cookies = 18;
  hsts hsts = 19;
  altsvcinfo asi = 20;
  Progress progress = 21;
  UrlState state = 22;
  WildcardData wildcard = 23;
  PureInfo info = 24;
  curl_tlssessioninfo tsi = 25;
}

// Proto file for var
message var {
  var next = 1;
  string name = 2;
  string content = 3;
  uint64 clen = 4;
}

// Proto file for State
message State {
  getout urlnode = 1;
  URLGlob inglob = 2;
  repeated URLGlob urls = 3;
  string outfiles = 4;
  string httpgetfields = 5;
  string uploadfile = 6;
  int64 infilenum = 7;
  int64 up = 8;
  int64 urlnum = 9;
  int64 li = 10;
}

// Proto file for dynhds_entry
message dynhds_entry {
  string name = 1;
  string value = 2;
  uint64 namelen = 3;
  uint64 valuelen = 4;
}

// Proto file for getout
message getout {
  getout next = 1;
  string url = 2;
  string outfile = 3;
  string infile = 4;
  int32 flags = 5;
  int32 num = 6;
}

// Proto file for tftp_packet
message tftp_packet {
  bytes data = 1;
}

// Proto file for buf_chunk
message buf_chunk {
  buf_chunk next = 1;
  uint64 dlen = 2;
  uint64 r_offset = 3;
  uint64 w_offset = 4;
  // (省略其他字段)
}

// Proto file for tool_mime
message tool_mime {
  toolmimekind kind = 1;
  tool_mime parent = 2;
  tool_mime prev = 3;
  string data = 4;
  string name = 5;
  string filename = 6;
  string type = 7;
  string encoder = 8;
  repeated string headers = 9;
  tool_mime subparts = 10;
  int64 origin = 11;
  int64 size = 12;
  int64 curpos = 13;
  GlobalConfig config = 14;
}

// Enumeration for toolmimekind
enum toolmimekind {
  // 根据实际情况定义枚举值
  UNKNOWN = 0;
}

// Proto file for curl_tlssessioninfo
message curl_tlssessioninfo {
  curl_sslbackend backend = 1;
  bytes internals = 2;
}

// Proto file for pingpong
message pingpong {
    uint64 nread_resp = 1;
    bool pending_resp = 2;
    string sendthis = 3;
    uint64 sendleft = 4;
    uint64 sendsize = 5;
    curltime response = 6;
    int64 response_time = 7;
    dynbuf sendbuf = 8;
    dynbuf recvbuf = 9;
    uint64 overflow = 10;
    uint64 nfinal = 11;
    // (函数指针类型忽略)
    // 示例：statemachine 字段
    CURLcode statemachine = 13;
    // 示例：endofresp 字段
    bool endofresp = 14;
  }
  
  // Proto file for Curl_sockaddr_storage
  message Curl_sockaddr_storage {
    // 示例：buffer 字段
    bytes buffer = 1;
  }
  
  // Proto file for bufc_pool
  message bufc_pool {
    buf_chunk spare = 1;
    uint64 chunk_size = 2;
    uint64 spare_count = 3;
    uint64 spare_max = 4;
  }
  
  // Proto file for GlobalConfig
  message GlobalConfig {
    bool showerror = 1;
    bool silent = 2;
    bool noprogress = 3;
    bool isatty = 4;
    string trace_dump = 5;
    // 示例：trace_stream 字段
    _IO_FILE trace_stream = 6;
    bool trace_fopened = 7;
    // 示例：tracetype 字段
    trace tracetype = 8;
    bool tracetime = 9;
    bool traceids = 10;
    int32 progressmode = 11;
    string libcurl = 12;
    bool fail_early = 13;
    bool styled_output = 14;
    int64 ms_per_transfer = 15;
    bool parallel = 16;
    uint32 parallel_max = 17;
    bool parallel_connect = 18;
    string help_category = 19;
    var variables = 20;
    OperationConfig first = 21;
    OperationConfig current = 22;
    OperationConfig last = 23;
  }
  
  // Proto file for OperationConfig
  message OperationConfig {
    bool remote_time = 1;
    string useragent = 2;
    // 示例：cookies 字段
    repeated string cookies = 3;
    string cookiejar = 4;
    // 示例：cookiefiles 字段
    repeated string cookiefiles = 5;
    string altsvc = 6;
    string hsts = 7;
    bool cookiesession = 8;
    bool encoding = 9;
    bool tr_encoding = 10;
    uint64 authtype = 11;
    bool use_resume = 12;
    bool resume_from_current = 13;
    bool disable_epsv = 14;
    bool disable_eprt = 15;
    bool ftp_pret = 16;
    string proto_str = 17;
    bool proto_present = 18;
    string proto_redir_str = 19;
    bool proto_redir_present = 20;
    string proto_default = 21;
    int64 resume_from = 22;
    string postfields = 23;
    dynbuf postdata = 24;
    string referer = 25;
    string query = 26;
    int64 timeout_ms = 27;
    int64 connecttimeout_ms = 28;
    int64 maxredirs = 29;
    int64 max_filesize = 30;
    string output_dir = 31;
    string headerfile = 32;
    string ftpport = 33;
    string iface = 34;
    int64 localport = 35;
    int64 localportrange = 36;
    uint32 porttouse = 37;
    string range = 38;
    int64 low_speed_limit = 39;
    int64 low_speed_time = 40;
    string dns_servers = 41;
    string dns_interface = 42;
    string dns_ipv4_addr = 43;
    string dns_ipv6_addr = 44;
    string userpwd = 45;
    string login_options = 46;
    string tls_username = 47;
    string tls_password = 48;
    string tls_authtype = 49;
    string proxy_tls_username = 50;
    string proxy_tls_password = 51;
    string proxy_tls_authtype = 52;
    string proxyuserpwd = 53;
    string proxy = 54;
    int32 proxyver = 55;
    string noproxy = 56;
    string mail_from = 57;
    // 示例：mail_rcpt 字段
    repeated string mail_rcpt = 58;
    string mail_auth = 59;
    bool mail_rcpt_allowfails = 60;
    string sasl_authzid = 61;
    bool sasl_ir = 62;
    bool proxytunnel = 63;
    bool ftp_append = 64;
    bool use_ascii = 65;
    bool autoreferer = 66;
    bool failonerror = 67;
    bool failwithbody = 68;
    bool show_headers = 69;
    bool no_body = 70;
    bool dirlistonly = 71;
    bool followlocation = 72;
    bool unrestricted_auth = 73;
    bool netrc_opt = 74;
    bool netrc = 75;
    string netrc_file = 76;
    getout url_list = 77;
    getout url_last = 78;
    getout url_get = 79;
    getout url_out = 80;
    getout url_ul = 81;
    string ipfs_gateway = 82;
    string doh_url = 83;
    string cipher_list = 84;
    string proxy_cipher_list = 85;
    string cipher13_list = 86;
    string proxy_cipher13_list = 87;
    string cert = 88;
    string proxy_cert = 89;
    string cert_type = 90;
    string proxy_cert_type = 91;
    string cacert = 92;
    string proxy_cacert = 93;
    string capath = 94;
    string proxy_capath = 95;
    string crlfile = 96;
    string proxy_crlfile = 97;
    string pinnedpubkey = 98;
    string proxy_pinnedpubkey = 99;
    string key = 100;
    string proxy_key = 101;
    string key_type = 102;
    string proxy_key_type = 103;
    string key_passwd = 104;
    string proxy_key_passwd = 105;
    string pubkey = 106;
    string hostpubmd5 = 107;
    string hostpubsha256 = 108;
    string engine = 109;
    string etag_save_file = 110;
    string etag_compare_file = 111;
    bool crlf = 112;
    string customrequest = 113;
    string ssl_ec_curves = 114;
    string krblevel = 115;
    string request_target = 116;
    int64 httpversion = 117;
    bool http09_allowed = 118;
    bool nobuffer = 119;
    bool readbusy = 120;
    bool globoff = 121;
    bool use_httpget = 122;
    bool insecure_ok = 123;
    bool doh_insecure_ok = 124;
    bool proxy_insecure_ok = 125;
    bool terminal_binary_ok = 126;
    bool verifystatus = 127;
    bool doh_verifystatus = 128;
    bool create_dirs = 129;
    bool ftp_create_dirs = 130;
    bool ftp_skip_ip = 131;
    bool proxynegotiate = 132;
    bool proxyntlm = 133;
    bool proxydigest = 134;
    bool proxybasic = 135;
    bool proxyanyauth = 136;
    bool jsoned = 137;
    string writeout = 138;
    // 示例：quote 字段
    repeated string quote = 139;
    // 示例：postquote 字段
    repeated string postquote = 140;
    // 示例：prequote 字段
    repeated string prequote = 141;
    int64 ssl_version = 142;
    int64 ssl_version_max = 143;
    int64 proxy_ssl_version = 144;
    int64 ip_version = 145;
    int64 create_file_mode = 146;
    curl_TimeCond timecond = 147;
    int64 condtime = 148;
    // 示例：headers 字段
    repeated string headers = 149;
    // 示例：proxyheaders 字段
    repeated string proxyheaders = 150;
    // 示例：mimeroot 字段
    tool_mime mimeroot = 151;
    // 示例：mimecurrent 字段
    tool_mime mimecurrent = 152;
    // 示例：mimepost 字段
    curl_mime mimepost = 153;
    // 示例：telnet_options 字段
    repeated string telnet_options = 154;
    // 示例：resolve 字段
    repeated string resolve = 155;
    // 示例：connect_to 字段
    repeated string connect_to = 156;
    HttpReq httpreq = 157;
    int64 sendpersecond = 158;
    int64 recvpersecond = 159;
    bool ftp_ssl = 160;
    bool ftp_ssl_reqd = 161;
    bool ftp_ssl_control = 162;
    bool ftp_ssl_ccc = 163;
    int32 ftp_ssl_ccc_mode = 164;
    string preproxy = 165;
    bool socks5_gssapi_nec = 166;
    uint64 socks5_auth = 167;
    string proxy_service_name = 168;
    string service_name = 169;
    bool tcp_nodelay = 170;
    bool tcp_fastopen = 171;
    int64 req_retry = 172;
    bool retry_all_errors = 173;
    bool retry_connrefused = 174;
    int64 retry_delay = 175;
    int64 retry_maxtime = 176;
    string ftp_account = 177;
    string ftp_alternative_to_user = 178;
    int32 ftp_filemethod = 179;
    int64 mime_options = 180;
    int64 tftp_blksize = 181;
    bool tftp_no_options = 182;
    bool ignorecl = 183;
    bool disable_sessionid = 184;
    bool raw = 185;
    bool post301 = 186;
    bool post302 = 187;
    bool post303 = 188;
    bool nokeepalive = 189;
    int64 alivetime = 190;
    bool content_disposition = 191;
    int32 default_node_flags = 192;
    bool xattr = 193;
    int64 gssapi_delegation = 194;
    bool ssl_allow_beast = 195;
    bool proxy_ssl_allow_beast = 196;
    bool ssl_no_revoke = 197;
    bool ssl_revoke_best_effort = 198;
    bool native_ca_store = 199;
    bool proxy_native_ca_store = 200;
    bool ssl_auto_client_cert = 201;
    bool proxy_ssl_auto_client_cert = 202;
    string oauth_bearer = 203;
    bool noalpn = 204;
    string unix_socket_path = 205;
    bool abstract_unix_socket = 206;
    bool falsestart = 207;
    bool path_as_is = 208;
    int64 expect100timeout_ms = 209;
    bool suppress_connect_headers = 210;
    bool synthetic_error = 211;
    bool ssh_compression = 212;
    int64 happy_eyeballs_timeout_ms = 213;
    bool haproxy_protocol = 214;
    string haproxy_clientip = 215;
    bool disallow_username_in_url = 216;
    string aws_sigv4 = 217;
    // 示例：file_clobber_mode 字段
    OperationConfig.file_clobber_mode file_clobber_mode = 218;
    GlobalConfig global = 219;
    OperationConfig prev = 220;
    OperationConfig next = 221;
    State state = 222;
    bool rm_partial = 223;
  }
  
  // Enumeration for OperationConfig.file_clobber_mode
  enum file_clobber_mode {
    // 根据实际情况定义枚举值
    UNKNOWN = 0;
  }
  
  // Proto file for State
  message State {
    getout urlnode = 1;
    URLGlob inglob = 2;
    // 示例：urls 字段
    repeated URLGlob urls = 3;
    string outfiles = 4;
    string httpgetfields = 5;
    string uploadfile = 6;
    int64 infilenum = 7;
    int64 up = 8;
    int64 urlnum = 9;
    int64 li = 10;
  }
  
  // Proto file for dynhds_entry
  message dynhds_entry {
    string name = 1;
    string value = 2;
    uint64 namelen = 3;
    uint64 valuelen = 4;
  }
  
  // Proto file for getout
  message getout {
    getout next = 1;
    string url = 2;
    string outfile = 3;
    string infile = 4;
    int32 flags = 5;
    int32 num = 6;
  }
  
  // Proto file for tftp_packet
  message tftp_packet {
    bytes data = 1;
  }

  message Curl_cfilter {
    Curl_cftype cft = 1;
    Curl_cfilter next = 2;
    google.protobuf.Any ctx = 3;
    ConnectData conn = 4;
    int32 sockindex = 5;
    uint32 connected = 6;
  }
  
  message tftphdr {
    int32 th_opcode = 1;
    uint32 th_block = 2;
    bytes th_data = 3;
  }
  
  message SASL {
    SASLproto params = 1;
    saslstate state = 2;
    string curmech = 3;
    uint32 authmechs = 4;
    uint32 prefmech = 5;
    uint32 authused = 6;
    uint32 resetprefs = 7;
    uint32 mutual_auth = 8;
    uint32 force_ir = 9;
  }
  
  message dynhds {
    repeated dynhds_entry hds = 1;
    uint64 hds_len = 2;
    uint64 hds_allc = 3;
    uint64 max_entries = 4;
    uint64 strs_len = 5;
    uint64 max_strs_size = 6;
    int32 opts = 7;
  }
  
  message back {
    FreadFunc fread_func = 1;
    google.protobuf.Any fread_in = 2;
    string postdata = 3;
    int64 postsize = 4;
    Curl_easy data = 5;
  }
  
  message in6_addr {
    in6_addr__in6_u __in6_u = 1;
  }
  
  message in_addr {
    uint32 s_addr = 1;
  }
  
  message __sigset_t {
    repeated uint64 __val = 1;
  }
  
  message Curl_chunker {
    int64 datasize = 1;
    ChunkyState state = 2;
    CHUNKcode last_code = 3;
    dynbuf trailer = 4;
    uint8 hexindex = 5;
    bytes hexbuffer = 6;
    uint32 ignore_body = 7;
  }
  
  message FTP {
    string path = 1;
    string pathalloc = 2;
    curl_pp_transfer transfer = 3;
    int64 downloadsize = 4;
  }
  
  message RTSP {
    HTTP http_wrapper = 1;
    int64 CSeq_sent = 2;
    int64 CSeq_recv = 3;
  }
  
  message cf_hc_baller {
    string name = 1;
    Curl_cfilter cf = 2;
    CURLcode result = 3;
    curltime started = 4;
    int32 reply_ms = 5;
    bool enabled = 6;
  }
  
  message ProgressData {
    int32 calls = 1;
    int64 prev = 2;
    timeval prevtime = 3;
    int32 width = 4;
    _IO_FILE out = 5;
    int64 initial_size = 6;
    uint32 tick = 7;
    int32 bar = 8;
    int32 barmove = 9;
  }
  
  message smb_request {
    smb_req_state state = 1;
    string path = 2;
    uint16 tid = 3;
    uint16 fid = 4;
    CURLcode result = 5;
  }
  
  message SMTP {
    curl_pp_transfer transfer = 1;
    string custom = 2;
    repeated string rcpt = 3;
    int32 rcpt_last_error = 4;
    uint32 eob = 5;
    uint32 rcpt_had_ok = 6;
    uint32 trailing_crlf = 7;
  }
  
  message OutStruct {
    string filename = 1;
    bool alloc_filename = 2;
    bool is_cd_filename = 3;
    bool s_isreg = 4;
    bool fopened = 5;
    _IO_FILE stream = 6;
    int64 bytes = 7;
    int64 init = 8;
  }
  
  message dohaddr {
    int32 type = 1;
    dohaddr__in6_u ip = 2;
  }
  
  message IMAP {
    curl_pp_transfer transfer = 1;
    string mailbox = 2;
    string uidvalidity = 3;
    string uid = 4;
    string mindex = 5;
    string section = 6;
    string partial = 7;
    string query = 8;
    string custom = 9;
    string custom_params = 10;
  }
  
  message smb_header {
    uint8 nbt_type = 1;
    uint8 nbt_flags = 2;
    uint16 nbt_length = 3;
    bytes magic = 4;
    uint8 command = 5;
    uint32 status = 6;
    uint8 flags = 7;
    uint16 flags2 = 8;
    uint16 pid_high = 9;
    bytes signature = 10;
    uint16 pad = 11;
    uint16 tid = 12;
    uint16 pid = 13;
    uint16 uid = 14;
    uint16 mid = 15;
  }
  
  message althost {
    string host = 1;
    uint16 port = 2;
    alpnid alpnid = 3;
  }
  
  message cf_call_data {
    Curl_easy data = 1;
  }
  
  message MQTT {
    string sendleftovers = 1;
    uint64 nsend = 2;
    uint64 npacket = 3;
    uint8 firstbyte = 4;
    dynbuf recvbuf = 5;
    bytes pkt_hd = 6;
  }
  
  message tftp_state_data {
    tftp_state_t state = 1;
    tftp_mode_t mode = 2;
    tftp_error_t error = 3;
    tftp_event_t event = 4;
    Curl_easy data = 5;
    int32 sockfd = 6;
    int32 retries = 7;
    int32 retry_time = 8;
    int32 retry_max = 9;
    int64 rx_time = 10;
    Curl_sockaddr_storage local_addr = 11;
    Curl_sockaddr_storage remote_addr = 12;
    uint32 remote_addrlen = 13;
    int32 rbytes = 14;
    int32 sbytes = 15;
    int32 blksize = 16;
    int32 requested_blksize = 17;
    uint16 block = 18;
    tftp_packet rpacket = 19;
    tftp_packet spacket = 20;
  }
  
  message ftp_conn {
    pingpong pp = 1;
    string account = 2;
    string alternative_to_user = 3;
    string entrypath = 4;
    string file = 5;
    repeated string dirs = 6;
    string newhost = 7;
    string prevpath = 8;
    char transfertype = 9;
    int64 retr_size_saved = 10;
    string server_os = 11;
    int64 known_filesize = 12;
    int32 dirdepth = 13;
    int32 cwdcount = 14;
    int32 count1 = 15;
    int32 count2 = 16;
    int32 count3 = 17;
    uint16 newport = 18;
    uint8 state = 19;
    uint8 state_saved = 20;
    uint8 use_ssl = 21;
    uint8 ccc = 22;
    uint32 ftp_trying_alternative = 23;
    uint32 dont_check = 24;
    uint32 ctl_valid = 25;
    uint32 cwddone = 26;
    uint32 cwdfail = 27;
    uint32 wait_data_conn = 28;
  }
  
  message tftphdr_storage_t {
    tftphdr hdr = 1;
    bytes storage = 2;
  }
  
  message httpreq {
    bytes method = 1;
    string scheme = 2;
    string authority = 3;
    string path = 4;
    dynhds headers = 5;
    dynhds trailers = 6;
  }
  
  message smb_conn {
    smb_conn_state state = 1;
    string user = 2;
    string domain = 3;
    string share = 4;
    bytes challenge = 5;
    uint32 session_key = 6;
    uint16 uid = 7;
    string recv_buf = 8;
    uint64 upload_size = 9;
    uint64 send_size = 10;
    uint64 sent = 11;
    uint64 got = 12;
  }
  
  message HdrCbData {
    GlobalConfig global = 1;
    OperationConfig config = 2;
    OutStruct outs = 3;
    OutStruct heads = 4;
    OutStruct etag_save = 5;
    bool honor_cd_filename = 6;
  }
  
  message pop3_conn {
    pingpong pp = 1;
    pop3state state = 2;
    uint64 eob = 3;
    uint64 strip = 4;
    SASL sasl = 5;
    string apoptimestamp = 6;
    uint8 authtypes = 7;
    uint8 preftype = 8;
    uint32 ssldone = 9;
    uint32 tls_supported = 10;
  }
  
  message eyeballer {
    string name = 1;
    Curl_addrinfo first = 2;
    Curl_addrinfo addr = 3;
    int32 ai_family = 4;
    cf_create cf_create = 5;
    Curl_cfilter cf = 6;
    eyeballer primary = 7;
    int64 delay_ms = 8;
    curltime started = 9;
    int64 timeoutms = 10;
    expire_id timeout_id = 11;
    CURLcode result = 12;
    int32 error = 13;
    uint32 rewinded = 14;
    uint32 has_started = 15;
    uint32 is_done = 16;
    uint32 connected = 17;
    uint32 inconclusive = 18;
  }
  
  message smtp_conn {
    pingpong pp = 1;
    SASL sasl = 2;
    smtpstate state = 3;
    string domain = 4;
    uint32 ssldone = 5;
    uint32 tls_supported = 6;
    uint32 size_supported = 7;
    uint32 utf8_supported = 8;
    uint32 auth_supported = 9;
  }
  
  message Sockets {
    repeated int32 sockets = 1;
    int32 count = 2;
    int32 max_count = 3;
  }
  
  message Curl_sockaddr_ex {
    int32 family = 1;
    int32 socktype = 2;
    int32 protocol = 3;
    uint32 addrlen = 4;
    sa_ex_u sa_ex_u = 5;
  }
  
  message andx {
    uint8 command = 1;
    uint8 pad = 2;
    uint16 offset = 3;
  }
  
  message bufq {
    buf_chunk head = 1;
    buf_chunk tail = 2;
    buf_chunk spare = 3;
    bufc_pool pool = 4;
    uint64 chunk_count = 5;
    uint64 max_chunks = 6;
    uint64 chunk_size = 7;
    int32 opts = 8;
  }
  
  message ssl_peer {
    string hostname = 1;
    string dispname = 2;
    string sni = 3;
    uint32 is_ip_address = 4;
  }
  
  message mqtt_conn {
    mqttstate state = 1;
    mqttstate nextstate = 2;
    uint32 packetid = 3;
  }
  
  message imap_conn {
    pingpong pp = 1;
    SASL sasl = 2;
    dynbuf dyn = 3;
    string mailbox = 4;
    string mailbox_uidvalidity = 5;
    imapstate state = 6;
    bytes resptag = 7;
    uint8 preftype = 8;
    uint8 cmdid = 9;
    uint32 ssldone = 10;
    uint32 preauth = 11;
    uint32 tls_supported = 12;
    uint32 login_disabled = 13;
    uint32 ir_supported = 14;
  }

  message HTTP {
    int64 postsize = 1;
    string postdata = 2;
    Back backup = 3;
    enum Sending {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    Sending sending = 4;
    google.protobuf.Any h2_ctx = 5;
    google.protobuf.Any h3_ctx = 6;
    DynBuf send_buffer = 7;
  }
  
  message Back {
    DynBuf buf = 1;
    int32 rtp_channel = 2;
    uint64 rtp_len = 3;
    RTPParseState state = 4;
    uint32 in_header = 5;
  }
  
  message FILEPROTO {
    string path = 1;
    string freepath = 2;
    int32 fd = 3;
  }
  
  message POP3 {
    CURLppTransfer transfer = 1;
    string id = 2;
    string custom = 3;
  }
  
  message PLWinNTSubstate {
    enum Time {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    Time time = 1;
    enum DirOrSize {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    DirOrSize dirorsize = 2;
    enum Filename {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    Filename filename = 3;
  }
  
  message PLUnixSubstate {
    enum TotalDirSize {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    TotalDirSize total_dirsize = 1;
    enum HLinks {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    HLinks hlinks = 2;
    enum User {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    User user = 3;
    enum Group {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    Group group = 4;
    enum Size {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    Size size = 5;
    enum Time {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    Time time = 6;
    enum Filename {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    Filename filename = 7;
    enum Symlink {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    Symlink symlink = 8;
  }
  
  message TELNET {
    int32 please_negotiate = 1;
    int32 already_negotiated = 2;
    repeated int32 us = 3;
    repeated int32 usq = 4;
    repeated int32 us_preferred = 5;
    repeated int32 him = 6;
    repeated int32 himq = 7;
    repeated int32 him_preferred = 8;
    repeated int32 subnegotiation = 9;
    string subopt_ttype = 10;
    string subopt_xdisploc = 11;
    uint32 subopt_wsx = 12;
    uint32 subopt_wsy = 13;
    TelnetReceive telrcv_state = 14;
    repeated string telnet_vars = 15;
    DynBuf out = 16;
    bytes subbuffer = 17;
    bytes subpointer = 18;
    bytes subend = 19;
  }
  
  message SSHPROTO {
    string path = 1;
  }
  
  message CurlSSLBackend {
    CURLSSLBackend id = 1;
    string name = 2;
  }
  
  message timeval {
    int64 tv_sec = 1;
    int64 tv_usec = 2;
  }
  
  message sockaddr_in6 {
    uint32 sin6_family = 1;
    uint32 sin6_port = 2;
    uint32 sin6_flowinfo = 3;
    bytes sin6_addr = 4;
    uint32 sin6_scope_id = 5;
  }
  
  message sockaddr_in {
    uint32 sin_family = 1;
    uint32 sin_port = 2;
    bytes sin_addr = 3;
    bytes sin_zero = 4;
  }
  
  message sockaddr_un {
    uint32 sun_family = 1;
    string sun_path = 2;
  }
  
  message sigaction {
    google.protobuf.Any __sigaction_handler = 1;
    bytes sa_mask = 2;
    int32 sa_flags = 3;
    google.protobuf.Any sa_restorer = 4;
  }
  
  message sockaddr_storage {
    uint32 ss_family = 1;
    bytes __ss_padding = 2;
    uint64 __ss_align = 3;
  }
  
  message ZStreamS {
    bytes next_in = 1;
    uint32 avail_in = 2;
    uint64 total_in = 3;
    bytes next_out = 4;
    uint32 avail_out = 5;
    uint64 total_out = 6;
    string msg = 7;
    google.protobuf.Any state = 8;
    google.protobuf.Any zalloc = 9;
    google.protobuf.Any zfree = 10;
    google.protobuf.Any opaque = 11;
    int32 data_type = 12;
    uint64 adler = 13;
    uint64 reserved = 14;
  }
  
  message Hostent {
    string h_name = 1;
    repeated string h_aliases = 2;
    int32 h_addrtype = 3;
    int32 h_length = 4;
    repeated string h_addr_list = 5;
  }
  
  message HTTPMap {
    string str = 1;
    int32 num = 2;
  }
  
  message CurlHashIterator {
    CurlHash hash = 1;
    int32 slot_index = 2;
    CurlLlistElement current_element = 3;
  }
  
  message NSPrintf {
    string buffer = 1;
    uint64 length = 2;
    uint64 max = 3;
  }
  
  message MD5Context {
    MD5Params md5_hash = 1;
    google.protobuf.Any md5_hashctx = 2;
  }
  
  message ALPNProtoBuf {
    bytes data = 1;
    int32 len = 2;
  }
  
  message LongShort {
    string lname = 1;
    enum Desc {
      UNNAMED = 0;
      // Add other enum values as needed
    }
    Desc desc = 2;
    char letter = 3;
    CmdlineT cmd = 4;
  }
  
  message CBData {
    CurlEasy easy_handle = 1;
    int32 response_received = 2;
    int32 paused = 3;
    uint64 remaining_bytes = 4;
  }
  
  message Union {
    int64 sig = 1;
    uint64 uns = 2;
  }
  
  message PutBuffer {
    string buf = 1;
    uint64 len = 2;
  }
  
  message CurlSSL {
    CurlSSLBackend info = 1;
    uint32 supports = 2;
    uint64 sizeof_ssl_backend_data = 3;
    google.protobuf.Any init = 4;
    google.protobuf.Any cleanup = 5;
    google.protobuf.Any version = 6;
    google.protobuf.Any check_cxn = 7;
    google.protobuf.Any shut_down = 8;
    google.protobuf.Any data_pending = 9;
    google.protobuf.Any random = 10;
    google.protobuf.Any cert_status_request = 11;
    google.protobuf.Any connect_blocking = 12;
    google.protobuf.Any connect_nonblocking = 13;
    google.protobuf.Any adjust_pollset = 14;
    google.protobuf.Any get_internals = 15;
    google.protobuf.Any close = 16;
    google.protobuf.Any close_all = 17;
    google.protobuf.Any session_free = 18;
    google.protobuf.Any set_engine = 19;
    google.protobuf.Any set_engine_default = 20;
    google.protobuf.Any engines_list = 21;
    google.protobuf.Any false_start = 22;
    google.protobuf.Any sha256sum = 23;
    google.protobuf.Any attach_data = 24;
    google.protobuf.Any detach_data = 25;
    google.protobuf.Any free_multi_ssl_backend_data = 26;
    google.protobuf.Any recv_plain = 27;
    google.protobuf.Any send_plain = 28;
  }
  
  message Feat {
    string name = 1;
    google.protobuf.Any present = 2;
    int32 bitmask = 3;
  }
  
  message BufChunk {
    Union data = 1;
    google.protobuf.Any dummy = 2;
  }
  
  message Finder {
    string env = 1;
    string append = 2;
    bool withoutdot = 3;
  }
  
  message MimeEncoder {
    string name = 1;
    google.protobuf.Any encodefunc = 2;
    google.protobuf.Any sizefunc = 3;
  }
  
  message VAInput {
    Union str = 1;
    google.protobuf.Any ptr = 2;
    int64 nums = 3;
    uint64 numu = 4;
    double dnum = 5;
  }
  
  message SigIntSt {
    int32 num = 1;
    string expected = 2;
    string result = 3;
  }
  
  message URLTestCase {
    string in = 1;
    string out = 2;
    uint32 urlflags = 3;
    uint32 getflags = 4;
    CURLUcode ucode = 5;
  }
  
  message CategoryDescriptors {
    string opt = 1;
    string desc = 2;
    uint32 category = 3;
  }
  
  message Entry {
    string name = 1;
    string exp = 2;
  }
  
  message UnsintSt {
    uint32 num = 1;
    string expected = 2;
    string result = 3;
  }
  
  message ChunkedWriter {
    CurlCwriter super = 1;
    CurlChunker ch = 2;
  }
  
  message SHA256Ctx {
    EVPMDContextSt openssl_ctx = 1;
  }

  message FontCollection {
  uint32 flavor = 1;
  uint32 header_version = 2;
  repeated uint32 tables_keys = 3;
  repeated FontTable tables_values = 4;
  repeated Font fonts = 5;
  repeated ContourVec contours = 6;
}

message ContourVec {
  repeated GlyphPoint points = 1;
}

message FontTable {
  repeated FontTableSelf tables = 1;
}

message FontTableSelf {
  uint32 tag = 1;
  uint32 checksum = 2;
  uint32 offset = 3;
  uint32 length = 4;
  bytes data = 5;
  repeated uint8 buffer = 6;
  uint8 flag_byte = 7;
}

message http_resp {
  int32 status = 1;
  string description = 2;
  dynhds headers = 3;
  dynhds trailers = 4;
  http_resp prev = 5;
}

message httprequest {
  bytes reqbuf = 1;
  bool connect_request = 2;
  uint32 connect_port = 3;
  uint64 checkindex = 4;
  uint64 offset = 5;
  int64 testno = 6;
  int64 partno = 7;
  bool open = 8;
  bool auth_req = 9;
  bool auth = 10;
  uint64 cl = 11;
  bool digest = 12;
  bool ntlm = 13;
  int32 delay = 14;
  int32 writedelay = 15;
  int32 skip = 16;
  int32 rcmd = 17;
  int32 prot_version = 18;
  int32 callcount = 19;
  bool skipall = 20;
  bool noexpect = 21;
  bool connmon = 22;
  bool upgrade = 23;
  bool upgrade_request = 24;
  bool close = 25;
  int32 done_processing = 26;
}

message Tdata {
  Curl_share share = 1;
  string url = 2;
}

message writeoutvar {
  string name = 1;
  writeoutid id = 2;
  CURLINFO ci = 3;
  int32 writefunc = 4;
}

message unsshort_st {
  uint32 num = 1;
  string expected = 2;
  bytes result = 3;
}

message curloff_st {
  int64 num = 1;
  string expected = 2;
  bytes result = 3;
}

message smb_nt_create {
  uint8 word_count = 1;
  andx andx = 2;
  uint8 pad = 3;
  uint16 name_length = 4;
  uint32 flags = 5;
  uint32 root_fid = 6;
  uint32 access = 7;
  int64 allocation_size = 8;
  uint32 ext_file_attributes = 9;
  uint32 share_access = 10;
  uint32 create_disposition = 11;
  uint32 create_options = 12;
  uint32 impersonation_level = 13;
  uint8 security_flags = 14;
  uint16 byte_count = 15;
  bytes bytes = 16;
}

message stsentry {
  Curl_llist_element node = 1;
  string host = 2;
  bool includeSubDomains = 3;
  int64 expires = 4;
}

message tzinfo {
  bytes name = 1;
  int32 offset = 2;
}

message dcheck {
  string input = 1;
  int64 output = 2;
}

message resdata {
  curltime start = 1;
}

message URLPattern {
  union {
    Set set = 1;
    CharRange char_range = 2;
    NumRange num_range = 3;
  } union_field = 1;
}

message Curl_handler {
  string scheme = 1;
  int32 defport = 2;
  uint32 protocol = 3;
  uint32 family = 4;
  uint32 flags = 5;
}

message ContentType {
  string extension = 1;
  string type = 2;
}

message s_tls_max {
  string tls_max_str = 1;
  int64 tls_max = 2;
}

message altsvc {
  althost src = 1;
  althost dst = 2;
  int64 expires = 3;
  bool persist = 4;
  int32 prio = 5;
  Curl_llist_element node = 6;
}

message smb_close {
  uint8 word_count = 1;
  uint16 fid = 2;
  uint32 last_mtime = 3;
  uint16 byte_count = 4;
}

message cf_proxy_ctx {
  Curl_cfilter cf_protocol = 1;
}

message smb_tree_disconnect {
  uint8 word_count = 1;
  uint16 byte_count = 2;
}

message state {
  int32 index = 1;
}

message srvr_sockaddr_union_t {
  sockaddr sa = 1;
  sockaddr_in sa4 = 2;
  sockaddr_in6 sa6 = 3;
  sockaddr_un sau = 4;
}

message sigpipe_ignore {
  sigaction old_pipe_act = 1;
  bool no_signal = 2;
}

message sigshort_st {
  int16 num = 1;
  string expected = 2;
  bytes result = 3;
}

message ReadThis {
  Curl_easy easy = 1;
  int64 origin = 2;
  int32 count = 3;
}

message ftp_parselist_data {
  union {
    pl_winNT_mainstate main = 1;
    pl_winNT_substate sub = 2;
  } union_field = 1;
}

message unnamed_union {
  ulong to_ulong = 1;
  long to_long = 2;
}

message proto_name_tokenp {
  string proto_name = 1;
  string proto_tokenp = 2;
}

message name_const {
  string name = 1;
  ulong namelen = 2;
}

message connfind {
  int64 id_tofind = 1;
  connectdata found = 2;
}

message per_transfer {
  per_transfer next = 1;
  per_transfer prev = 2;
  OperationConfig config = 3;
  curl_certinfo certinfo = 4;
  Curl_easy curl = 5;
  int64 retry_numretries = 6;
  int64 retry_sleep_default = 7;
  int64 retry_sleep = 8;
  timeval start = 9;
  timeval retrystart = 10;
  string this_url = 11;
  uint32 urlnum = 12;
  string outfile = 13;
  bool infdopen = 14;
  int32 infd = 15;
  bool noprogress = 16;
  ProgressData progressbar = 17;
  OutStruct outs = 18;
  OutStruct heads = 19;
  OutStruct etag_save = 20;
  HdrCbData hdrcbdata = 21;
  int64 num_headers = 22;
  bool was_last_header_empty = 23;
  bool added = 24;
  int64 startat = 25;
  bool abort = 26;
  int64 dltotal = 27;
  int64 dlnow = 28;
  int64 ultotal = 29;
  int64 ulnow = 30;
  int64 uploadfilesize = 31;
  int64 uploadedsofar = 32;
  bool dltotal_added = 33;
  bool ultotal_added = 34;
  string uploadfile = 35;
  string errorbuffer = 36;
}

message http_resp {
  int32 status = 1;
  string description = 2;
  dynhds headers = 3;
  dynhds trailers = 4;
  http_resp prev = 5;
}

message httprequest {
  bytes reqbuf = 1;
  bool connect_request = 2;
  uint32 connect_port = 3;
  uint64 checkindex = 4;
  uint64 offset = 5;
  int64 testno = 6;
  int64 partno = 7;
  bool open = 8;
  bool auth_req = 9;
  bool auth = 10;
  uint64 cl = 11;
  bool digest = 12;
  bool ntlm = 13;
  int32 delay = 14;
  int32 writedelay = 15;
  int32 skip = 16;
  int32 rcmd = 17;
  int32 prot_version = 18;
  int32 callcount = 19;
  bool skipall = 20;
  bool noexpect = 21;
  bool connmon = 22;
  bool upgrade = 23;
  bool upgrade_request = 24;
  bool close = 25;
  int32 done_processing = 26;
}

message Tdata {
  Curl_share share = 1;
  string url = 2;
}

message writeoutvar {
  string name = 1;
  writeoutid id = 2;
  CURLINFO ci = 3;
  int32 writefunc = 4;
}

message unsshort_st {
  uint32 num = 1;
  string expected = 2;
  bytes result = 3;
}

message curloff_st {
  int64 num = 1;
  string expected = 2;
  bytes result = 3;
}

message smb_nt_create {
  uint8 word_count = 1;
  andx andx = 2;
  uint8 pad = 3;
  uint16 name_length = 4;
  uint32 flags = 5;
  uint32 root_fid = 6;
  uint32 access = 7;
  int64 allocation_size = 8;
  uint32 ext_file_attributes = 9;
  uint32 share_access = 10;
  uint32 create_disposition = 11;
  uint32 create_options = 12;
  uint32 impersonation_level = 13;
  uint8 security_flags = 14;
  uint16 byte_count = 15;
  bytes bytes = 16;
}

message stsentry {
  Curl_llist_element node = 1;
  string host = 2;
  bool includeSubDomains = 3;
  int64 expires = 4;
}

message tzinfo {
  bytes name = 1;
  int32 offset = 2;
}

message dcheck {
  string input = 1;
  int64 output = 2;
}

message resdata {
  curltime start = 1;
}

message URLPattern {
  union {
    Set set = 1;
    CharRange char_range = 2;
    NumRange num_range = 3;
  } union_field = 1;
}

message Curl_handler {
  string scheme = 1;
  int32 defport = 2;
  uint32 protocol = 3;
  uint32 family = 4;
  uint32 flags = 5;
}

message ContentType {
  string extension = 1;
  string type = 2;
}

message s_tls_max {
  string tls_max_str = 1;
  int64 tls_max = 2;
}

message altsvc {
  althost src = 1;
  althost dst = 2;
  int64 expires = 3;
  bool persist = 4;
  int32 prio = 5;
  Curl_llist_element node = 6;
}

message smb_close {
  uint8 word_count = 1;
  uint16 fid = 2;
  uint32 last_mtime = 3;
  uint16 byte_count = 4;
}

message cf_proxy_ctx {
  Curl_cfilter cf_protocol = 1;
}

message smb_tree_disconnect {
  uint8 word_count = 1;
  uint16 byte_count = 2;
}

message state {
  int32 index = 1;
}

message srvr_sockaddr_union_t {
  sockaddr sa = 1;
  sockaddr_in sa4 = 2;
  sockaddr_in6 sa6 = 3;
  sockaddr_un sau = 4;
}

message sigpipe_ignore {
  sigaction old_pipe_act = 1;
  bool no_signal = 2;
}

message sigshort_st {
  int16 num = 1;
  string expected = 2;
  bytes result = 3;
}

message ReadThis {
  Curl_easy easy = 1;
  int64 origin = 2;
  int32 count = 3;
}

message ftp_parselist_data {
  union {
    pl_winNT_mainstate main = 1;
    pl_winNT_substate sub = 2;
  } union_field = 1;
}

message unnamed_union {
  ulong to_ulong = 1;
  long to_long = 2;
}

message proto_name_tokenp {
  string proto_name = 1;
  string proto_tokenp = 2;
}

message name_const {
  string name = 1;
  ulong namelen = 2;
}

message connfind {
  int64 id_tofind = 1;
  connectdata found = 2;
}

message per_transfer {
  per_transfer next = 1;
  per_transfer prev = 2;
  OperationConfig config = 3;
  curl_certinfo certinfo = 4;
  Curl_easy curl = 5;
  int64 retry_numretries = 6;
  int64 retry_sleep_default = 7;
  int64 retry_sleep = 8;
  timeval start = 9;
  timeval retrystart = 10;
  string this_url = 11;
  uint32 urlnum = 12;
  string outfile = 13;
  bool infdopen = 14;
  int32 infd = 15;
  bool noprogress = 16;
  ProgressData progressbar = 17;
  OutStruct outs = 18;
  OutStruct heads = 19;
  OutStruct etag_save = 20;
  HdrCbData hdrcbdata = 21;
  int64 num_headers = 22;
  bool was_last_header_empty = 23;
  bool added = 24;
  int64 startat = 25;
  bool abort = 26;
  int64 dltotal = 27;
  int64 dlnow = 28;
  int64 ultotal = 29;
  int64 ulnow = 30;
  int64 uploadfilesize = 31;
  int64 uploadedsofar = 32;
  bool dltotal_added = 33;
  bool ultotal_added = 34;
  string uploadfile = 35;
  string errorbuffer = 36;
}

message Curl_sockaddr_storage {
  union {
    sockaddr sa = 1;
    sockaddr_in sa_in = 2;
    sockaddr_in6 sa_in6 = 3;
    sockaddr_storage sa_stor = 4;
  } union_field = 1;
}

message prcs {
  int32 prereq_retcode = 1;
  int32 ipv6 = 2;
}

message ossl_ssl_backend_data {
  ssl_ctx_st ctx = 1;
  ssl_st handle = 2;
  x509_st server_cert = 3;
  bio_method_st bio_method = 4;
  CURLcode io_result = 5;
  bool x509_store_setup = 6;
}

message libtest_trace_cfg {
  int32 tracetime = 1;
  int32 nohex = 2;
}

message namebuff {
  union {
    in_addr ina4 = 1;
    in6_addr ina6 = 2;
  } union_field = 1;
}

message ssh_conn {
  string authlist = 1;
  string passphrase = 2;
  string rsa_pub = 3;
  string rsa = 4;
  bool authed = 5;
  bool acceptfail = 6;
  sshstate state = 7;
  sshstate nextstate = 8;
  CURLcode actualcode = 9;
  curl_slist quote_item = 10;
  string quote_path1 = 11;
  string quote_path2 = 12;
  string homedir = 13;
  int32 secondCreateDirs = 14;
  int32 orig_waitfor = 15;
  string slash_pos = 16;
}

message h1_req_parser {
  httpreq req = 1;
  dynbuf scratch = 2;
  uint64 scratch_skip = 3;
  string line = 4;
  uint64 max_line_len = 5;
  uint64 line_len = 6;
  bool done = 7;
}

message alpn_spec {
  repeated string entries = 1;
  uint64 count = 2;
}

message cf_he_ctx {
  int32 transport = 1;
  cf_create cf_create = 2;
  Curl_dns_entry remotehost = 3;
  cf_connect_state state = 4;
  eyeballer baller = 5;
  eyeballer winner = 6;
  curltime started = 7;
}

message pair {
  string in = 1;
  CURLcode exp = 2;
}

message unnamed_struct {
  string cert_id = 1;
  x509_st cert = 2;
}

message SASLproto {
  string service = 1;
  sendauth sendauth = 2;
  contauth contauth = 3;
  cancelauth cancelauth = 4;
  getmessage getmessage = 5;
  uint64 maxirlen = 6;
  int32 contcode = 7;
  int32 finalcode = 8;
  uint16 defmechs = 9;
  uint16 flags = 10;
}

message errmsg {
  int32 e_code = 1;
  string e_msg = 2;
}

message HMAC_context {
  HMAC_params hmac_hash = 1;
  void *hmac_hashctxt1 = 2;
  void *hmac_hashctxt2 = 3;
}

message reader_ctx {
  Curl_cfilter cf = 1;
  Curl_easy data = 2;
}

message WriteThis {
  string readptr = 1;
  int64 sizeleft = 2;
}

message Curl_cwtype {
  string name = 1;
  string alias = 2;
  do_init do_init = 3;
  do_write do_write = 4;
  do_close do_close = 5;
  uint64 cwriter_size = 6;
}

message unslong_st {
  uint64 num = 1;
  string expected = 2;
  bytes result = 3;
}

message bufref {
  void dtor = 1;
  bytes ptr = 2;
  uint64 len = 3;
}

message dohaddr {
  union {
    bytes v4 = 1;
    bytes v6 = 2;
  } union_field = 1;
}

message unnamed_union {
  curl_certinfo to_certinfo = 1;
  curl_slist to_slist = 2;
}

message cf_hc_ctx {
  cf_hc_state state = 1;
  Curl_dns_entry remotehost = 2;
  curltime started = 3;
  CURLcode result = 4;
  cf_hc_baller h3_baller = 5;
  cf_hc_baller h21_baller = 6;
  int32 soft_eyeballs_timeout_ms = 7;
  int32 hard_eyeballs_timeout_ms = 8;
}

message h1_tunnel_state {
  HTTP CONNECT = 1;
  dynbuf rcvbuf = 2;
  dynbuf request_data = 3;
  uint64 nsent = 4;
  uint64 headerlines = 5;
  Curl_chunker ch = 6;
  keeponval keepon = 7;
  int64 cl = 8;
  h1_tunnel_state tunnel_state = 9;
  uint32 chunked_encoding = 10;
  uint32 close_connection = 11;
}

message helptxt {
  string opt = 1;
  string desc = 2;
  uint32 categories = 3;
}

message xattr_mapping {
  string attr = 1;
  CURLINFO info = 2;
}

message socks_state {
  connect_t state = 1;
  int64 outstanding = 2;
  bytes buffer = 3;
  bytes outp = 4;
  string hostname = 5;
  int32 remote_port = 6;
  string proxy_user = 7;
  string proxy_password = 8;
}

message setcase {
  string in = 1;
  string set = 2;
  string out = 3;
  uint32 urlflags = 4;
  uint32 setflags = 5;
  CURLUcode ucode = 6;
}

message feature_name_presentp {
  string feature_name = 1;
  bool feature_presentp = 2;
  int32 feature_bitmask = 3;
}

message Curl_data_priority {
  int32 weight = 1;
}

message testcase {
  string buffer = 1;
  uint64 bufsize = 2;
  string rptr = 3;
  uint64 rcount = 4;
  int64 testno = 5;
  int32 ofile = 6;
  int32 writedelay = 7;
}

message perclient {
  uint64 fromremote = 1;
  uint64 fromclient = 2;
  int32 remotefd = 3;
  int32 clientfd = 4;
  bool used = 5;
}

message transfer_status {
  Curl_easy easy = 1;
  int32 halted = 2;
  int32 counter = 3;
  int32 please = 4;
}

message ssl_connect_data {
  ssl_connection_state state = 1;
  ssl_connect_state connecting_state = 2;
  ssl_peer peer = 3;
  alpn_spec alpn = 4;
  void *backend = 5;
  cf_call_data call_data = 6;
  curltime handshake_done = 7;
  int32 port = 8;
  uint32 use_alpn = 9;
  uint32 reused_session = 10;
}

message bf {
  int32 counter = 1;
  tftphdr_storage_t buf = 2;
}

message querycase {
  string in = 1;
  string q = 2;
  string out = 3;
  uint32 urlflags = 4;
  uint32 qflags = 5;
  CURLUcode ucode = 6;
}

message FormInfo {
  string name = 1;
  uint64 namelength = 2;
  string value = 3;
  int64 contentslength = 4;
  string contenttype = 5;
  int64 flags = 6;
  string buffer = 7;
  uint64 bufferlength = 8;
  string showfilename = 9;
  string userp = 10;
  curl_slist contentheader = 11;
  FormInfo more = 12;
  bool name_alloc = 13;
  bool value_alloc = 14;
  bool contenttype_alloc = 15;
  bool showfilename_alloc = 16;
}

message ftp_parselist_data {
  union {
    UNIX UNIX = 1;
    NT NT = 2;
  } union_field = 1;
}

message Curl_sh_entry {
  Curl_hash transfers = 1;
  uint32 action = 2;
  uint32 users = 3;
  void *socketp = 4;
  uint32 readers = 5;
  uint32 writers = 6;
}

message va_input {
  FormatType type = 1;
  union {
    uint64 val_ulong = 1;
    int64 val_long = 2;
  } val = 2;
}

message smb_nt_create_response {
  smb_header h = 1;
  uint8 word_count = 2;
  andx andx = 3;
  uint8 op_lock_level = 4;
  uint16 fid = 5;
  uint32 create_disposition = 6;
  int64 create_time = 7;
  int64 last_access_time = 8;
  int64 last_write_time = 9;
  int64 last_change_time = 10;
  uint32 ext_file_attributes = 11;
  int64 allocation_size = 12;
  int64 end_of_file = 13;
}

message zlib_writer {
  Curl_cwriter super = 1;
  zlibInitState zlib_init = 2;
  uint32 trailerlen = 3;
  z_stream_s z = 4;
}

message slist_wc {
  curl_slist first = 1;
  curl_slist last = 2;
}

message asprintf {
  dynbuf b = 1;
  int8 merr = 2;
}

message outsegment {
  int32 width = 1;
  int32 precision = 2;
  uint32 flags = 3;
  uint32 input = 4;
  string start = 5;
  uint64 outlen = 6;
}

message smb_read {
  uint8 word_count = 1;
  andx andx = 2;
  uint16 fid = 3;
  uint32 offset = 4;
  uint16 max_bytes = 5;
  uint16 min_bytes = 6;
  uint32 timeout = 7;
  uint16 remaining = 8;
  uint32 offset_high = 9;
  uint16 byte_count = 10;
}

message data {
  bool trace_ascii = 1;
}

message Curl_hash_element {
  Curl_llist_element list = 1;
  void *ptr = 2;
  uint64 key_len = 3;
  string key = 4;
}

message cf_setup_ctx {
  cf_setup_state state = 1;
  Curl_dns_entry remotehost = 2;
  int32 ssl_mode = 3;
  int32 transport = 4;
}

message prunedead {
  Curl_easy data = 1;
  connectdata extracted = 2;
}

message userdata {
  string text = 1;
  int32 counter = 2;
}

message HMAC_params {
  hmac_hinit hmac_hinit = 1;
  hmac_hupdate hmac_hupdate = 2;
  hmac_hfinal hmac_hfinal = 3;
  uint32 hmac_ctxtsize = 4;
  uint32 hmac_maxkeylen = 5;
  uint32 hmac_resultlen = 6;
}

message siglong_st {
  int64 num = 1;
  string expected = 2;
  bytes result = 3;
}

message hostcache_prune_data {
  int64 now = 1;
  int64 oldest = 2;
  int32 cache_timeout = 3;
}

message configurable {
  uint8 version = 1;
  uint8 nmethods_min = 2;
  uint8 nmethods_max = 3;
  uint8 responseversion = 4;
  uint8 responsemethod = 5;
  uint8 reqcmd = 6;
  uint8 connectrep = 7;
  uint16 port = 8;
  string addr = 9;
  string user = 10;
  string password = 11;
}

message upload_status {
  int32 lines_read = 1;
}

message setgetcase {
  string in = 1;
  string set = 2;
  string out = 3;
  uint32 urlflags = 4;
  uint32 setflags = 5;
  uint32 getflags = 6;
  CURLUcode pcode = 7;
}

message formats {
  string f_mode = 1;
  int32 f_convert = 2;
}

message NameValueUnsigned {
  string name = 1;
  uint64 value = 2;
}

message Curl_cftype {
  string name = 1;
  int32 flags = 2;
  int32 log_level = 3;
  destroy_cfilter destroy = 4;
  do_connect_cfilter do_connect = 5;
  adjust_pollset_cfilter adjust_pollset = 6;
  has_data_pending_cfilter has_data_pending = 7;
  do_send_cfilter do_send = 8;
  do_recv_cfilter do_recv = 9;
  cntrl_cfilter cntrl = 10;
  is_alive_cfilter is_alive = 11;
  keep_alive_cfilter keep_alive = 12;
  query_cfilter query = 13;
}

message speedcount {
  int64 dl = 1;
  int64 ul = 2;
  timeval stamp = 3;
}

message ReadWriteSockets {
  Sockets read = 1;
  Sockets write = 2;
}

message unnamed_union_urlpattern {
  long min_n = 1;
  long max_n = 2;
  int32 padlength = 3;
  long ptr_n = 4;
  long step = 5;
}

message testparams {
  uint32 flags = 1;
  CURLcode result = 2;
}

message unnamed_union_singlerequest {
  FILEPROTO file = 1;
  FTP ftp = 2;
  HTTP http = 3;
  IMAP imap = 4;
  ldapreqinfo ldap = 5;
  MQTT mqtt = 6;
  POP3 pop3 = 7;
  RTSP rtsp = 8;
  smb_request smb = 9;
  SMTP smtp = 10;
  SSHPROTO ssh = 11;
  TELNET telnet = 12;
}

message ms_filetime {
  uint32 dwLowDateTime = 1;
  uint32 dwHighDateTime = 2;
}

message NameValue {
  string name = 1;
  int64 value = 2;
}

message unnamed_union_curlsasl {
  string name = 1;
  uint64 len = 2;
  uint32 bit = 3;
}

message clearurlcase {
  CURLUPart part = 1;
  string in = 2;
  string out = 3;
  CURLUcode ucode = 4;
}

message smb_write {
  smb_header h = 1;
  uint8 word_count = 2;
  andx andx = 3;
  uint16 fid = 4;
  uint32 offset = 5;
  uint32 timeout = 6;
  uint16 write_mode = 7;
  uint16 remaining = 8;
  uint16 pad = 9;
  uint16 data_length = 10;
  uint16 data_offset = 11;
  uint32 offset_high = 12;
  uint16 byte_count = 13;
  uint8 pad2 = 14;
}

message unnamed_union_urlpattern_1 {
  repeated string elements = 1;
  int64 size = 2;
  int32 ptr_s = 3;
}

message unnamed_union_urlpattern_2 {
  int8 min_c = 1;
  int8 max_c = 2;
  int8 ptr_c = 3;
  int32 step = 4;
}

message redircase {
  string in = 1;
  string set = 2;
  string out = 3;
  uint32 urlflags = 4;
  uint32 setflags = 5;
  CURLUcode ucode = 6;
}

message Curl_sockaddr_ex {
  union {
    sockaddr addr = 1;
    Curl_sockaddr_storage buff = 2;
  } union_field = 1;
}

message smb_tree_connect {
  uint8 word_count = 1;
  andx andx = 2;
  uint16 flags = 3;
  uint16 pw_len = 4;
  uint16 byte_count = 5;
  bytes bytes = 6;
}

message cf_socket_ctx {
  int32 transport = 1;
  Curl_sockaddr_ex addr = 2;
  int32 sock = 3;
  bufq recvbuf = 4;
  string r_ip = 5;
  int32 r_port = 6;
  string l_ip = 7;
  int32 l_port = 8;
  curltime started_at = 9;
  curltime connected_at = 10;
  curltime first_byte_at = 11;
  int32 error = 12;
  uint32 got_first_byte = 13;
  uint32 accepted = 14;
  uint32 sock_connected = 15;
  uint32 active = 16;
  uint32 buffer_recv = 17;
}

message Curl_actual_call {
  uint32 func = 1;
}

message part {
  CURLUPart part = 1;
  string name = 2;
}

message ftp_wc {
  union {
    uint64 (*)(string, uint64, uint64, void *) write_function = 1;
    _IO_FILE file_descriptor = 2;
  } union_field = 1;
}

message Curl_sec_client_mech {
  string name = 1;
  uint64 size = 2;
}

message xcharp_u {
  string tchar_ptr = 1;
  string const_tchar_ptr = 2;
  bytes tbyte_ptr = 3;
  bytes const_tbyte_ptr = 4;
}

message MD5_params {
  uint32 md5_ctxtsize = 4;
  uint32 md5_resultlen = 5;
}

message cf_haproxy_ctx {
  int32 state = 1;
  dynbuf data_out = 2;
}

message Cookie {
  Cookie next = 1;
  string name = 2;
  string value = 3;
  string path = 4;
  string spath = 5;
  string domain = 6;
  int64 expires = 7;
  bool tailmatch = 8;
  bool secure = 9;
  bool livecookie = 10;
  bool httponly = 11;
  int32 creationtime = 12;
  uint8 prefix = 13;
}

message smb_setup {
  uint8 word_count = 1;
  andx andx = 2;
  uint16 max_buffer_size = 3;
  uint16 max_mpx_count = 4;
  uint16 vc_number = 5;
  uint32 session_key = 6;
  repeated uint16 lengths = 7;
  uint32 pad = 8;
  uint32 capabilities = 9;
  uint16 byte_count = 10;
  bytes bytes = 11;
}

message smb_negotiate_response {
  smb_header h = 1;
  uint8 word_count = 2;
  uint16 dialect_index = 3;
  uint8 security_mode = 4;
  uint16 max_mpx_count = 5;
  uint16 max_number_vcs = 6;
  uint32 max_buffer_size = 7;
  uint32 max_raw_size = 8;
  uint32 session_key = 9;
  uint32 capabilities = 10;
  uint32 system_time_low = 11;
  uint32 system_time_high = 12;
  uint16 server_time_zone = 13;
  uint8 encryption_key_length = 14;
  uint16 byte_count = 15;
  bytes bytes = 16;
}

message dohentry {
  repeated dynbuf cname = 1;
  repeated dohaddr addr = 2;
  int32 numaddr = 3;
  uint32 ttl = 4;
  int32 numcname = 5;
}

message unnamed_union_ftpparselistdata_1 {
  pl_unix_mainstate main = 1;
  pl_unix_substate sub = 2;
}

message namebuff {
  hostent hostentry = 1;
  union {
    unnamed_union_curladdrinfo_1 addrentry = 2;
    repeated string h_addr_list = 3;
  } union_field = 2;
}

message headerinfo {
  uint64 largest = 1;
}

message chunk_data {
  int32 remains = 1;
  int32 print_content = 2;
}

message unnamed_union_urldata_1 {
  ftp_conn ftpc = 1;
  tftp_state_data tftpc = 2;
  imap_conn imapc = 3;
  pop3_conn pop3c = 4;
  smtp_conn smtpc = 5;
  rtsp_conn rtspc = 6;
  smb_conn smbc = 7;
  mqtt_conn mqtt = 8;
  uint32 unused = 9;
}

message unnamed_union_ftpparselistdata_2 {
  unnamed_union_ftpparselistdata_3 main = 1;
}

message ftp_parselist_data {
  unnamed_union_ftpparselistdata_1 union_field = 1;
  unnamed_union_ftpparselistdata_2 union_field2 = 2;
  unnamed_union_ftpparselistdata_4 main = 3;
}

message transport_provider {
  int32 transport = 1;
}