syntax = "proto3";

message FT_Renderer_Class {
  FT_Module_Class root = 1;
  FT_Glyph_Format glyph_format = 2;
  int32 render_glyph = 3;
  int32 transform_glyph = 4;
  void get_glyph_cbox = 5;
  int32 set_mode = 6;
  FT_Raster_Funcs raster_class = 7;
}

message FT_Glyph_Class {
  int64 glyph_size = 1;
  FT_Glyph_Format glyph_format = 2;
  int32 glyph_init = 3;
  void glyph_done = 4;
  int32 glyph_copy = 5;
  void glyph_transform = 6;
  void glyph_bbox = 7;
  int32 glyph_prepare = 8;
}

message FT_RendererRec {
  FT_ModuleRec root = 1;
  FT_Renderer_Class clazz = 2;
  FT_Glyph_Format glyph_format = 3;
  FT_Glyph_Class glyph_class = 4;
  FT_RasterRec raster = 5;
  int32 raster_render = 6;
  int32 render = 7;
}

message FT_GlyphLoadRec {
  FT_Outline outline = 1;
  repeated FT_Vector extra_points = 2;
  repeated FT_Vector extra_points2 = 3;
  uint32 num_subglyphs = 4;
  repeated FT_SubGlyphRec subglyphs = 5;
}

message FT_Module_Class {
  uint64 module_flags = 1;
  int64 module_size = 2;
  string module_name = 3;
  int64 module_version = 4;
  int64 module_requires = 5;
  bytes module_interface = 6;
  int32 module_init = 7;
  void module_done = 8;
  string get_interface = 9;
}

message FT_ListNodeRec {
  FT_ListNodeRec prev = 1;
  FT_ListNodeRec next = 2;
  bytes data = 3;
}

message GX_AxisCoordsRec {
  int64 startCoord = 1;
  int64 peakCoord = 2;
  int64 endCoord = 3;
}

message FTC_MruListClassRec {
  uint64 node_size = 1;
  bool node_compare = 2;
  int32 node_init = 3;
  int32 node_reset = 4;
  void node_done = 5;
}

message GX_AVarCorrespondenceRec {
  int64 fromCoord = 1;
  int64 toCoord = 2;
}

message FT_Vector {
  int64 x = 1;
  int64 y = 2;
}

message FT_Size_Metrics {
  uint32 x_ppem = 1;
  uint32 y_ppem = 2;
  int64 x_scale = 3;
  int64 y_scale = 4;
  int64 ascender = 5;
  int64 descender = 6;
  int64 height = 7;
  int64 max_advance = 8;
}

message FT_Size_InternalRec {
  bytes module_data = 1;
  FT_Render_Mode autohint_mode = 2;
  FT_Size_Metrics autohint_metrics = 3;
}

message FT_Incremental_InterfaceRec {
  FT_Incremental_FuncsRec funcs = 1;
  FT_IncrementalRec object = 2;
}

message FT_Matrix {
  int64 xx = 1;
  int64 xy = 2;
  int64 yx = 3;
  int64 yy = 4;
}

message FT_ServiceCacheRec {
  bytes service_POSTSCRIPT_FONT_NAME = 1;
  bytes service_MULTI_MASTERS = 2;
  bytes service_METRICS_VARIATIONS = 3;
  bytes service_GLYPH_DICT = 4;
  bytes service_PFR_METRICS = 5;
  bytes service_WINFNT = 6;
}

message FT_Slot_InternalRec {
  FT_GlyphLoaderRec loader = 1;
  uint32 flags = 2;
  bool glyph_transformed = 3;
  FT_Matrix glyph_matrix = 4;
  FT_Vector glyph_delta = 5;
  bytes glyph_hints = 6;
  int32 load_flags = 7;
}

message FT_Bitmap {
  uint32 rows = 1;
  uint32 width = 2;
  int32 pitch = 3;
  bytes buffer = 4;
  uint32 num_grays = 5;
  uint32 pixel_mode = 6;
  uint32 palette_mode = 7;
  bytes palette = 8;
}

message FT_Glyph_Metrics {
  int64 width = 1;
  int64 height = 2;
  int64 horiBearingX = 3;
  int64 horiBearingY = 4;
  int64 horiAdvance = 5;
  int64 vertBearingX = 6;
  int64 vertBearingY = 7;
  int64 vertAdvance = 8;
}

message FT_Outline {
  int16 n_contours = 1;
  int16 n_points = 2;
  repeated FT_Vector points = 3;
  bytes tags = 4;
  repeated int16 contours = 5;
  int32 flags = 6;
}

message FT_SubGlyphRec {
  int32 index = 1;
  uint32 flags = 2;
  int32 arg1 = 3;
  int32 arg2 = 4;
  FT_Matrix transform = 5;
}

message FT_LibraryRec {
  FT_MemoryRec memory = 1;
  int32 version_major = 2;
  int32 version_minor = 3;
  int32 version_patch = 4;
  uint32 num_modules = 5;
  repeated FT_ModuleRec modules = 6;
  FT_ListRec renderers = 7;
  FT_RendererRec cur_renderer = 8;
  FT_ModuleRec auto_hinter = 9;
  repeated int32 debug_hooks = 10;
  repeated FT_Vector lcd_geometry = 11;
  int32 refcount = 12;
}

message FT_StreamDesc {
  int64 value = 1;
  bytes pointer = 2;
}

message FT_GlyphLoaderRec {
  FT_MemoryRec memory = 1;
  uint32 max_points = 2;
  uint32 max_contours = 3;
  uint32 max_subglyphs = 4;
  bool use_extra = 5;
  FT_GlyphLoadRec base = 6;
  FT_GlyphLoadRec current = 7;
  bytes other = 8;
}

message FT_Driver_Class {
  FT_Module_Class root = 1;
  int64 face_object_size = 2;
  int64 size_object_size = 3;
  int64 slot_object_size = 4;
  int32 init_face = 5;
  void done_face = 6;
  int32 init_size = 7;
  void done_size = 8;
  int32 init_slot = 9;
  void done_slot = 10;
  int32 load_glyph = 11;
  int32 get_kerning = 12;
  int32 attach_file = 13;
  int32 get_advances = 14;
  int32 request_size = 15;
  int32 select_size = 16;
}

message FT_ModuleRec {
  FT_Module_Class clazz = 1;
  FT_LibraryRec library = 2;
  FT_MemoryRec memory = 3;
}

message FT_ListRec {
  FT_ListNodeRec head = 1;
  FT_ListNodeRec tail = 2;
}

message CFF_AxisCoords {
  int64 startCoord = 1;
  int64 peakCoord = 2;
  int64 endCoord = 3;
}

message GX_VarRegionRec {
  GX_AxisCoordsRec axisList = 1;
}

message GX_ItemVarDataRec {
  uint32 itemCount = 1;
  uint32 regionIdxCount = 2;
  repeated uint32 regionIndices = 3;
  bytes deltaSet = 4;
  uint32 wordDeltaCount = 5;
  uint32 longWords = 6;
}

message GX_ValueRec {
  uint64 tag = 1;
  uint32 outerIndex = 2;
  uint32 innerIndex = 3;
  int32 unmodified = 4;
}

message GX_AVarSegmentRec {
  uint32 pairCount = 1;
  GX_AVarCorrespondenceRec correspondence = 2;
}

message FTC_MruListRec {
  uint32 num_nodes = 1;
  uint32 max_nodes = 2;
  repeated FTC_MruNodeRec nodes = 3;
  bytes data = 4;
  FTC_MruListClassRec clazz = 5;
  FT_MemoryRec memory = 6;
}

message FT_MemoryRec {
  bytes user = 1;
  string alloc = 2;
  void free = 3;
  string realloc = 4;
}

message FT_Generic {
  bytes data = 1;
  void finalizer = 2;
}

message FT_SizeRec {
  FT_FaceRec face = 1;
  FT_Generic generic = 2;
  FT_Size_Metrics metrics = 3;
  FT_Size_InternalRec internal = 4;
}

message FT_Face_InternalRec {
  FT_Matrix transform_matrix = 1;
  FT_Vector transform_delta = 2;
  int32 transform_flags = 3;
  FT_ServiceCacheRec services = 4;
  FT_Incremental_InterfaceRec incremental_interface = 5;
  int32 no_stem_darkening = 6;
  int32 random_seed = 7;
  int32 refcount = 8;
}

message FT_BBox {
  int64 xMin = 1;
  int64 yMin = 2;
  int64 xMax = 3;
  int64 yMax = 4;
}

message FT_GlyphSlotRec {
  FT_LibraryRec library = 1;
  FT_FaceRec face = 2;
  FT_GlyphSlotRec next = 3;
  uint32 glyph_index = 4;
  FT_Generic generic = 5;
  FT_Glyph_Metrics metrics = 6;
  int64 linearHoriAdvance = 7;
  int64 linearVertAdvance = 8;
  FT_Vector advance = 9;
  FT_Glyph_Format format = 10;
  FT_Bitmap bitmap = 11;
  int32 bitmap_left = 12;
  int32 bitmap_top = 13;
  FT_Outline outline = 14;
  uint32 num_subglyphs = 15;
  repeated FT_SubGlyphRec subglyphs = 16;
  bytes control_data = 17;
  int64 control_len = 18;
  int64 lsb_delta = 19;
  int64 rsb_delta = 20;
  bytes other = 21;
  FT_Slot_InternalRec internal = 22;
}

message FT_StreamRec {
  bytes base = 1;
  uint64 size = 2;
  uint64 pos = 3;
  FT_StreamDesc descriptor = 4;
  FT_StreamDesc pathname = 5;
  uint64 read = 6;
  void close = 7;
  FT_MemoryRec memory = 8;
  bytes cursor = 9;
  bytes limit = 10;
}

message FT_DriverRec {
  FT_ModuleRec root = 1;
  FT_Driver_Class clazz = 2;
  FT_ListRec faces_list = 3;
  FT_GlyphLoaderRec glyph_loader = 4;
}

message FT_Bitmap_Size {
  int16 height = 1;
  int16 width = 2;
  int64 size = 3;
  int64 x_ppem = 4;
  int64 y_ppem = 5;
}

message FT_CharMapRec {
  FT_FaceRec face = 1;
  FT_Encoding encoding = 2;
  uint16 platform_id = 3;
  uint16 encoding_id = 4;
}

message CFF_VarData {
  uint32 regionIdxCount = 1;
  repeated uint32 regionIndices = 2;
}

message CFF_VarRegion {
  CFF_AxisCoords axisList = 1;
}

message FT_Hashkey {
  int32 num = 1;
  string str = 2;
}

message GX_DeltaSetIdxMapRec {
  uint64 mapCount = 1;
  repeated uint32 outerIndex = 2;
  repeated uint32 innerIndex = 3;
}

message GX_ItemVarStoreRec {
  uint32 dataCount = 1;
  GX_ItemVarDataRec varData = 2;
  uint16 axisCount = 3;
  uint32 regionCount = 4;
  repeated GX_VarRegionRec varRegionList = 5;
}

message FT_Var_Named_Style {
  repeated int64 coords = 1;
  uint32 strid = 2;
  uint32 psid = 3;
}

message FT_Var_Axis {
  string name = 1;
  int64 minimum = 2;
  int64 def = 3;
  int64 maximum = 4;
  uint64 tag = 5;
  uint32 strid = 6;
}

message AF_WidthRec {
  int64 org = 1;
  int64 cur = 2;
  int64 fit = 3;
}

message PSH_WidthRec {
  int32 org = 1;
  int64 cur = 2;
  int64 fit = 3;
}

message PS_HintRec {
  int32 pos = 1;
  int32 len = 2;
  uint32 flags = 3;
}

// GX_AVarTableRec_
message GX_AVarTableRec {
    AVarSegmentRec avar_segment = 1;
    ItemVarStoreRec itemStore = 2;
    DeltaSetIdxMapRec axisMap = 3;
  }
  
  // GX_HVVarTableRec_
  message GX_HVVarTableRec {
    ItemVarStoreRec itemStore = 1;
    DeltaSetIdxMapRec widthMap = 2;
  }
  
  // GX_MVarTableRec_
  message GX_MVarTableRec {
    uint32 valueCount = 1;
    ItemVarStoreRec itemStore = 2;
    repeated ValueRec values = 3;
  }
  
  // FTC_CacheClassRec_
  message FTC_CacheClassRec {
    rpc NodeNew(NodeRec node, CacheRec cache) returns (NodeRec) = 1;
    rpc NodeWeight(NodeRec node, CacheRec cache) returns (uint64) = 2;
    rpc NodeCompare(NodeRec node, CacheRec cache, uint8) returns (uint8) = 3;
    rpc NodeRemoveFaceId(NodeRec node, CacheRec cache, uint8) returns (uint8) = 4;
    rpc NodeFree(NodeRec node, CacheRec cache) returns (google.protobuf.Empty) = 5;
    uint32 cache_size = 6;
    rpc CacheInit(CacheRec cache) returns (uint32) = 7;
    rpc CacheDone(CacheRec cache) returns (google.protobuf.Empty) = 8;
  }
  
  // FTC_NodeRec_
  message FTC_NodeRec {
    MruNodeRec mru = 1;
    FTC_NodeRec link = 2;
    uint64 hash = 3;
    uint32 cache_index = 4;
    int32 ref_count = 5;
  }
  
  // PSH_Blue_ZoneRec_
  message PSH_Blue_ZoneRec {
    int32 org_ref = 1;
    int32 org_delta = 2;
    int32 org_top = 3;
    int32 org_bottom = 4;
    int64 cur_ref = 5;
    int64 cur_delta = 6;
    int64 cur_bottom = 7;
    int64 cur_top = 8;
  }
  
  // PS_MaskRec_
  message PS_MaskRec {
    uint32 num_bits = 1;
    uint32 max_bits = 2;
    bytes bytes = 3;
    uint32 end_point = 4;
  }
  
  // FTC_ManagerRec_
  message FTC_ManagerRec {
    FT_LibraryRec library = 1;
    FT_MemoryRec memory = 2;
    FTC_NodeRec nodes_list = 3;
    uint64 max_weight = 4;
    uint64 cur_weight = 5;
    uint32 num_nodes = 6;
    repeated CacheRec caches = 7;
    uint32 num_caches = 8;
    FTC_MruListRec faces = 9;
    FTC_MruListRec sizes = 10;
    bytes request_data = 11;
    rpc RequestFace(RequestFaceData data) returns (FT_FaceRec) = 12;
  }
  
  message RequestFaceData {
    FTC_ManagerRec manager = 1;
    FT_LibraryRec library = 2;
  }
  
  // FT_FaceRec_
  message FT_FaceRec {
    int64 num_faces = 1;
    int64 face_index = 2;
    int64 face_flags = 3;
    int64 style_flags = 4;
    int64 num_glyphs = 5;
    string family_name = 6;
    string style_name = 7;
    int32 num_fixed_sizes = 8;
    repeated FT_Bitmap_Size_ available_sizes = 9;
    int32 num_charmaps = 10;
    repeated FT_CharMapRec charmaps = 11;
    FT_Generic_ generic = 12;
    FT_BBox_ bbox = 13;
    uint32 units_per_EM = 14;
    int32 ascender = 15;
    int32 descender = 16;
    int32 height = 17;
    int32 max_advance_width = 18;
    int32 max_advance_height = 19;
    int32 underline_position = 20;
    int32 underline_thickness = 21;
    FT_GlyphSlotRec glyph = 22;
    FT_SizeRec size = 23;
    FT_CharMapRec charmap = 24;
    FT_DriverRec driver = 25;
    FT_MemoryRec memory = 26;
    FT_StreamRec stream = 27;
    FT_ListRec sizes_list = 28;
    FT_Generic_ autohint = 29;
    bytes extensions = 30;
    FT_Face_InternalRec_ internal = 31;
  }
  
  // CFF_VStoreRec_
  message CFF_VStoreRec {
    uint32 dataCount = 1;
    repeated CFF_VarData_ varData = 2;
    uint32 axisCount = 3;
    uint32 regionCount = 4;
    repeated CFF_VarRegion_ varRegionList = 5;
  }
  
  // PS_FontInfoRec_
  message PS_FontInfoRec {
    string version = 1;
    string notice = 2;
    string full_name = 3;
    string family_name = 4;
    string weight = 5;
    int64 italic_angle = 6;
    bool is_fixed_pitch = 7;
    int32 underline_position = 8;
    uint32 underline_thickness = 9;
  }
  
  // CFF_EncodingRec_
  message CFF_EncodingRec {
    uint32 format = 1;
    uint64 offset = 2;
    uint32 count = 3;
    repeated uint32 sids = 4;
    repeated uint32 codes = 5;
  }
  
  // PS_FontExtraRec_
  message PS_FontExtraRec {
    uint16 fs_type = 1;
  }
  
  // PSHinter_Interface_
  message PSHinter_Interface {
    rpc GetGlobalsFuncs(FT_ModuleRec module) returns (PS_Globals_FuncsRec) = 1;
    rpc GetT1Funcs(FT_ModuleRec module) returns (T1_Hints_FuncsRec) = 2;
    rpc GetT2Funcs(FT_ModuleRec module) returns (T2_Hints_FuncsRec) = 3;
  }
  
  // CFF_CharsetRec_
  message CFF_CharsetRec {
    uint32 format = 1;
    uint64 offset = 2;
    repeated uint32 sids = 3;
    repeated uint32 cids = 4;
    uint32 max_cid = 5;
    uint32 num_glyphs = 6;
  }
  
  // CFF_FDSelectRec_
  message CFF_FDSelectRec {
    uint32 format = 1;
    uint32 range_count = 2;
    bytes data = 3;
    uint32 data_size = 4;
    uint32 cache_first = 5;
    uint32 cache_count = 6;
    uint8 cache_fd = 7;
  }
  
  // FT_HashnodeRec_
  message FT_HashnodeRec {
    FT_Hashkey key = 1;
    uint64 data = 2;
  }
  
  // PS_DesignMap_
  message PS_DesignMap {
    uint8 num_points = 1;
    repeated int64 design_points = 2;
    repeated int64 blend_points = 3;
  }
  
  // PS_Builder_FuncsRec_
  message PS_Builder_FuncsRec {
    rpc Init(PS_Builder builder, void, uint8) returns (void) = 1;
    rpc Done(PS_Builder builder) returns (void) = 2;
  }
  
  // CFF_GlyphSlotRec_
  message CFF_GlyphSlotRec {
    FT_GlyphSlotRec root = 1;
    uint8 hint = 2;
    uint8 scaled = 3;
    int64 x_scale = 4;
    int64 y_scale = 5;
  }
  
  // TT_GaspRangeRec_
  message TT_GaspRangeRec {
    uint16 maxPPEM = 1;
    uint16 gaspFlag = 2;
  }
  
  // TT_SBit_LineMetricsRec_
  message TT_SBit_LineMetricsRec {
    int8 ascender = 1;
    int8 descender = 2;
    uint8 max_width = 3;
    int8 caret_slope_numerator = 4;
    int8 caret_slope_denominator = 5;
    int8 caret_offset = 6;
    int8 min_origin_SB = 7;
    int8 min_advance_SB = 8;
    int8 max_before_BL = 9;
    int8 min_after_BL = 10;
  }
  
  // TT_LangTagRec_
  message TT_LangTagRec {
    uint16 stringLength = 1;
    uint64 stringOffset = 2;
    bytes string = 3;
  }
  
  // TT_NameRec_
  message TT_NameRec {
    uint16 platformID = 1;
    uint16 encodingID = 2;
    uint16 languageID = 3;
    uint16 nameID = 4;
    uint16 stringLength = 5;
    uint64 stringOffset = 6;
    bytes string = 7;
  }
  
  // FT_MM_Var_
  message FT_MM_Var {
    uint32 num_axis = 1;
    uint32 num_designs = 2;
    uint32 num_namedstyles = 3;
    repeated FT_Var_Axis axis = 4;
    repeated FT_Var_Named_Style namedstyle = 5;
  }
  
  // PS_PrivateRec_
  message PS_PrivateRec {
    int32 unique_id = 1;
    int32 lenIV = 2;
    uint8 num_blue_values = 3;
    uint8 num_other_blues = 4;
    uint8 num_family_blues = 5;
    uint8 num_family_other_blues = 6;
    repeated int16 blue_values = 7;
    repeated int16 other_blues = 8;
    repeated int16 family_blues = 9;
    repeated int16 family_other_blues = 10;
    int64 blue_scale = 11;
    int32 blue_shift = 12;
    int32 blue_fuzz = 13;
    repeated uint16 standard_width = 14;
    repeated uint16 standard_height = 15;
    uint8 num_snap_widths = 16;
    uint8 num_snap_heights = 17;
    uint8 force_bold = 18;
    uint8 round_stem_up = 19;
    repeated int16 snap_widths = 20;
    repeated int16 snap_heights = 21;
    int64 expansion_factor = 22;
    int64 language_group = 23;
    int64 password = 24;
    repeated int16 min_feature = 25;
  }
  
  // PSH_Blue_TableRec_
  message PSH_Blue_TableRec {
    uint32 count = 1;
    repeated PSH_Blue_ZoneRec zones = 2;
  }
  
  // CF2_BlueRec_
  message CF2_BlueRec {
    int32 csBottomEdge = 1;
    int32 csTopEdge = 2;
    int32 csFlatEdge = 3;
    int32 dsFlatEdge = 4;
    uint8 bottomZone = 5;
  }
  
  // FTC_MruNodeRec_
  message FTC_MruNodeRec {
    FTC_MruNodeRec next = 1;
    FTC_MruNodeRec prev = 2;
  }
  
  // PS_Mask_TableRec_
  message PS_Mask_TableRec {
    uint32 num_masks = 1;
    uint32 max_masks = 2;
    repeated PS_MaskRec masks = 3;
  }
  
  // AF_EdgeRec_
  message AF_EdgeRec {
    int16 fpos = 1;
    int64 opos = 2;
    int64 pos = 3;
    uint8 flags = 4;
    int8 dir = 5;
    int64 scale = 6;
    AF_WidthRec blue_edge = 7;
    AF_EdgeRec link = 8;
    AF_EdgeRec serif = 9;
    int32 score = 10;
    AF_SegmentRec first = 11;
    AF_SegmentRec last = 12;
  }
  
  // GX_BlendRec_
  message GX_BlendRec {
    uint32 num_axis = 1;
    repeated int64 coords = 2;
    repeated int64 normalizedcoords = 3;
    FT_MM_Var mmvar = 4;
    uint64 mmvar_len = 5;
    repeated int64 normalized_stylecoords = 6;
    uint8 avar_loaded = 7;
    AVarTableRec avar_table = 8;
    uint8 hvar_loaded = 9;
    uint8 hvar_checked = 10;
    int32 hvar_error = 11;
    GX_HVVarTableRec hvar_table = 12;
    uint8 vvar_loaded = 13;
    uint8 vvar_checked = 14;
    int32 vvar_error = 15;
    GX_HVVarTableRec vvar_table = 16;
    GX_MVarTableRec mvar_table = 17;
    uint32 tuplecount = 18;
    repeated int64 tuplecoords = 19;
    uint32 gv_glyphcnt = 20;
    repeated uint64 glyphoffsets = 21;
    uint64 gvar_size = 22;
  }
  
  // CF2_OutlineCallbacksRec_
  message CF2_OutlineCallbacksRec {
    rpc MoveTo(CF2_CallbackParamsRec params) returns (void) = 1;
    rpc LineTo(CF2_CallbackParamsRec params) returns (void) = 2;
    rpc QuadTo(CF2_CallbackParamsRec params) returns (void) = 3;
    rpc CubeTo(CF2_CallbackParamsRec params) returns (void) = 4;
    int32 windingMomentum = 5;
    FT_MemoryRec memory = 6;
    int32 error = 7;
  }
  
  // PS_Hint_TableRec_
  message PS_Hint_TableRec {
    uint32 num_hints = 1;
    uint32 max_hints = 2;
    repeated PS_HintRec hints = 3;
  }
  
  // AF_ModuleRec_
  message AF_ModuleRec {
    FT_ModuleRec root = 1;
    uint32 fallback_style = 2;
    AF_Script default_script = 3;
    bool no_stem_darkening = 4;
    repeated int32 darken_params = 5;
  }
  
  // AF_SegmentRec_
  message AF_SegmentRec {
    uint8 flags = 1;
    int8 dir = 2;
    int16 pos = 3;
    int16 delta = 4;
    int16 min_coord = 5;
    int16 max_coord = 6;
    int16 height = 7;
    AF_EdgeRec edge = 8;
    AF_SegmentRec edge_next = 9;
    AF_SegmentRec link = 10;
    AF_SegmentRec serif = 11;
    int64 score = 12;
    int64 len = 13;
    AF_PointRec first = 14;
    AF_PointRec last = 15;
  }
  
  // PFR_BitmapCharRec_
  message PFR_BitmapCharRec {
    uint32 char_code = 1;
    uint32 gps_size = 2;
    uint32 gps_offset = 3;
  }
  
  // FTC_CacheRec_
  message FTC_CacheRec {
    uint32 p = 1;
    uint32 mask = 2;
    int64 slack = 3;
    repeated FTC_NodeRec buckets = 4;
    FTC_CacheClassRec clazz = 5;
    FTC_ManagerRec manager = 6;
    FT_MemoryRec memory = 7;
    uint32 index = 8;
    FTC_CacheClassRec org_class = 9;
  }
  
  // PSH_WidthsRec_
  message PSH_WidthsRec {
    uint32 count = 1;
    repeated PSH_WidthRec widths = 2;
  }

// CFF_FontRec_
message CFF_FontRec {
    FT_LibraryRec library = 1;
    FT_StreamRec stream = 2;
    FT_MemoryRec memory = 3;
    uint64 base_offset = 4;
    uint32 num_faces = 5;
    uint32 num_glyphs = 6;
    uint8 version_major = 7;
    uint8 version_minor = 8;
    uint8 header_size = 9;
    uint32 top_dict_length = 10;
    uint8 cff2 = 11;
    CFF_IndexRec name_index = 12;
    CFF_IndexRec top_dict_index = 13;
    CFF_IndexRec global_subrs_index = 14;
    CFF_EncodingRec encoding = 15;
    CFF_CharsetRec charset = 16;
    CFF_IndexRec charstrings_index = 17;
    CFF_IndexRec font_dict_index = 18;
    CFF_IndexRec private_index = 19;
    CFF_IndexRec local_subrs_index = 20;
    string font_name = 21;
    repeated uint8 global_subrs = 22;
    uint32 num_strings = 23;
    repeated uint8 strings = 24;
    bytes string_pool = 25;
    uint64 string_pool_size = 26;
    CFF_SubFontRec top_font = 27;
    uint32 num_subfonts = 28;
    repeated CFF_SubFontRec subfonts = 29;
    CFF_FDSelectRec fd_select = 30;
    PSHinter_Interface pshinter = 31;
    FT_Service_PsCMapsRec psnames = 32;
    bytes cffload = 33;
    PS_FontInfoRec font_info = 34;
    string registry = 35;
    string ordering = 36;
    FT_Generic cf2_instance = 37;
    CFF_VStoreRec vstore = 38;
    PS_FontExtraRec font_extra = 39;
  }
  
  // FT_HashRec_
  message FT_HashRec {
    uint32 limit = 1;
    uint32 size = 2;
    uint32 used = 3;
    rpc Lookup(FT_Hashkey key) returns (uint64) = 4;
    rpc Compare(FT_Hashkey key1, FT_Hashkey key2) returns (uint8) = 5;
    repeated FT_HashnodeRec table = 6;
  }
  
  // PS_BlendRec_
  message PS_BlendRec {
    uint32 num_designs = 1;
    uint32 num_axis = 2;
    repeated string axis_names = 3;
    repeated int64 design_pos = 4;
    repeated PS_DesignMapRec design_map = 5;
    repeated int64 weight_vector = 6;
    repeated int64 default_weight_vector = 7;
    repeated PS_FontInfoRec font_infos = 8;
    repeated PS_PrivateRec privates = 9;
    uint64 blend_bitflags = 10;
    repeated uint32 default_design_vector = 11;
    uint32 num_default_design_vector = 12;
  }
  
  // PS_Builder_
  message PS_Builder {
    FT_MemoryRec memory = 1;
    FT_FaceRec face = 2;
    CFF_GlyphSlotRec glyph = 3;
    FT_GlyphLoaderRec loader = 4;
    FT_Outline base = 5;
    FT_Outline current = 6;
    repeated int64 pos_x = 7;
    repeated int64 pos_y = 8;
    repeated FT_Vector left_bearing = 9;
    repeated FT_Vector advance = 10;
    repeated FT_BBox bbox = 11;
    bool path_begun = 12;
    bool load_points = 13;
    bool no_recurse = 14;
    bool metrics_only = 15;
    bool is_t1 = 16;
    PS_Builder_FuncsRec funcs = 17;
  }
  
  // PS_Decoder_Zone_
  message PS_Decoder_Zone {
    bytes base = 1;
    bytes limit = 2;
    bytes cursor = 3;
  }
  
  // CFF_PrivateRec_
  message CFF_PrivateRec {
    uint8 num_blue_values = 1;
    uint8 num_other_blues = 2;
    uint8 num_family_blues = 3;
    uint8 num_family_other_blues = 4;
    repeated int64 blue_values = 5;
    repeated int64 other_blues = 6;
    repeated int64 family_blues = 7;
    repeated int64 family_other_blues = 8;
    int64 blue_scale = 9;
    int64 blue_shift = 10;
    int64 blue_fuzz = 11;
    int64 standard_width = 12;
    int64 standard_height = 13;
    uint8 num_snap_widths = 14;
    uint8 num_snap_heights = 15;
    repeated int64 snap_widths = 16;
    repeated int64 snap_heights = 17;
    uint8 force_bold = 18;
    int64 force_bold_threshold = 19;
    int32 lenIV = 20;
    int32 language_group = 21;
    int64 expansion_factor = 22;
    int64 initial_random_seed = 23;
    uint64 local_subrs_offset = 24;
    int64 default_width = 25;
    int64 nominal_width = 26;
    uint32 vsindex = 27;
    CFF_SubFontRec subfont = 28;
  }
  
  // CFF_FontRecDictRec_
  message CFF_FontRecDictRec {
    uint32 version = 1;
    uint32 notice = 2;
    uint32 copyright = 3;
    uint32 full_name = 4;
    uint32 family_name = 5;
    uint32 weight = 6;
    bool is_fixed_pitch = 7;
    int64 italic_angle = 8;
    int64 underline_position = 9;
    int64 underline_thickness = 10;
    int32 paint_type = 11;
    int32 charstring_type = 12;
    FT_Matrix font_matrix = 13;
    bool has_font_matrix = 14;
    uint64 units_per_em = 15;
    FT_Vector font_offset = 16;
    uint64 unique_id = 17;
    FT_BBox font_bbox = 18;
    int64 stroke_width = 19;
    uint64 charset_offset = 20;
    uint64 encoding_offset = 21;
    uint64 charstrings_offset = 22;
    uint64 private_offset = 23;
    uint64 private_size = 24;
    int64 synthetic_base = 25;
    uint32 embedded_postscript = 26;
    uint32 cid_registry = 27;
    uint32 cid_ordering = 28;
    int64 cid_supplement = 29;
    int64 cid_font_version = 30;
    int64 cid_font_revision = 31;
    int64 cid_font_type = 32;
    uint64 cid_count = 33;
    uint64 cid_uid_base = 34;
    uint64 cid_fd_array_offset = 35;
    uint64 cid_fd_select_offset = 36;
    uint32 cid_font_name = 37;
    uint16 num_designs = 38;
    uint16 num_axes = 39;
    uint64 vstore_offset = 40;
    uint32 maxstack = 41;
  }
  
  // CFF_IndexRec_
  message CFF_IndexRec {
    FT_StreamRec stream = 1;
    uint64 start = 2;
    uint32 hdr_size = 3;
    uint32 count = 4;
    uint8 off_size = 5;
    uint64 data_offset = 6;
    uint64 data_size = 7;
    repeated uint64 offsets = 8;
    bytes bytes = 9;
  }
  
  // CFF_BlendRec_
  message CFF_BlendRec {
    bool builtBV = 1;
    bool usedBV = 2;
    CFF_FontRec font = 3;
    uint32 lastVsindex = 4;
    uint32 lenNDV = 5;
    repeated int64 lastNDV = 6;
    uint32 lenBV = 7;
    repeated int32 BV = 8;
  }
  
  // TT_Postscript_
  message TT_Postscript {
    int64 FormatType = 1;
    int64 italicAngle = 2;
    int16 underlinePosition = 3;
    int16 underlineThickness = 4;
    uint64 isFixedPitch = 5;
    uint64 minMemType42 = 6;
    uint64 maxMemType42 = 7;
    uint64 minMemType1 = 8;
    uint64 maxMemType1 = 9;
  }
  
  // TT_OS2_
  message TT_OS2 {
    uint16 version = 1;
    int16 xAvgCharWidth = 2;
    uint16 usWeightClass = 3;
    uint16 usWidthClass = 4;
    uint16 fsType = 5;
    int16 ySubscriptXSize = 6;
    int16 ySubscriptYSize = 7;
    int16 ySubscriptXOffset = 8;
    int16 ySubscriptYOffset = 9;
    int16 ySuperscriptXSize = 10;
    int16 ySuperscriptYSize = 11;
    int16 ySuperscriptXOffset = 12;
    int16 ySuperscriptYOffset = 13;
    int16 yStrikeoutSize = 14;
    int16 yStrikeoutPosition = 15;
    int16 sFamilyClass = 16;
    repeated uint8 panose = 17;
    uint64 ulUnicodeRange1 = 18;
    uint64 ulUnicodeRange2 = 19;
    uint64 ulUnicodeRange3 = 20;
    uint64 ulUnicodeRange4 = 21;
    repeated int8 achVendID = 22;
    uint16 fsSelection = 23;
    uint16 usFirstCharIndex = 24;
    uint16 usLastCharIndex = 25;
    int16 sTypoAscender = 26;
    int16 sTypoDescender = 27;
    int16 sTypoLineGap = 28;
    uint16 usWinAscent = 29;
    uint16 usWinDescent = 30;
    uint64 ulCodePageRange1 = 31;
    uint64 ulCodePageRange2 = 32;
    int16 sxHeight = 33;
    int16 sCapHeight = 34;
    uint16 usDefaultChar = 35;
    uint16 usBreakChar = 36;
    uint16 usMaxContext = 37;
    uint16 usLowerOpticalPointSize = 38;
    uint16 usUpperOpticalPointSize = 39;
  }
  
  // FT_Color_
  message FT_Color {
    uint8 blue = 1;
    uint8 green = 2;
    uint8 red = 3;
    uint8 alpha = 4;
  }
  
  // TT_Gasp_
  message TT_Gasp {
    uint16 version = 1;
    uint16 numRanges = 2;
    repeated TT_GaspRangeRec gaspRanges = 3;
  }
  
  // TT_HoriHeader_
  message TT_HoriHeader {
    int64 Version = 1;
    int16 Ascender = 2;
    int16 Descender = 3;
    int16 Line_Gap = 4;
    uint16 advance_Width_Max = 5;
    int16 min_Left_Side_Bearing = 6;
    int16 min_Right_Side_Bearing = 7;
    int16 xMax_Extent = 8;
    int16 caret_Slope_Rise = 9;
    int16 caret_Slope_Run = 10;
    int16 caret_Offset = 11;
    repeated int16 Reserved = 12;
    int16 metric_Data_Format = 13;
    uint16 number_Of_HMetrics = 14;
    bytes long_metrics = 15;
    bytes short_metrics = 16;
  }
  
  // TT_PCLT_
  message TT_PCLT {
    int64 Version = 1;
    uint64 FontNumber = 2;
    uint16 Pitch = 3;
    uint16 xHeight = 4;
    uint16 Style = 5;
    uint16 TypeFamily = 6;
    uint16 CapHeight = 7;
    uint16 SymbolSet = 8;
    string TypeFace = 9;
    string CharacterComplement = 10;
    string FileName = 11;
    int8 StrokeWeight = 12;
    int8 WidthType = 13;
    uint8 SerifStyle = 14;
    uint8 Reserved = 15;
  }
  
  // TT_TableRec_
  message TT_TableRec {
    uint64 Tag = 1;
    uint64 CheckSum = 2;
    uint64 Offset = 3;
    uint64 Length = 4;
  }
  
  // TT_SBit_ScaleRec_
  message TT_SBit_ScaleRec {
    TT_SBit_LineMetrics hori = 1;
    TT_SBit_LineMetrics vert = 2;
    uint8 x_ppem = 3;
    uint8 y_ppem = 4;
    uint8 x_ppem_substitute = 5;
    uint8 y_ppem_substitute = 6;
  }
  
  // TT_BDFRec_
  message TT_BDFRec {
    bytes table = 1;
    bytes table_end = 2;
    bytes strings = 3;
    uint64 strings_size = 4;
    uint32 num_strikes = 5;
    bool loaded = 6;
  }
  
  // TT_NameTableRec_
  message TT_NameTableRec {
    uint16 format = 1;
    uint32 numNameRecords = 2;
    uint32 storageOffset = 3;
    repeated TT_NameRec names = 4;
    uint32 numLangTagRecords = 5;
    repeated TT_LangTagRec langTags = 6;
    FT_StreamRec stream = 7;
  }
  
  // TT_MaxProfile_
message TT_MaxProfile {
    int64 version = 1;
    uint16 numGlyphs = 2;
    uint16 maxPoints = 3;
    uint16 maxContours = 4;
    uint16 maxCompositePoints = 5;
    uint16 maxCompositeContours = 6;
    uint16 maxZones = 7;
    uint16 maxTwilightPoints = 8;
    uint16 maxStorage = 9;
    uint16 maxFunctionDefs = 10;
    uint16 maxInstructionDefs = 11;
    uint16 maxStackElements = 12;
    uint16 maxSizeOfInstructions = 13;
    uint16 maxComponentElements = 14;
    uint16 maxComponentDepth = 15;
  }
  
  // TT_Post_NamesRec_
  message TT_Post_NamesRec {
    bool loaded = 1;
    uint16 num_glyphs = 2;
    uint16 num_names = 3;
    repeated uint16 glyph_indices = 4;
    repeated bytes glyph_names = 5;
  }
  
  // FT_Palette_Data_
  message FT_Palette_Data {
    uint16 num_palettes = 1;
    repeated uint16 palette_name_ids = 2;
    repeated uint16 palette_flags = 3;
    uint16 num_palette_entries = 4;
    repeated uint16 palette_entry_name_ids = 5;
  }
  
  // TT_Header_
  message TT_Header {
    int64 Table_Version = 1;
    int64 Font_Revision = 2;
    int64 CheckSum_Adjust = 3;
    int64 Magic_Number = 4;
    uint16 Flags = 5;
    uint16 Units_Per_EM = 6;
    repeated uint64 Created = 7;
    repeated uint64 Modified = 8;
    int16 xMin = 9;
    int16 yMin = 10;
    int16 xMax = 11;
    int16 yMax = 12;
    uint16 Mac_Style = 13;
    uint16 Lowest_Rec_PPEM = 14;
    int16 Font_Direction = 15;
    int16 Index_To_Loc_Format = 16;
    int16 Glyph_Data_Format = 17;
  }
  
  // TTC_HeaderRec_
  message TTC_HeaderRec {
    uint64 tag = 1;
    int64 version = 2;
    int64 count = 3;
    repeated uint64 offsets = 4;
  }
  
  // TT_VertHeader_
  message TT_VertHeader {
    int64 Version = 1;
    int16 Ascender = 2;
    int16 Descender = 3;
    int16 Line_Gap = 4;
    uint16 advance_Height_Max = 5;
    int16 min_Top_Side_Bearing = 6;
    int16 min_Bottom_Side_Bearing = 7;
    int16 yMax_Extent = 8;
    int16 caret_Slope_Rise = 9;
    int16 caret_Slope_Run = 10;
    int16 caret_Offset = 11;
    repeated int16 Reserved = 12;
    int16 metric_Data_Format = 13;
    uint16 number_Of_VMetrics = 14;
    bytes long_metrics = 15;
    bytes short_metrics = 16;
  }
  
  // PS_Parser_FuncsRec_
  message PS_Parser_FuncsRec {
    rpc Init(PS_ParserRec parser, bytes, bytes, FT_MemoryRec) returns (PS_ParserRec) = 1;
    rpc Done(PS_ParserRec parser) returns (PS_ParserRec) = 2;
    rpc SkipSpaces(PS_ParserRec parser) returns (PS_ParserRec) = 3;
    rpc SkipPSToken(PS_ParserRec parser) returns (PS_ParserRec) = 4;
    rpc ToInt(PS_ParserRec parser) returns (int64) = 5;
    rpc ToFixed(PS_ParserRec parser, int32) returns (int64) = 6;
    rpc ToBytes(PS_ParserRec parser, bytes, uint64, uint64, uint8) returns (int32) = 7;
    rpc ToCoordArray(PS_ParserRec parser, int32, repeated int16) returns (int32) = 8;
    rpc ToFixedArray(PS_ParserRec parser, int32, repeated int64, int32) returns (int32) = 9;
    rpc ToToken(PS_ParserRec parser, T1_TokenRec) returns (T1_TokenRec) = 10;
    rpc ToTokenArray(PS_ParserRec parser, T1_TokenRec, uint32, repeated int32) returns (T1_TokenRec) = 11;
    rpc LoadField(PS_ParserRec parser, T1_FieldRec, repeated bytes, uint32, uint64) returns (int32) = 12;
    rpc LoadFieldTable(PS_ParserRec parser, T1_FieldRec, repeated bytes, uint32, uint64) returns (int32) = 13;
  }
  
  // __sigset_t
  message __sigset_t {
    repeated uint64 __val = 1;
  }
  
  // CID_FaceDictRec_
  message CID_FaceDictRec {
    PS_PrivateRec private_dict = 1;
    uint32 len_buildchar = 2;
    int64 forcebold_threshold = 3;
    int64 stroke_width = 4;
    int64 expansion_factor = 5;
    uint8 paint_type = 6;
    uint8 font_type = 7;
    FT_Matrix font_matrix = 8;
    FT_Vector font_offset = 9;
    uint32 num_subrs = 10;
    uint64 subrmap_offset = 11;
    uint32 sd_bytes = 12;
  }
  
  // AF_FaceGlobalsRec_
  message AF_FaceGlobalsRec {
    FT_FaceRec face = 1;
    uint32 glyph_count = 2;
    repeated uint16 glyph_styles = 3;
    uint32 increase_x_height = 4;
    repeated AF_StyleMetricsRec metrics = 5;
    uint16 stem_darkening_for_ppem = 6;
    int64 standard_vertical_width = 7;
    int64 standard_horizontal_width = 8;
    int64 darken_x = 9;
    int64 darken_y = 10;
    int64 scale_down_factor = 11;
    AF_ModuleRec module = 12;
  }
  
  // CF2_BluesRec_
  message CF2_BluesRec {
    int32 scale = 1;
    uint32 count = 2;
    uint8 suppressOvershoot = 3;
    uint8 doEmBoxHints = 4;
    int32 blueScale = 5;
    int32 blueShift = 6;
    int32 blueFuzz = 7;
    int32 boost = 8;
    CF2_HintRec emBoxTopEdge = 9;
    CF2_HintRec emBoxBottomEdge = 10;
    repeated CF2_BlueRec zone = 11;
  }
  
  // PFR_CharRec_
  message PFR_CharRec {
    uint32 char_code = 1;
    int32 advance = 2;
    uint32 gps_size = 3;
    uint32 gps_offset = 4;
  }
  
  // PFR_KernItemRec_
  message PFR_KernItemRec {
    PFR_KernItemRec next = 1;
    uint8 pair_count = 2;
    uint8 flags = 3;
    int16 base_adj = 4;
    uint32 pair_size = 5;
    uint64 offset = 6;
    uint32 pair1 = 7;
    uint32 pair2 = 8;
  }
  
  // CF2_OutlineRec_
  message CF2_OutlineRec {
    CF2_OutlineCallbacksRec root = 1;
    PS_Decoder decoder = 2;
  }
  
  // TT_CallRec_
  message TT_CallRec {
    int32 Caller_Range = 1;
    int64 Caller_IP = 2;
    int64 Cur_Count = 3;
    TT_DefRecord Def = 4;
  }
  
  // AF_LatinBlueRec_
  message AF_LatinBlueRec {
    AF_WidthRec ref = 1;
    AF_WidthRec shoot = 2;
    int64 ascender = 3;
    int64 descender = 4;
    uint32 flags = 5;
  }
  
  // PFR_StrikeRec_
  message PFR_StrikeRec {
    uint32 x_ppm = 1;
    uint32 y_ppm = 2;
    uint32 flags = 3;
    uint32 gps_size = 4;
    uint32 gps_offset = 5;
    uint32 bct_size = 6;
    uint32 bct_offset = 7;
    uint32 num_bitmaps = 8;
    repeated PFR_BitmapCharRec bitmaps = 9;
  }
  
  // AF_AxisHintsRec_
  message AF_AxisHintsRec {
    uint32 num_segments = 1;
    uint32 max_segments = 2;
    repeated AF_SegmentRec segments = 3;
    uint32 num_edges = 4;
    uint32 max_edges = 5;
    repeated AF_EdgeRec edges = 6;
    AF_Direction_ major_dir = 7;
    message (unnamed) {
      AF_AxisHintsRec_(unnamed) embedded = 8;
    }
  }
  
  // bdf_bbx_t_
  message bdf_bbx_t {
    uint16 width = 1;
    uint16 height = 2;
    int16 x_offset = 3;
    int16 y_offset = 4;
    int16 ascent = 5;
    int16 descent = 6;
  }
  
  // SDF_Edge_
  message SDF_Edge {
    FT_Vector start_pos = 1;
    FT_Vector end_pos = 2;
    FT_Vector control_a = 3;
    FT_Vector control_b = 4;
    SDF_Edge_Type_ edge_type = 5;
    SDF_Edge_ next = 6;
  }
  
  // PSH_ZoneRec_
  message PSH_ZoneRec {
    int64 scale = 1;
    int64 delta = 2;
    int64 min = 3;
    int64 max = 4;
  }
  
  // FTC_FamilyRec_
  message FTC_FamilyRec {
    FTC_MruNodeRec mrunode = 1;
    uint32 num_nodes = 2;
    FTC_CacheRec cache = 3;
    FTC_MruListClassRec clazz = 4;
  }
  
  // PFR_DimensionRec_
  message PFR_DimensionRec {
    uint32 standard = 1;
    uint32 num_stem_snaps = 2;
    repeated int32 stem_snaps = 3;
  }
  
  // PS_DimensionRec_
  message PS_DimensionRec {
    PS_Hint_TableRec hints = 1;
    PS_Mask_TableRec masks = 2;
    PS_Mask_TableRec counters = 3;
  }
  
  // PCF_TableRec_
  message PCF_TableRec {
    uint64 type = 1;
    uint64 format = 2;
    uint64 size = 3;
    uint64 offset = 4;
  }
  
  // PSH_HintRec_
  message PSH_HintRec {
    int32 org_pos = 1;
    int32 org_len = 2;
    int64 cur_pos = 3;
    int64 cur_len = 4;
    uint32 flags = 5;
    PSH_HintRec parent = 6;
    int32 order = 7;
  }

  // PSH_BluesRec_
message PSH_BluesRec {
    PSH_Blue_TableRec normal_top = 1;
    PSH_Blue_TableRec normal_bottom = 2;
    PSH_Blue_TableRec family_top = 3;
    PSH_Blue_TableRec family_bottom = 4;
    int64 blue_scale = 5;
    int32 blue_shift = 6;
    int32 blue_threshold = 7;
    int32 blue_fuzz = 8;
    uint8 no_overshoots = 9;
  }
  
  // PFR_SubGlyphRec_
  message PFR_SubGlyphRec {
    int64 x_scale = 1;
    int64 y_scale = 2;
    int32 x_delta = 3;
    int32 y_delta = 4;
    uint32 gps_offset = 5;
    uint32 gps_size = 6;
  }
  
  // bdf_glyph_t_
  message bdf_glyph_t {
    string name = 1;
    uint64 encoding = 2;
    uint16 swidth = 3;
    uint16 dwidth = 4;
    bdf_bbx_t bbx = 5;
    bytes bitmap = 6;
    uint64 bpr = 7;
    uint16 bytes = 8;
  }
  
  // AF_CJKBlueRec_
  message AF_CJKBlueRec {
    AF_WidthRec ref = 1;
    AF_WidthRec shoot = 2;
    uint32 flags = 3;
  }
  
  // AF_PointRec_
  message AF_PointRec {
    uint16 flags = 1;
    int8 in_dir = 2;
    int8 out_dir = 3;
    int64 ox = 4;
    int64 oy = 5;
    int16 fx = 6;
    int16 fy = 7;
    int64 x = 8;
    int64 y = 9;
    int64 u = 10;
    int64 v = 11;
    AF_PointRec next = 12;
    AF_PointRec prev = 13;
  }
  
  // CF2_Matrix_
  message CF2_Matrix {
    int32 a = 1;
    int32 b = 2;
    int32 c = 3;
    int32 d = 4;
    int32 tx = 5;
    int32 ty = 6;
  }
  
  // AF_ScalerRec_
  message AF_ScalerRec {
    FT_FaceRec face = 1;
    int64 x_scale = 2;
    int64 y_scale = 3;
    int64 x_delta = 4;
    int64 y_delta = 5;
    FT_Render_Mode_ render_mode = 6;
    uint32 flags = 7;
  }
  
  // bdf_property_t_
  message bdf_property_t {
    string name = 1;
    int32 format = 2;
    int32 builtin = 3;
    message unnamed {
      uint64 value = 1;
    }
    unnamed value = 4;
  }
  
  // PSH_DimensionRec_
  message PSH_DimensionRec {
    PSH_WidthsRec stdw = 1;
    int64 scale_mult = 2;
    int64 scale_delta = 3;
  }
  
  // CF2_HintRec_
  message CF2_HintRec {
    uint32 flags = 1;
    uint64 index = 2;
    int32 csCoord = 3;
    int32 dsCoord = 4;
    int32 scale = 5;
  }
  
  // FT_CMapRec_
  message FT_CMapRec {
    FT_CharMapRec charmap = 1;
    FT_CMap_ClassRec clazz = 2;
  }
  
  // PS_Decoder_
  message PS_Decoder {
    PS_Builder builder = 1;
    repeated int64 stack = 2;
    repeated int64 top = 3;
    repeated PS_Decoder_Zone_ zones = 4;
    PS_Decoder_Zone_ zone = 5;
    int32 flex_state = 6;
    int32 num_flex_vectors = 7;
    repeated FT_Vector flex_vectors = 8;
    CFF_FontRec cff = 9;
    CFF_SubFontRec current_subfont = 10;
    FT_Generic cf2_instance = 11;
    repeated int64 glyph_width = 12;
    uint8 width_only = 13;
    int32 num_hints = 14;
    uint32 num_locals = 15;
    uint32 num_globals = 16;
    int32 locals_bias = 17;
    int32 globals_bias = 18;
    repeated bytes locals = 19;
    repeated bytes globals = 20;
    repeated bytes glyph_names = 21;
    uint32 num_glyphs = 22;
    FT_Render_Mode_ hint_mode = 23;
    uint8 seac = 24;
    FT_Service_PsCMapsRec psnames = 27;
    int32 lenIV = 28;
    repeated uint32 locals_len = 29;
    FT_HashRec locals_hash = 30;
    FT_Matrix font_matrix = 31;
    FT_Vector font_offset = 32;
    PS_BlendRec blend = 33;
    repeated int64 buildchar = 34;
    uint32 len_buildchar = 35;
  }
  
  // CFF_SubFontRec_
  message CFF_SubFontRec {
    CFF_FontRecDictRec font_dict = 1;
    CFF_PrivateRec private_dict = 2;
    CFF_BlendRec blend = 3;
    uint32 lenNDV = 4;
    repeated int64 NDV = 5;
    bytes blend_stack = 6;
    bytes blend_top = 7;
    uint32 blend_used = 8;
    uint32 blend_alloc = 9;
    CFF_IndexRec local_subrs_index = 10;
    repeated bytes local_subrs = 11;
    uint32 random = 12;
  }
  
  // TT_FaceRec_
message TT_FaceRec {
    FT_FaceRec root = 1;
    TTC_HeaderRec ttc_header = 2;
    uint64 format_tag = 3;
    uint16 num_tables = 4;
    repeated TT_TableRec dir_tables = 5;
    TT_Header header = 6;
    TT_HoriHeader horizontal = 7;
    TT_MaxProfile max_profile = 8;
    uint8 vertical_info = 9;
    TT_VertHeader vertical = 10;
    uint16 num_names = 11;
    TT_NameTableRec name_table = 12;
    TT_OS2 os2 = 13;
    TT_Postscript postscript = 14;
    bytes cmap_table = 15;
    uint64 cmap_size = 16;
    SFNT sfnt = 23;
    PSNames psnames = 24;
    MM mm = 25;
    TT_Var tt_var = 26;
    FaceVar face_var = 27;
    PSAux psaux = 28;
    TT_Gasp gasp = 29;
    TT_PCLT pclt = 30;
    uint64 num_sbit_scales = 31;
    repeated TT_SBit_ScaleRec sbit_scales = 32;
    TT_Post_NamesRec postscript_names = 33;
    FT_Palette_Data palette_data = 34;
    uint16 palette_index = 35;
    FT_Color palette = 36;
    uint8 have_foreground_color = 37;
    FT_Color foreground_color = 38;
    uint64 font_program_size = 39;
    bytes font_program = 40;
    uint64 cvt_program_size = 41;
    bytes cvt_program = 42;
    uint64 cvt_size = 43;
    repeated int32 cvt = 44;
    FT_Generic extra = 46;
    string postscript_name = 47;
    uint64 glyf_len = 48;
    uint64 glyf_offset = 49;
    uint8 is_cff2 = 50;
    uint8 doblend = 51;
    GX_BlendRec blend = 52;
    uint32 variation_support = 53;
    string var_postscript_prefix = 54;
    uint32 var_postscript_prefix_len = 55;
    uint32 var_default_named_instance = 56;
    string non_var_style_name = 57;
    uint64 horz_metrics_size = 58;
    uint64 vert_metrics_size = 59;
    uint64 num_locations = 60;
    bytes glyph_locations = 61;
    bytes hdmx_table = 62;
    uint64 hdmx_table_size = 63;
    uint32 hdmx_record_count = 64;
    uint64 hdmx_record_size = 65;
    repeated bytes hdmx_records = 66;
    bytes sbit_table = 67;
    uint64 sbit_table_size = 68;
    TT_SbitTableType sbit_table_type = 69;
    uint32 sbit_num_strikes = 70;
    uint32 sbit_strike_map = 71;
    bytes kern_table = 72;
    uint64 kern_table_size = 73;
    uint32 num_kern_tables = 74;
    uint32 kern_avail_bits = 75;
    uint32 kern_order_bits = 76;
    TT_BDFRec bdf = 77;
    uint64 horz_metrics_offset = 78;
    uint64 vert_metrics_offset = 79;
    uint64 ebdt_start = 80;
    uint64 ebdt_size = 81;
    CPAL cpal = 82;
    COLR colr = 83;
    SVG svg = 84;
  }
  
  // FT_UnitVector_
  message FT_UnitVector {
    int16 x = 1;
    int16 y = 2;
  }
  
  // PS_ParserRec_
  message PS_ParserRec {
    bytes cursor = 1;
    bytes base = 2;
    bytes limit = 3;
    int32 error = 4;
    FT_MemoryRec memory = 5;
    PS_Parser_FuncsRec funcs = 6;
  }
  
  // __jmp_buf_tag
  message __jmp_buf_tag {
    repeated int64 __jmpbuf = 1;
    int32 __mask_was_saved = 2;
    __sigset_t __saved_mask = 3;
  }
  
  // CID_FaceInfoRec_
  message CID_FaceInfoRec {
    string cid_font_name = 1;
    int64 cid_version = 2;
    int32 cid_font_type = 3;
    string registry = 4;
    string ordering = 5;
    int32 supplement = 6;
    PS_FontInfoRec font_info = 7;
    FT_BBox font_bbox = 8;
    uint64 uid_base = 9;
    int32 num_xuid = 10;
    repeated uint64 xuid = 11;
    uint64 cidmap_offset = 12;
    uint32 fd_bytes = 13;
    uint32 gd_bytes = 14;
    uint64 cid_count = 15;
    uint32 num_dicts = 16;
    repeated CID_FaceDictRec font_dicts = 17;
    uint64 data_offset = 18;
  }
  
  // T1_EncodingRecRec_
  message T1_EncodingRecRec {
    int32 num_chars = 1;
    int32 code_first = 2;
    int32 code_last = 3;
    repeated uint16 char_index = 4;
    repeated string char_name = 5;
  }
  
  // PS_UniMap_
  message PS_UniMap {
    uint32 unicode = 1;
    uint32 glyph_index = 2;
  }
  
  // PS_Table_FuncsRec_
  message PS_Table_FuncsRec {
  }
  
  // FTC_ScalerRec_
  message FTC_ScalerRec {
    FaceID face_id = 1;
    uint32 width = 2;
    uint32 height = 3;
    int32 pixel = 4;
    uint32 x_res = 5;
    uint32 y_res = 6;
  }
  
  // FT_WinFNT_HeaderRec_
  message FT_WinFNT_HeaderRec {
    uint16 version = 1;
    uint64 file_size = 2;
    bytes copyright = 3;
    uint16 file_type = 4;
    uint16 nominal_point_size = 5;
    uint16 vertical_resolution = 6;
    uint16 horizontal_resolution = 7;
    uint16 ascent = 8;
    uint16 internal_leading = 9;
    uint16 external_leading = 10;
    uint8 italic = 11;
    uint8 underline = 12;
    uint8 strike_out = 13;
    uint16 weight = 14;
    uint8 charset = 15;
    uint16 pixel_width = 16;
    uint16 pixel_height = 17;
    uint8 pitch_and_family = 18;
    uint16 avg_width = 19;
    uint16 max_width = 20;
    uint8 first_char = 21;
    uint8 last_char = 22;
    uint8 default_char = 23;
    uint8 break_char = 24;
    uint16 bytes_per_row = 25;
    uint64 device_offset = 26;
    uint64 face_name_offset = 27;
    uint64 bits_pointer = 28;
    uint64 bits_offset = 29;
    uint8 reserved = 30;
    uint64 flags = 31;
    uint16 A_space = 32;
    uint16 B_space = 33;
    uint16 C_space = 34;
    uint16 color_table_offset = 35;
    repeated uint64 reserved1 = 36;
  }

  // FT_Raster_Params_
message FT_Raster_Params {
    FT_Bitmap target = 1;
    bytes source = 2;
    int32 flags = 3;
    bytes user = 7;
    FT_BBox clip_box = 8;
  }
  
  // SDF_Contour_
  message SDF_Contour {
    FT_Vector last_pos = 1;
    repeated SDF_Edge edges = 2;
    SDF_Contour next = 3;
  }
  
  // bdf_list_t__
  message bdf_list_t {
    repeated string field = 1;
    uint64 size = 2;
    uint64 used = 3;
    FT_MemoryRec memory = 4;
  }
  
  // AF_StyleMetricsRec_
  message AF_StyleMetricsRec {
    AF_StyleClassRec style_class = 1;
    AF_ScalerRec scaler = 2;
    uint8 digits_have_same_width = 3;
    AF_FaceGlobalsRec globals = 4;
  }
  
  // PFR_HeaderRec_
  message PFR_HeaderRec {
    uint32 signature = 1;
    uint32 version = 2;
    uint32 signature2 = 3;
    uint32 header_size = 4;
    uint32 log_dir_size = 5;
    uint32 log_dir_offset = 6;
    uint32 log_font_max_size = 7;
    uint32 log_font_section_size = 8;
    uint32 log_font_section_offset = 9;
    uint32 phy_font_max_size = 10;
    uint32 phy_font_section_size = 11;
    uint32 phy_font_section_offset = 12;
    uint32 gps_max_size = 13;
    uint32 gps_section_size = 14;
    uint32 gps_section_offset = 15;
    uint32 max_blue_values = 16;
    uint32 max_x_orus = 17;
    uint32 max_y_orus = 18;
    uint32 phy_font_max_size_high = 19;
    uint32 color_flags = 20;
    uint32 bct_max_size = 21;
    uint32 bct_set_max_size = 22;
    uint32 phy_bct_set_max_size = 23;
    uint32 num_phy_fonts = 24;
    uint32 max_vert_stem_snap = 25;
    uint32 max_horz_stem_snap = 26;
    uint32 max_chars = 27;
  }
  
  // BDF_encoding_el_
  message BDF_encoding_el {
    uint64 enc = 1;
    uint16 glyph = 2;
  }
  
  // TT_SizeRec_
  message TT_SizeRec {
    FT_SizeRec root = 1;
    FT_Size_Metrics metrics = 2;
    FT_Size_Metrics hinted_metrics = 3;
    TT_Size_Metrics ttmetrics = 4;
    bytes widthp = 5;
    uint64 strike_index = 6;
    int64 point_size = 7;
    uint32 num_function_defs = 8;
    uint32 max_function_defs = 9;
    repeated TT_DefRecord function_defs = 10;
    uint32 num_instruction_defs = 11;
    uint32 max_instruction_defs = 12;
    repeated TT_DefRecord instruction_defs = 13;
    uint32 max_func = 14;
    uint32 max_ins = 15;
    repeated TT_CodeRange codeRangeTable = 16;
    TT_GraphicsState GS = 17;
    uint64 cvt_size = 18;
    repeated int64 cvt = 19;
    uint16 storage_size = 20;
    repeated int64 storage = 21;
    TT_GlyphZoneRec twilight = 22;
    TT_ExecContextRec context = 23;
    int32 bytecode_ready = 24;
    int32 cvt_ready = 25;
  }
  
  // T42_ParserRec_
  message T42_ParserRec {
    PS_ParserRec root = 1;
    FT_StreamRec stream = 2;
    bytes base_dict = 3;
    int64 base_len = 4;
    uint8 in_memory = 5;
  }
  
  // TPixmap_
  message TPixmap {
    bytes origin = 1;
    int32 pitch = 2;
  }
  
  // FT_StrokeBorderRec_
  message FT_StrokeBorderRec {
    uint32 num_points = 1;
    uint32 max_points = 2;
    repeated FT_Vector points = 3;
    bytes tags = 4;
    uint8 movable = 5;
    int32 start = 6;
    FT_MemoryRec memory = 7;
    uint8 valid = 8;
  }
  
  // TT_CodeRange_
  message TT_CodeRange {
    bytes base = 1;
    int64 size = 2;
  }
  
  // FTC_GQueryRec_
  message FTC_GQueryRec {
    uint32 gindex = 1;
    FTC_FamilyRec family = 2;
  }
  
  // CF2_FontRec_
  message CF2_FontRec {
    FT_MemoryRec memory = 1;
    int32 error = 2;
    uint8 isT1 = 3;
    uint8 isCFF2 = 4;
    int32 renderingFlags = 5;
    CF2_Matrix currentTransform = 6;
    CF2_Matrix innerTransform = 7;
    CF2_Matrix outerTransform = 8;
    int32 ppem = 9;
    CFF_BlendRec blend = 10;
    uint32 vsindex = 11;
    uint32 lenNDV = 12;
    repeated int64 NDV = 13;
    int32 unitsPerEm = 14;
    int32 syntheticEmboldeningAmountX = 15;
    int32 syntheticEmboldeningAmountY = 16;
    CF2_OutlineRec outline = 17;
    PS_Decoder decoder = 18;
    CFF_SubFontRec lastSubfont = 19;
    uint8 hinted = 20;
    uint8 darkened = 21;
    uint8 stemDarkened = 22;
    repeated int32 darkenParams = 23;
    int32 stdVW = 24;
    int32 stdHW = 25;
    int32 darkenX = 26;
    int32 darkenY = 27;
    uint8 reverseWinding = 28;
    CF2_BluesRec blues = 29;
    FT_Service_CFFLoadRec cffload = 30;
  }
  
  // bdf_font_t_
  message bdf_font_t {
    string name = 1;
    bdf_bbx_t bbx = 2;
    uint64 point_size = 3;
    uint64 resolution_x = 4;
    uint64 resolution_y = 5;
    int32 spacing = 6;
    uint16 monowidth = 7;
    uint64 default_char = 8;
    int64 font_ascent = 9;
    int64 font_descent = 10;
    uint64 glyphs_size = 11;
    uint64 glyphs_used = 12;
    repeated bdf_glyph_t glyphs = 13;
    uint64 unencoded_size = 14;
    uint64 unencoded_used = 15;
    repeated bdf_glyph_t unencoded = 16;
    uint64 props_size = 17;
    uint64 props_used = 18;
    repeated bdf_property_t props = 19;
    string comments = 20;
    uint64 comments_len = 21;
    bytes internal = 22;
    uint16 bpp = 23;
    FT_MemoryRec memory = 24;
    repeated bdf_property_t user_props = 25;
    uint64 nuser_props = 26;
    FT_HashRec proptbl = 27;
  }
  
  // CF2_StackNumber_
  message CF2_StackNumber {
    union {
      float f = 1;
      int64 i = 2;
    } u = 3;
    CF2_NumberType type = 4;
  }
  
  // PSH_ContourRec_
  message PSH_ContourRec {
    PSH_PointRec start = 1;
    uint32 count = 2;
  }
  
  // PSH_GlobalsRec_
  message PSH_GlobalsRec {
    FT_MemoryRec memory = 1;
    repeated PSH_DimensionRec dimension = 2;
    PSH_BluesRec blues = 3;
  }
  
  // PCF_MetricRec_
  message PCF_MetricRec {
    int32 leftSideBearing = 1;
    int32 rightSideBearing = 2;
    int32 characterWidth = 3;
    int32 ascent = 4;
    int32 descent = 5;
    int32 attributes = 6;
    uint64 bits = 7;
  }
  
  // TT_DefRecord_
  message TT_DefRecord {
    int32 range = 1;
    int64 start = 2;
    int64 end = 3;
    uint32 opc = 4;
    uint8 active = 5;
  }
  
  // ED_
  message ED_ {
    int32 dist = 1;
    FT_Vector prox = 2;
    uint8 alpha = 3;
  }
  
  // CF2_HintMaskRec_
message CF2_HintMaskRec {
    repeated int32 error = 1;
    uint8 isValid = 2;
    uint8 isNew = 3;
    uint64 bitCount = 4;
    uint64 byteCount = 5;
    bytes mask = 6;
  }
  
  // FTC_BasicAttrRec_
  message FTC_BasicAttrRec {
    FTC_ScalerRec scaler = 1;
    uint32 load_flags = 2;
  }
  
  // PSH_Hint_TableRec_
  message PSH_Hint_TableRec {
    uint32 max_hints = 1;
    uint32 num_hints = 2;
    repeated PSH_HintRec hints = 3;
    repeated PSH_HintRec sort = 4;
    repeated PSH_HintRec sort_global = 5;
    uint32 num_zones = 6;
    repeated PSH_ZoneRec zones = 7;
    PSH_ZoneRec zone = 8;
    PS_Mask_TableRec hint_masks = 9;
    PS_Mask_TableRec counter_masks = 10;
  }
  
  // PCF_PropertyRec_
  message PCF_PropertyRec {
    string name = 1;
    uint8 isString = 2;
    oneof value {
      string string_value = 3;
      uint32 int_value = 4;
      float float_value = 5;
    }
  }
  
  // T1_ParserRec_
  message T1_ParserRec {
    PS_ParserRec root = 1;
    FT_StreamRec stream = 2;
    bytes base_dict = 3;
    uint64 base_len = 4;
    bytes private_dict = 5;
    uint64 private_len = 6;
    uint8 in_pfb = 7;
    uint8 in_memory = 8;
    uint8 single_block = 9;
  }
  
  // TT_GraphicsState_
  message TT_GraphicsState {
    uint16 rp0 = 1;
    uint16 rp1 = 2;
    uint16 rp2 = 3;
    FT_UnitVector dualVector = 4;
    FT_UnitVector projVector = 5;
    FT_UnitVector freeVector = 6;
    int64 loop = 7;
    int64 minimum_distance = 8;
    int32 round_state = 9;
    uint8 auto_flip = 10;
    int64 control_value_cutin = 11;
    int64 single_width_cutin = 12;
    int64 single_width_value = 13;
    uint16 delta_base = 14;
    uint16 delta_shift = 15;
    uint8 instruct_control = 16;
    uint8 scan_control = 17;
    int32 scan_type = 18;
    uint16 gep0 = 19;
    uint16 gep1 = 20;
    uint16 gep2 = 21;
  }
  
  // PFR_PhyFontRec_
  message PFR_PhyFontRec {
    FT_MemoryRec memory = 1;
    uint32 offset = 2;
    uint32 font_ref_number = 3;
    uint32 outline_resolution = 4;
    uint32 metrics_resolution = 5;
    FT_BBox bbox = 6;
    uint32 flags = 7;
    int32 standard_advance = 8;
    int32 ascent = 9;
    int32 descent = 10;
    int32 leading = 11;
    PFR_DimensionRec horizontal = 12;
    PFR_DimensionRec vertical = 13;
    string font_id = 14;
    string family_name = 15;
    string style_name = 16;
    uint32 num_strikes = 17;
    uint32 max_strikes = 18;
    repeated PFR_StrikeRec strikes = 19;
    uint32 num_blue_values = 20;
    repeated int32 blue_values = 21;
    uint32 blue_fuzz = 22;
    uint32 blue_scale = 23;
    uint32 num_chars = 24;
    uint64 chars_offset = 25;
    repeated PFR_CharRec chars = 26;
    uint32 num_kern_pairs = 27;
    repeated PFR_KernItemRec kern_items = 28;
    repeated PFR_KernItemRec kern_items_tail = 29;
    uint64 bct_offset = 30;
    bytes cursor = 31;
  }
  
  // PCF_AccelRec_
  message PCF_AccelRec {
    uint8 noOverlap = 1;
    uint8 constantMetrics = 2;
    uint8 terminalFont = 3;
    uint8 constantWidth = 4;
    uint8 inkInside = 5;
    uint8 inkMetrics = 6;
    uint8 drawDirection = 7;
    int64 fontAscent = 8;
    int64 fontDescent = 9;
    int64 maxOverlap = 10;
    PCF_MetricRec minbounds = 11;
    PCF_MetricRec maxbounds = 12;
    PCF_MetricRec ink_minbounds = 13;
    PCF_MetricRec ink_maxbounds = 14;
  }
  
  // CF2_HintMapRec_
  message CF2_HintMapRec {
    CF2_FontRec font = 1;
    CF2_HintMapRec initialHintMap = 2;
    CF2_ArrStackRec hintMoves = 3;
    uint8 isValid = 4;
    uint8 hinted = 5;
    int32 scale = 6;
    uint32 count = 7;
    uint32 lastIndex = 8;
    repeated CF2_HintRec edge = 9;
  }
  
  // FT_LzwStateRec_
  message FT_LzwStateRec {
    FT_LzwPhase phase = 1;
    int32 in_eof = 2;
    bytes buf_tab = 3;
    uint32 buf_offset = 4;
    uint32 buf_size = 5;
    uint8 buf_clear = 6;
    uint64 buf_total = 7;
    uint32 max_bits = 8;
    int32 block_mode = 9;
    uint32 max_free = 10;
    uint32 num_bits = 11;
    uint32 free_ent = 12;
    uint32 free_bits = 13;
    uint32 old_code = 14;
    uint32 old_char = 15;
    uint32 in_code = 16;
    repeated uint16 prefix = 17;
    bytes suffix = 18;
    uint32 prefix_size = 19;
    bytes stack = 20;
    uint32 stack_top = 21;
    uint64 stack_size = 22;
    bytes stack_0 = 23;
    FT_StreamRec source = 24;
    FT_MemoryRec memory = 25;
  }
  
  // PCF_TocRec_
  message PCF_TocRec {
    uint64 version = 1;
    uint64 count = 2;
    repeated PCF_TableRec tables = 3;
  }
  
  // TT_ExecContextRec_
  message TT_ExecContextRec {
    TT_FaceRec face = 1;
    TT_SizeRec size = 2;
    FT_MemoryRec memory = 3;
    int32 error = 4;
    int64 top = 5;
    int64 stackSize = 6;
    repeated int64 stack = 7;
    int64 args = 8;
    int64 new_top = 9;
    TT_GlyphZoneRec zp0 = 10;
    TT_GlyphZoneRec zp1 = 11;
    TT_GlyphZoneRec zp2 = 12;
    TT_GlyphZoneRec pts = 13;
    TT_GlyphZoneRec twilight = 14;
    int64 pointSize = 15;
    FT_Size_Metrics metrics = 16;
    TT_Size_Metrics tt_metrics = 17;
    TT_GraphicsState GS = 18;
    int32 iniRange = 19;
    int32 curRange = 20;
    bytes code = 21;
    int64 IP = 22;
    int64 codeSize = 23;
    uint8 opcode = 24;
    int32 length = 25;
    uint8 step_ins = 26;
    uint64 cvtSize = 27;
    repeated int64 cvt = 28;
    uint64 glyfCvtSize = 29;
    repeated int64 glyfCvt = 30;
    uint32 glyphSize = 31;
    bytes glyphIns = 32;
    uint32 numFDefs = 33;
    uint32 maxFDefs = 34;
    repeated TT_DefRecord FDefs = 35;
    uint32 numIDefs = 36;
    uint32 maxIDefs = 37;
    repeated TT_DefRecord IDefs = 38;
    uint32 maxFunc = 39;
    uint32 maxIns = 40;
    int32 callTop = 41;
    int32 callSize = 42;
    repeated TT_CallRec callStack = 43;
    uint16 maxPoints = 44;
    int16 maxContours = 45;
    repeated TT_CodeRange_ codeRangeTable = 46;
    uint16 storeSize = 47;
    repeated int64 storage = 48;
    uint16 glyfStoreSize = 49;
    repeated int64 glyfStorage = 50;
    int64 period = 51;
    int64 phase = 52;
    int64 threshold = 53;
    uint8 instruction_trap = 54;
    TT_GraphicsState default_GS = 55;
    uint8 is_composite = 56;
    uint8 pedantic_hinting = 57;
    int64 F_dot_P = 58;
    uint8 grayscale = 69;
    uint8 subpixel_hinting_lean = 70;
    uint8 vertical_lcd_lean = 71;
    uint8 backward_compatibility = 72;
    uint8 iupx_called = 73;
    uint8 iupy_called = 74;
    uint8 grayscale_cleartype = 75;
    uint64 loopcall_counter = 76;
    uint64 loopcall_counter_max = 77;
    uint64 neg_jump_counter = 78;
    uint64 neg_jump_counter_max = 79;
  }
  
  // PSH_PointRec_
  message PSH_PointRec {
    PSH_PointRec prev = 1;
    PSH_PointRec next = 2;
    PSH_ContourRec contour = 3;
    uint32 flags = 4;
    uint32 flags2 = 5;
    PSH_Dir dir_in = 6;
    PSH_Dir dir_out = 7;
    PSH_HintRec hint = 8;
    int64 org_u = 9;
    int64 org_v = 10;
    int64 cur_u = 11;
  }
  
  // PFR_GlyphRec_
  message PFR_GlyphRec {
    uint8 format = 1;
    uint32 max_xy_control = 2;
    repeated int64 x_control = 3;
    repeated int64 y_control = 4;
    uint32 num_subs = 5;
    uint32 max_subs = 6;
    repeated PFR_SubGlyphRec subs = 7;
    FT_GlyphLoaderRec loader = 8;
    uint8 path_begun = 9;
  }
  
  // TT_CMapRec_
  message TT_CMapRec {
    FT_CMapRec cmap = 1;
    bytes data = 2;
    int32 flags = 3;
  }
  
  // TCell_
  message TCell_ {
    int32 x = 1;
    int32 cover = 2;
    int32 area = 3;
    TCell_ next = 4;
  }
    
  // AF_LatinAxisRec_
message AF_LatinAxisRec {
    int64 scale = 1;
    int64 delta = 2;
    uint32 width_count = 3;
    repeated AF_WidthRec widths = 4;
    int64 edge_distance_threshold = 5;
    int64 standard_width = 6;
    bool extra_light = 7;
    uint32 blue_count = 8;
    repeated AF_LatinBlueRec blues = 9;
    int64 org_scale = 10;
    int64 org_delta = 11;
  }
  
  // bdf_options_t_
  message bdf_options_t {
    int32 correct_metrics = 1;
    int32 keep_unencoded = 2;
    int32 keep_comments = 3;
    int32 font_spacing = 4;
  }
  
  // CF2_ArrStackRec_
  message CF2_ArrStackRec {
    FT_MemoryRec memory = 1;
    repeated int32 error = 2;
    uint64 sizeItem = 3;
    uint64 allocated = 4;
    uint64 count = 5;
    uint64 totalSize = 6;
    bytes ptr = 7;
  }
  
  // FTC_GNodeRec_
  message FTC_GNodeRec {
    FTC_NodeRec node = 1;
    FTC_FamilyRec family = 2;
    uint32 gindex = 3;
  }
  
  // AF_GlyphHintsRec_
  message AF_GlyphHintsRec {
    FT_MemoryRec memory = 1;
    int64 x_scale = 2;
    int64 x_delta = 3;
    int64 y_scale = 4;
    int64 y_delta = 5;
    int32 max_points = 6;
    int32 num_points = 7;
    repeated AF_PointRec points = 8;
    int32 max_contours = 9;
    int32 num_contours = 10;
    repeated AF_PointRec contours = 11;
    repeated AF_AxisHintsRec axis = 12;
    uint32 scaler_flags = 13;
    uint32 other_flags = 14;
    AF_StyleMetricsRec metrics = 15;
    AF_GlyphHintsRec_embedded embedded = 16;
  }
  
  // SDF_Raster_Params_
  message SDF_Raster_Params {
    FT_Raster_Params root = 1;
    uint32 spread = 2;
    uint8 flip_sign = 3;
    uint8 flip_y = 4;
    uint8 overlaps = 5;
  }
  
  // TProfile_
  message TProfile_ {
    TProfile_ link = 1;
    TProfile_ next = 2;
    int32 offset = 3;
    int32 height = 4;
    int32 start = 5;
    uint16 flags = 6;
    int64 X = 7;
    repeated int64 x = 8;
  }
  
  // PS_HintsRec_
  message PS_HintsRec {
    FT_MemoryRec memory = 1;
    int32 error = 2;
    uint32 magic = 3;
    PS_Hint_Type hint_type = 4;
    repeated PS_DimensionRec dimension = 5;
  }
  
  // CID_Parser_
  message CID_Parser {
    PS_ParserRec root = 1;
    FT_StreamRec stream = 2;
    bytes postscript = 3;
    uint64 postscript_len = 4;
    uint64 data_offset = 5;
    uint64 binary_length = 6;
    CID_FaceInfoRec cid = 7;
    uint32 num_dict = 8;
  }
  
  // TT_Size_Metrics_
  message TT_Size_Metrics {
    int64 x_ratio = 1;
    int64 y_ratio = 2;
    uint16 ppem = 3;
    int64 ratio = 4;
    int64 scale = 5;
    repeated int64 compensations = 6;
    bool valid = 7;
    bool rotated = 8;
    bool stretched = 9;
  }
  
  // AF_CJKAxisRec_
  message AF_CJKAxisRec {
    int64 scale = 1;
    int64 delta = 2;
    uint32 width_count = 3;
    repeated AF_WidthRec widths = 4;
    int64 edge_distance_threshold = 5;
    int64 standard_width = 6;
    bool extra_light = 7;
    bool control_overshoot = 8;
    uint32 blue_count = 9;
    repeated AF_CJKBlueRec blues = 10;
    int64 org_scale = 11;
    int64 org_delta = 12;
  }
  
  // PFR_LogFontRec_
  message PFR_LogFontRec {
    uint32 size = 1;
    uint32 offset = 2;
    repeated int32 matrix = 3;
    uint32 stroke_flags = 4;
    int32 stroke_thickness = 5;
    int32 bold_thickness = 6;
    int32 miter_limit = 7;
    uint32 phys_size = 8;
    uint32 phys_offset = 9;
  }
  
  // FNT_FontRec_
  message FNT_FontRec {
    uint64 offset = 1;
    FT_WinFNT_HeaderRec header = 2;
    bytes fnt_frame = 3;
    uint64 fnt_size = 4;
    string family_name = 5;
  }
  
  // PCF_EncRec_
  message PCF_EncRec {
    uint16 firstCol = 1;
    uint16 lastCol = 2;
    uint16 firstRow = 3;
    uint16 lastRow = 4;
    uint16 defaultChar = 5;
    repeated uint16 offset = 6;
  }
  
  // TT_GlyphZoneRec_
  message TT_GlyphZoneRec {
    FT_MemoryRec memory = 1;
    uint16 max_points = 2;
    int16 max_contours = 3;
    uint16 n_points = 4;
    int16 n_contours = 5;
    FT_Vector org = 6;
    FT_Vector cur = 7;
    FT_Vector orus = 8;
    bytes tags = 9;
    repeated uint16 contours = 10;
    uint16 first_point = 11;
  }
  
  // SVG_RendererHooks_
  message SVG_RendererHooks {
    int32 init_svg = 1;
    void free_svg = 2;
    int32 render_svg = 3;
    int32 preset_slot = 4;
  }
  
  // T1_FontRec_
  message T1_FontRec {
    PS_FontInfoRec font_info = 1;
    PS_FontExtraRec font_extra = 2;
    PS_PrivateRec private_dict = 3;
    string font_name = 4;
    T1_EncodingType encoding_type = 5;
    T1_EncodingRecRec encoding = 6;
    bytes subrs_block = 7;
    bytes charstrings_block = 8;
    bytes glyph_names_block = 9;
    int32 num_subrs = 10;
    repeated bytes subrs = 11;
    repeated uint32 subrs_len = 12;
    FT_HashRec subrs_hash = 13;
    int32 num_glyphs = 14;
    repeated string glyph_names = 15;
    repeated bytes charstrings = 16;
    repeated uint32 charstrings_len = 17;
    uint8 paint_type = 18;
    uint8 font_type = 19;
    FT_Matrix font_matrix = 20;
    FT_Vector font_offset = 21;
    FT_BBox font_bbox = 22;
    int64 font_id = 23;
    int64 stroke_width = 24;
  }
  
  // PS_UnicodesRec_
message PS_UnicodesRec {
    FT_CMapRec cmap = 1;
    uint32 num_maps = 2;
    repeated PS_UniMap maps = 3;
  }
  
  // FT_ValidatorRec_
  message FT_ValidatorRec {
    repeated __jmp_buf_tag jump_buffer = 1;
    bytes base = 2;
    bytes limit = 3;
    FT_ValidationLevel level = 4;
    int32 error = 5;
  }
  
  // TT_SBit_MetricsRec_
  message TT_SBit_MetricsRec {
    uint16 height = 1;
    uint16 width = 2;
    int16 horiBearingX = 3;
    int16 horiBearingY = 4;
    uint16 horiAdvance = 5;
    int16 vertBearingX = 6;
    int16 vertBearingY = 7;
    uint16 vertAdvance = 8;
  }
  
  // PS_TableRec_
  message PS_TableRec {
    bytes block = 1;
    uint64 cursor = 2;
    uint64 capacity = 3;
    uint64 init = 4;
    int32 max_elems = 5;
    repeated bytes elements = 6;
    repeated uint32 lengths = 7;
    FT_MemoryRec memory = 8;
    PS_Table_FuncsRec funcs = 9;
  }
  
  // FTC_SBitRec_
  message FTC_SBitRec {
    uint8 width = 1;
    uint8 height = 2;
    int8 left = 3;
    int8 top = 4;
    uint8 format = 5;
    uint8 max_grays = 6;
    int16 pitch = 7;
    int8 xadvance = 8;
    int8 yadvance = 9;
    bytes buffer = 10;
  }
  
  // T1_Hints_FuncsRec_
  message T1_Hints_FuncsRec {
    T1_HintsRec hints = 1;
  }
  
  // T2_Hints_FuncsRec_
  message T2_Hints_FuncsRec {
    T2_HintsRec hints = 1;
  }
  
  // PSH_Globals_FuncsRec_
  message PSH_Globals_FuncsRec {
  }
  
  // FT_GlyphRec_
  message FT_GlyphRec {
    FT_LibraryRec library = 1;
    FT_Glyph_Class clazz = 2;
    FT_Glyph_Format format = 3;
    FT_Vector advance = 4;
  }
  
  // z_stream_s
  message z_stream_s {
    bytes next_in = 1;
    uint32 avail_in = 2;
    uint64 total_in = 3;
    bytes next_out = 4;
    uint32 avail_out = 5;
    uint64 total_out = 6;
    string msg = 7;
    internal_state state = 8;
    Zalloc zalloc = 9;
    Zfree zfree = 10;
    bytes opaque = 11;
    int32 data_type = 12;
    uint64 adler = 13;
    uint64 reserved = 14;
  }
  
  // FT_CMap_ClassRec_
  message FT_CMap_ClassRec {
    uint64 size = 1;
  }
  
  // TT_Transform_
  message TT_Transform_ {
    int64 xx = 1;
    int64 xy = 2;
    int64 yx = 3;
    int64 yy = 4;
    int64 ox = 5;
    int64 oy = 6;
  }
  
  // TT_CMap12Rec_
  message TT_CMap12Rec {
    TT_CMapRec cmap = 1;
    bool valid = 2;
    uint64 cur_charcode = 3;
    uint32 cur_gindex = 4;
    uint64 cur_group = 5;
    uint64 num_groups = 6;
  }
  
  // WinPE32_SectionRec_
  message WinPE32_SectionRec {
    bytes name = 1;
    uint32 virtual_address = 2;
    uint32 size_of_raw_data = 3;
    uint32 pointer_to_raw_data = 4;
  }
  
  // SDF_Params_
  message SDF_Params_ {
    FT_Orientation orientation = 1;
    bool flip_sign = 2;
    bool flip_y = 3;
    int32 overload_sign = 4;
  }
  
  // TOrigin_
  message TOrigin_ {
    bytes origin = 1;
    int32 pitch = 2;
  }
  
  // TT_DriverRec_
  message TT_DriverRec {
    FT_DriverRec root = 1;
    TT_GlyphZoneRec zone = 2;
    uint32 interpreter_version = 3;
  }
  
  // tt_sfnt_id_rec_
  message tt_sfnt_id_rec {
    uint64 CheckSum = 1;
    uint64 Length = 2;
  }
  
  // AFM_ValueRec_
  message AFM_ValueRec {
    AFM_ValueType type = 1;
    AFM_ValueRec_Value u = 2;
  }
  
  // WinResourceInfoRec_
  message WinResourceInfoRec {
    uint16 type_id = 1;
    uint16 count = 2;
  }
  
  // SVG_RendererRec_
  message SVG_RendererRec {
    FT_RendererRec root = 1;
    bool loaded = 2;
    bool hooks_set = 3;
    SVG_RendererHooks hooks = 4;
    bytes state = 5;
  }
  
  // FTC_SFamilyClassRec_
  message FTC_SFamilyClassRec {
    FTC_MruListClassRec clazz = 1;
  }
  
  // IUP_WorkerRec_
  message IUP_WorkerRec {
    FT_Vector orgs = 1;
    FT_Vector curs = 2;
    FT_Vector orus = 3;
    uint32 max_points = 4;
  }
  
  // CF2_GlyphPathRec_
  message CF2_GlyphPathRec {
    CF2_FontRec font = 1;
    CF2_OutlineCallbacksRec callbacks = 2;
    CF2_HintMapRec hintMap = 3;
    CF2_HintMapRec firstHintMap = 4;
    CF2_HintMapRec initialHintMap = 5;
    CF2_ArrStackRec hintMoves = 6;
    int32 scaleX = 7;
    int32 scaleC = 8;
    int32 scaleY = 9;
    FT_Vector fractionalTranslation = 10;
    bool pathIsOpen = 11;
    bool pathIsClosing = 12;
    bool darken = 13;
    bool moveIsPending = 14;
    CF2_ArrStackRec hStemHintArray = 15;
    CF2_ArrStackRec vStemHintArray = 16;
    CF2_HintMaskRec hintMask = 17;
    int32 hintOriginY = 18;
    CF2_BluesRec blues = 19;
    int32 xOffset = 20;
    int32 yOffset = 21;
    int32 miterLimit = 22;
    int32 snapThreshold = 23;
    FT_Vector offsetStart0 = 24;
    FT_Vector offsetStart1 = 25;
    FT_Vector currentCS = 26;
    FT_Vector currentDS = 27;
    FT_Vector start = 28;
    bool elemIsQueued = 29;
    int32 prevElemOp = 30;
    FT_Vector prevElemP0 = 31;
    FT_Vector prevElemP1 = 32;
    FT_Vector prevElemP2 = 33;
    FT_Vector prevElemP3 = 34;
  }
  
  // FTC_IFamilyClassRec_
  message FTC_IFamilyClassRec {
    FTC_MruListClassRec clazz = 1;
  }
  
  // PFR_BitWriter_
  message PFR_BitWriter_ {
    bytes line = 1;
    int32 pitch = 2;
    uint32 width = 3;
    uint32 rows = 4;
    uint32 total = 5;
  }
  
  // TBBox_Rec_
message TBBox_Rec {
    FT_Vector last = 1;
    FT_BBox bbox = 2;
  }
  
  // CFF_CMapStdRec_
  message CFF_CMapStdRec {
    FT_CMapRec cmap = 1;
    repeated uint16 gids = 2;
  }
  
  // BDF_CMapRec_
  message BDF_CMapRec {
    FT_CMapRec cmap = 1;
    uint64 num_encodings = 2;
    repeated BDF_encoding_el encodings = 3;
  }
  
  // gray_TWorker_
  message gray_TWorker {
    __jmp_buf_tag jump_buffer = 1;
    int32 min_ex = 2;
    int32 max_ex = 3;
    int32 min_ey = 4;
    int32 max_ey = 5;
    int32 count_ey = 6;
    TCell cell = 7;
    TCell cell_free = 8;
    TCell cell_null = 9;
    repeated TCell ycells = 10;
    int64 x = 11;
    int64 y = 12;
    FT_Outline outline = 13;
    TPixmap target = 14;
    RenderSpanFunc render_span = 15;
    bytes render_span_data = 16;
  }
  
  // PFR_SlotRec_
  message PFR_SlotRec {
    FT_GlyphSlotRec root = 1;
    PFR_GlyphRec glyph = 2;
  }
  
  // PCF_CMapRec_
  message PCF_CMapRec {
    FT_CMapRec root = 1;
    PCF_EncRec enc = 2;
  }
  
  // FTC_FaceNodeRec_
  message FTC_FaceNodeRec {
    FTC_MruNodeRec node = 1;
    bytes face_id = 2;
    FT_FaceRec face = 3;
  }
  
  // PSH_GlyphRec_
  message PSH_GlyphRec {
    uint32 num_points = 1;
    uint32 num_contours = 2;
    repeated PSH_PointRec points = 3;
    repeated PSH_ContourRec contours = 4;
    FT_MemoryRec memory = 5;
    FT_Outline outline = 6;
    PSH_GlobalsRec globals = 7;
    repeated PSH_Hint_TableRec hint_tables = 8;
    bool do_horz_hints = 9;
    bool do_vert_hints = 10;
    bool do_horz_snapping = 11;
    bool do_vert_snapping = 12;
    bool do_stem_adjust = 13;
  }
  
  // fvar_axis_
  message fvar_axis_ {
    uint64 axisTag = 1;
    int64 minValue = 2;
    int64 defaultValue = 3;
    int64 maxValue = 4;
    uint16 flags = 5;
    uint16 nameID = 6;
  }
  
  // CF2_StackRec_
  message CF2_StackRec {
    FT_MemoryRec memory = 1;
    repeated int32 error = 2;
    repeated CF2_StackNumber buffer = 3;
    CF2_StackNumber top = 4;
    uint32 stackSize = 5;
  }
  
  // CID_SizeRec_
  message CID_SizeRec {
    FT_SizeRec root = 1;
    bool valid = 2;
  }
  
  // AF_AxisHintsRec_::struct
  message AF_AxisHintsRec_Struct {
    repeated AF_SegmentRec segments = 1;
    repeated AF_EdgeRec edges = 2;
  }
  
  // TT_CMap14Rec_
  message TT_CMap14Rec {
    TT_CMapRec cmap = 1;
    uint64 num_selectors = 2;
    uint32 max_results = 3;
    repeated uint32 results = 4;
    FT_MemoryRec memory = 5;
  }
  
  // CID_Loader_
  message CID_Loader {
    CID_Parser parser = 1;
    int32 num_chars = 2;
  }
  
  // PFR_SizeRec_
  message PFR_SizeRec {
    FT_SizeRec root = 1;
  }
  
  // SDF_Renderer_Module_
  message SDF_Renderer_Module {
    FT_RendererRec root = 1;
    uint32 spread = 2;
    bool flip_sign = 3;
    bool flip_y = 4;
    bool overlaps = 5;
  }
  
  // T42_FaceRec_
  message T42_FaceRec {
    FT_FaceRec root = 1;
    T1_FontRec type1 = 2;
    bytes psnames = 3;
    bytes psaux = 4;
    bytes ttf_data = 5;
    int64 ttf_size = 6;
    FT_FaceRec ttf_face = 7;
    repeated FT_CharMapRec charmaprecs = 8;
    repeated FT_CharMapRec charmaps = 9;
    PS_UnicodesRec unicode_map = 10;
  }
  
  // TT_CMap4Rec_
  message TT_CMap4Rec {
    TT_CMapRec cmap = 1;
    uint32 cur_charcode = 2;
    uint32 cur_gindex = 3;
    uint32 num_ranges = 4;
    uint32 cur_range = 5;
    uint32 cur_start = 6;
    uint32 cur_end = 7;
    int32 cur_delta = 8;
    bytes cur_values = 9;
  }
  
  // TT_ValidatorRec_
  message TT_ValidatorRec {
    FT_ValidatorRec validator = 1;
    uint32 num_glyphs = 2;
  }
  
  // TT_SBitDecoderRec_
  message TT_SBitDecoderRec {
    TT_FaceRec face = 1;
    FT_StreamRec stream = 2;
    FT_Bitmap bitmap = 3;
    TT_SBit_MetricsRec metrics = 4;
    bool metrics_loaded = 5;
    bool bitmap_allocated = 6;
    uint8 bit_depth = 7;
    uint64 ebdt_start = 8;
    uint64 ebdt_size = 9;
    uint64 strike_index_array = 10;
    uint64 strike_index_count = 11;
    bytes eblc_base = 12;
    bytes eblc_limit = 13;
  }

  // CFF_Field_Handler_
message CFF_Field_Handler {
    int32 kind = 1;
    int32 code = 2;
    uint32 offset = 3;
    uint32 size = 4;
    CFF_ParserRec reader = 5;
    uint32 array_max = 6;
    uint32 count_offset = 7;
  }
  
  // CFF_ParserRec_
  message CFF_ParserRec {
    FT_LibraryRec library = 1;
    bytes start = 2;
    bytes limit = 3;
    bytes cursor = 4;
    repeated bytes stack = 5;
    repeated bytes top = 6;
    uint32 stackSize = 7;
    uint32 object_code = 8;
    google.protobuf.Any object = 9;
    uint16 num_designs = 10;
    uint16 num_axes = 11;
  }
  
  // FTC_CMapNodeRec_
  message FTC_CMapNodeRec {
    FTC_NodeRec node = 1;
    bytes face_id = 2;
    uint32 cmap_index = 3;
    uint32 first = 4;
    repeated uint16 indices = 5;
  }
  
  // CF2_CallbackParamsRec_
  message CF2_CallbackParamsRec {
    FT_Vector pt0 = 1;
    FT_Vector pt1 = 2;
    FT_Vector pt2 = 3;
    FT_Vector pt3 = 4;
    int32 op = 5;
  }
  
  // PSH_AlignmentRec_
  message PSH_AlignmentRec {
    int32 align = 1;
    int64 align_top = 2;
    int64 align_bot = 3;
  }
  
  // FNT_CMapRec_
  message FNT_CMapRec {
    FT_CMapRec cmap = 1;
    uint32 first = 2;
    uint32 count = 3;
  }
  
  // CID_GlyphSlotRec_
  message CID_GlyphSlotRec {
    FT_GlyphSlotRec root = 1;
    bool hint = 2;
    bool scaled = 3;
    int64 x_scale = 4;
    int64 y_scale = 5;
  }
  
  // PFR_CoordRec_
  message PFR_CoordRec {
    uint32 org = 1;
    uint32 cur = 2;
  }
  
  // AF_GlyphHintsRec_::struct
  message AF_GlyphHintsRec_Struct {
    repeated AF_PointRec points = 1;
    repeated AF_PointRec contours = 2;
  }
  
  // T1_Loader_
  message T1_Loader {
    T1_ParserRec parser = 1;
    int32 num_chars = 2;
    PS_TableRec encoding_table = 3;
    int32 num_glyphs = 4;
    PS_TableRec glyph_names = 5;
    PS_TableRec charstrings = 6;
    PS_TableRec swap_table = 7;
    int32 num_subrs = 8;
    PS_TableRec subrs = 9;
    FT_HashRec subrs_hash = 10;
    bytes fontdata = 11;
    uint32 keywords_encountered = 12;
  }
  
  // SDF_Shape_
  message SDF_Shape {
    FT_MemoryRec memory = 1;
    repeated SDF_Contour contours = 2;
  }
  
  // gray_TRaster_
  message gray_TRaster {
    bytes memory = 1;
  }
  
  // PFR_CMapRec_
  message PFR_CMapRec {
    FT_CMapRec cmap = 1;
    uint32 num_chars = 2;
    repeated PFR_CharRec chars = 3;
  }
  
  // Cpal_
  message Cpal {
    uint16 version = 1;
    uint16 num_colors = 2;
    bytes colors = 3;
    bytes color_indices = 4;
    google.protobuf.Any table = 5;
    uint64 table_size = 6;
  }
  
  // BDF_FaceRec_
  message BDF_FaceRec {
    FT_FaceRec root = 1;
    string charset_encoding = 2;
    string charset_registry = 3;
    bdf_font_t bdffont = 4;
    repeated BDF_encoding_el en_table = 5;
    uint32 default_glyph = 6;
  }
  
  // CF2_HintMoveRec_
  message CF2_HintMoveRec {
    uint64 j = 1;
    int32 moveUp = 2;
  }
  
  // TT_CMap13Rec_
  message TT_CMap13Rec {
    TT_CMapRec cmap = 1;
    bool valid = 2;
    uint64 cur_charcode = 3;
    uint32 cur_gindex = 4;
    uint64 cur_group = 5;
    uint64 num_groups = 6;
  }
  
  // PCF_ParsePropertyRec_
  message PCF_ParsePropertyRec {
    int64 name = 1;
    bool isString = 2;
    int64 value = 3;
  }
  
  // WinPE_RsrcDataEntryRec_
  message WinPE_RsrcDataEntryRec {
    uint64 offset_to_data = 1;
    uint64 size = 2;
    uint64 code_page = 3;
    uint64 reserved = 4;
  }
  
  // GX_GVar_Head_
  message GX_GVar_Head {
    int64 version = 1;
    uint16 axisCount = 2;
    uint16 globalCoordCount = 3;
    uint64 offsetToCoord = 4;
    uint16 glyphCount = 5;
    uint16 flags = 6;
    uint64 offsetToData = 7;
  }
  
  // AF_WritingSystemClassRec_
  message AF_WritingSystemClassRec {
    AF_WritingSystem writing_system = 1;
    uint64 style_metrics_size = 2;
    StyleMetricsInitFunc style_metrics_init = 3;
    StyleMetricsScaleFunc style_metrics_scale = 4;
    StyleMetricsDoneFunc style_metrics_done = 5;
    StyleMetricsGetstdwFunc style_metrics_getstdw = 6;
    StyleHintsInitFunc style_hints_init = 7;
    StyleHintsApplyFunc style_hints_apply = 8;
  }
  
  // WinPE_RsrcDirRec_
  message WinPE_RsrcDirRec {
    uint64 characteristics = 1;
    uint64 time_date_stamp = 2;
    uint16 major_version = 3;
    uint16 minor_version = 4;
    uint16 number_of_named_entries = 5;
    uint16 number_of_id_entries = 6;
  }
  
  // CF2_StackNumber_::union
  message CF2_StackNumber_Union {
    int32 r = 1;
    int32 f = 2;
    int32 i = 3;
  }
  
  // TPoint_
  message TPoint {
    int64 x = 1;
    int64 y = 2;
  }
  
  // T1_GlyphSlotRec_
  message T1_GlyphSlotRec {
    FT_GlyphSlotRec root = 1;
    bool hint = 2;
    bool scaled = 3;
    int64 x_scale = 4;
    int64 y_scale = 5;
    int32 max_points = 6;
    int32 max_contours = 7;
  }
  
  // bdf_parse_t__
  message bdf_parse_t {
    uint64 flags = 1;
    uint64 cnt = 2;
    uint64 row = 3;
    int16 minlb = 4;
    int16 maxlb = 5;
    int16 maxrb = 6;
    int16 maxas = 7;
    int16 maxds = 8;
    int16 rbearing = 9;
    string glyph_name = 10;
    int64 glyph_enc = 11;
    bdf_font_t font = 12;
    bdf_options_t opts = 13;
    bdf_list_t list = 14;
    FT_MemoryRec memory = 15;
    uint64 size = 16;
  }
  
  // FT_LZWFileRec_
  message FT_LZWFileRec {
    FT_StreamRec source = 1;
    FT_StreamRec stream = 2;
    FT_MemoryRec memory = 3;
    FT_LzwStateRec lzw = 4;
    bytes buffer = 5;
    uint64 pos = 6;
    bytes cursor = 7;
    bytes limit = 8;
  }
  
  // AF_CJKMetricsRec_
  message AF_CJKMetricsRec {
    AF_StyleMetricsRec root = 1;
    uint32 units_per_em = 2;
    repeated AF_CJKAxisRec axis = 3;
  }
  
  // PFR_FaceRec_
  message PFR_FaceRec {
    FT_FaceRec root = 1;
    PFR_HeaderRec header = 2;
    PFR_LogFontRec log_font = 3;
    PFR_PhyFontRec phy_font = 4;
  }
  
  // FTC_SizeNodeRec_
  message FTC_SizeNodeRec {
    FTC_MruNodeRec node = 1;
    FT_SizeRec size = 2;
    FTC_ScalerRec scaler = 3;
  }
  
  // GX_FVar_Head_
  message GX_FVar_Head {
    int64 version = 1;
    uint16 offsetToData = 2;
    uint16 axisCount = 3;
    uint16 axisSize = 4;
    uint16 instanceCount = 5;
    uint16 instanceSize = 6;
  }
  
  // BSDF_TRaster_
  message BSDF_TRaster {
    FT_MemoryRec memory = 1;
  }
  
  // AF_StyleClassRec_
  message AF_StyleClassRec {
    AF_Style style = 1;
    AF_WritingSystem writing_system = 2;
    AF_Script script = 3;
    AF_Blue_Stringset blue_stringset = 4;
    AF_Coverage coverage = 5;
  }
  
  // T1_CMapCustomRec_
  message T1_CMapCustomRec {
    FT_CMapRec cmap = 1;
    uint32 first = 2;
    uint32 count = 3;
    repeated uint16 indices = 4;
  }
  
  // PCF_DriverRec_
  message PCF_DriverRec {
    FT_DriverRec root = 1;
    bool no_long_family_names = 2;
  }
  
  // AF_LoaderRec_
message AF_LoaderRec {
    FT_FaceRec face = 1;
    AF_FaceGlobalsRec globals = 2;
    AF_GlyphHintsRec hints = 3;
    AF_StyleMetricsRec metrics = 4;
    bool transformed = 5;
    FT_Matrix trans_matrix = 6;
    FT_Vector trans_delta = 7;
    FT_Vector pp1 = 8;
    FT_Vector pp2 = 9;
  }
  
  // BaseGlyphRecord_
  message BaseGlyphRecord {
    uint16 gid = 1;
    uint16 first_layer_index = 2;
    uint16 num_layers = 3;
  }
  
  // FT_StrokerRec_
  message FT_StrokerRec {
    int64 angle_in = 1;
    int64 angle_out = 2;
    FT_Vector center = 3;
    int64 line_length = 4;
    bool first_point = 5;
    bool subpath_open = 6;
    int64 subpath_angle = 7;
    FT_Vector subpath_start = 8;
    int64 subpath_line_length = 9;
    bool handle_wide_strokes = 10;
    FT_Stroker_LineCap line_cap = 11;
    FT_Stroker_LineJoin line_join = 12;
    FT_Stroker_LineJoin line_join_saved = 13;
    int64 miter_limit = 14;
    int64 radius = 15;
    repeated FT_StrokeBorderRec borders = 16;
    FT_LibraryRec library = 17;
  }
  
  // black_TWorker_
  message black_TWorker {
    int32 precision_bits = 1;
    int32 precision = 2;
    int32 precision_half = 3;
    int32 precision_scale = 4;
    int32 precision_step = 5;
    repeated int64 buff = 6;
    repeated int64 sizeBuff = 7;
    repeated int64 maxBuff = 8;
    repeated int64 top = 9;
    int32 error = 10;
    bool dropOutControl = 11;
    int64 lastX = 12;
    int64 lastY = 13;
    int64 minY = 14;
    int64 maxY = 15;
    uint16 num_Profs = 16;
    int32 numTurns = 17;
    repeated TProfile cProfile = 18;
    repeated TProfile fProfile = 19;
    repeated TProfile gProfile = 20;
    TStates state = 21;
    FT_Outline outline = 22;
    int32 bTop = 23;
    int32 bRight = 24;
    int32 bPitch = 25;
    bytes bOrigin = 26;
    bytes bLine = 27;
    Proc_Sweep_InitFunc Proc_Sweep_Init = 28;
    Proc_Sweep_SpanFunc Proc_Sweep_Span = 29;
    Proc_Sweep_DropFunc Proc_Sweep_Drop = 30;
    Proc_Sweep_StepFunc Proc_Sweep_Step = 31;
  }
  
  // FTC_GCacheClassRec_
  message FTC_GCacheClassRec {
    FTC_CacheClassRec clazz = 1;
    FTC_MruListClassRec family_class = 2;
  }
  
  // FTC_BasicFamilyRec_
  message FTC_BasicFamilyRec {
    FTC_FamilyRec family = 1;
    FTC_BasicAttrRec attrs = 2;
  }
  
  // FTC_BasicQueryRec_
  message FTC_BasicQueryRec {
    FTC_GQueryRec gquery = 1;
    FTC_BasicAttrRec attrs = 2;
  }
  
  // BaseGlyphV1Record_
  message BaseGlyphV1Record {
    uint16 gid = 1;
    uint64 paint_offset = 2;
  }
  
  // bdf_property_t_::union
  message bdf_property_t_Union {
    string atom = 1;
    int64 l = 2;
    uint64 ul = 3;
  }
  
  // FTC_GCacheRec_
  message FTC_GCacheRec {
    FTC_CacheRec cache = 1;
    FTC_MruListRec families = 2;
  }
  
  // T42_GlyphSlotRec_
  message T42_GlyphSlotRec {
    FT_GlyphSlotRec root = 1;
    FT_GlyphSlotRec ttslot = 2;
  }
  
  // FTC_SNodeRec_
  message FTC_SNodeRec {
    FTC_GNodeRec gnode = 1;
    uint32 count = 2;
    repeated FTC_SBitRec sbits = 3;
  }
  
  // BSDF_Worker_
  message BSDF_Worker {
    ED distance_map = 1;
    int32 width = 2;
    int32 rows = 3;
    SDF_Raster_Params params = 4;
  }
  
  // Svg_doc_
  message Svg_doc {
    uint16 start_glyph_id = 1;
    uint16 end_glyph_id = 2;
    uint64 offset = 3;
    uint64 length = 4;
  }
  
  // TEncoding_
  message TEncoding {
    int32 platform_id = 1;
    int32 encoding_id = 2;
    FT_Encoding encoding = 3;
  }
  
  // PS_Hinter_Module_Rec_
  message PS_Hinter_Module_Rec {
    FT_ModuleRec root = 1;
    PS_HintsRec ps_hints = 2;
    PSH_Globals_FuncsRec globals_funcs = 3;
    T1_Hints_FuncsRec t1_funcs = 4;
    T2_Hints_FuncsRec t2_funcs = 5;
  }

  // T42_Loader_
message T42_Loader {
    T42_ParserRec parser = 1;
    int32 num_chars = 2;
    PS_TableRec encoding_table = 3;
    int32 num_glyphs = 4;
    PS_TableRec glyph_names = 5;
    PS_TableRec charstrings = 6;
    PS_TableRec swap_table = 7;
  }
  
  // WinNameInfoRec_
  message WinNameInfoRec {
    uint16 offset = 1;
    uint16 length = 2;
    uint16 flags = 3;
    uint16 id = 4;
    uint16 handle = 5;
    uint16 usage = 6;
  }
  
  // PCF_FaceRec_
  message PCF_FaceRec {
    FT_FaceRec root = 1;
    FT_StreamRec comp_stream = 2;
    FT_StreamRec comp_source = 3;
    string charset_encoding = 4;
    string charset_registry = 5;
    PCF_TocRec toc = 6;
    PCF_AccelRec accel = 7;
    int32 nprops = 8;
    repeated PCF_PropertyRec properties = 9;
    uint32 nmetrics = 10;
    repeated PCF_MetricRec metrics = 11;
    PCF_EncRec enc = 12;
    uint32 bitmapsFormat = 13;
  }
  
  // FTC_INodeRec_
  message FTC_INodeRec {
    FTC_GNodeRec gnode = 1;
    FT_GlyphRec glyph = 2;
  }
  
  // FT_GZipFileRec_
  message FT_GZipFileRec {
    FT_StreamRec source = 1;
    FT_StreamRec stream = 2;
    FT_MemoryRec memory = 3;
    z_stream_s zstream = 4;
    uint32 start = 5;
    bytes input = 6;
    bytes buffer = 7;
    uint32 pos = 8;
    bytes cursor = 9;
    bytes limit = 10;
  }
  
  // AFM_ValueRec_::union
  message AFM_ValueRec_Union {
    string s = 1;
    int64 f = 2;
    int32 i = 3;
    uint32 u = 4;
    uint8 b = 5;
  }
  
  // AF_LatinMetricsRec_
  message AF_LatinMetricsRec {
    AF_StyleMetricsRec root = 1;
    uint32 units_per_em = 2;
    repeated AF_LatinAxisRec axis = 3;
  }
  
  // PCF_PropertyRec_::union
  message PCF_PropertyRec_Union {
    string atom = 1;
    int64 l = 2;
    uint64 ul = 3;
  }
  
  // T1_SizeRec_
  message T1_SizeRec {
    FT_SizeRec root = 1;
  }
  
  // AF_Script_UniRangeRec_
  message AF_Script_UniRangeRec {
    uint32 first = 1;
    uint32 last = 2;
  }
  
  // SDF_TRaster_
  message SDF_TRaster {
    FT_MemoryRec memory = 1;
  }
  
  // SDF_Signed_Distance_
  message SDF_Signed_Distance {
    int32 distance = 1;
    int32 cross = 2;
    int8 sign = 3;
  }
  
  // Svg_
  message Svg {
    uint16 version = 1;
    uint16 num_entries = 2;
    bytes svg_doc_list = 3;
    bytes table = 4;
    uint32 table_size = 5;
  }
  
  // WinNE_HeaderRec_
  message WinNE_HeaderRec {
    uint16 magic = 1;
    uint16 resource_tab_offset = 2;
    uint16 rname_tab_offset = 3;
  }
  
  // PCF_Compressed_MetricRec_
  message PCF_Compressed_MetricRec {
    uint8 leftSideBearing = 1;
    uint8 rightSideBearing = 2;
    uint8 characterWidth = 3;
    uint8 ascent = 4;
    uint8 descent = 5;
  }
  
  // CF2_StemHintRec_
  message CF2_StemHintRec {
    bool used = 1;
    int32 min = 2;
    int32 max = 3;
    int32 minDS = 4;
    int32 maxDS = 5;
  }
  
  // WinMZ_HeaderRec_
  message WinMZ_HeaderRec {
    uint16 magic = 1;
    uint16 lfanew = 2;
  }
  
  // TT_CMap_ClassRec_
  message TT_CMap_ClassRec {
    FT_CMap_ClassRec clazz = 1;
    uint32 format = 2;
    ValidateFunc validate = 3;
    GetCMapInfoFunc get_cmap_info = 4;
  }
  
  // T42_SizeRec_
  message T42_SizeRec {
    FT_SizeRec root = 1;
    FT_SizeRec ttsize = 2;
  }
  
  // FTC_CMapQueryRec_
  message FTC_CMapQueryRec {
    bytes face_id = 1;
    uint32 cmap_index = 2;
    uint32 char_code = 3;
  }
  
  // CF2_BufferRec_
  message CF2_BufferRec {
    int32 error = 1;
    bytes start = 2;
    bytes end = 3;
    bytes ptr = 4;
  }
  
  // AF_Blue_StringRec_
  message AF_Blue_StringRec {
    AF_Blue_String string = 1;
    uint16 properties = 2;
  }
  
  // T42_DriverRec_
  message T42_DriverRec {
    FT_DriverRec root = 1;
    FT_Driver_ClassRec ttclazz = 2;
  }
  